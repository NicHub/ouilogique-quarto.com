[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OUILOGIQUE.COM",
    "section": "",
    "text": "radios\nenum\nscratchpad\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nTest\n\n\n\n\n\n\n\n\n\n\n\n\n10 octobre 2023\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nSimple Lightbox Example\n\n\n\n\n\n\n\n\n\n\n\n\n7 octobre 2023\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nFlasher un bootloader\n\n\n\n\n\n\n\n\n\n\n\n\n30 mai 2023\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nInstaller Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran\n\n\n\n\n\n\n\n\n\n\n\n\n9 mars 2023\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nLes plus belles tables ASCII\n\n\n\n\n\n\n\n\n\n\n\n\n\n10 août 2022\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nHumour There is no place like 127.0.0.1\n\n\n\n\n\n\n\n\n\n\n\n\n19 juin 2022\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nUne image haute résolution avec un Samsung S21 Ultra\n\n\n\n\n\n\n\n\n\n\n\n\n30 avril 2021\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nInstaller Pi-hole sur un Raspberry\n\n\n\n\n\n\n\n\n\n\n\n\n25 décembre 2020\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nHumour Magic Word\n\n\n\n\n\n\n\n\n\n\n\n\n25 mai 2020\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nLivres\n\n\n\n\n\n\n\n\n\n\n\n\n19 octobre 2019\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMise en route d’une carte STM32‑E407 sur PlatformIO avec le framework Arduino\n\n\n\n\n\n\n\n\n\n\n\n\n8 septembre 2019\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nDébuggage sur ESP32 avec un ESP‑Prog et PIO Unified Debugger\n\n\n\n\n\n\n\n\n\n\n\n\n26 juillet 2019\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nPlateforme de Stewart pilotée avec un ESP32\n\n\n\n\n\n\n\n\n\n\n\n\n27 mars 2019\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nHacker une clé RF433\n\n\n\n\n\n\n\n\n\n\n\n\n15 juillet 2018\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nNeoPixel sur Raspberry Pi\n\n\n\n\n\n\n\n\n\n\n\n\n22 avril 2018\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction au langage JavaScript\n\n\n\n\n\n\n\n\n\n\n\n\n17 février 2018\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction au langage CSS\n\n\n\n\n\n\n\n\n\n\n\n\n16 février 2018\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction au langage HTML\n\n\n\n\n\n\n\n\n\n\n\n\n15 février 2018\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nHumour Matplotlib\n\n\n\n\n\n\n\n\n\n\n\n\n22 octobre 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nBouton piézoélectrique sur Arduino\n\n\n\n\n\n\n\n\n\n\n\n\n30 septembre 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nInstaller Mosquitto MQTT avec WebSocket sur un Raspberry Pi\n\n\n\n\n\n\n\n\n\n\n\n\n18 septembre 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nInstaller GPHOTO2\n\n\n\n\n\n\n\n\n\n\n\n\n27 août 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMPPT — Maximum Power Point Tracking\n\n\n\n\n\n\n\n\n\n\n\n\n18 juin 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nSandwich de WEMOS\n\n\n\n\n\n\n\n\n\n\n\n\n22 mai 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nBMP280 avec Arduino Pro Mini\n\n\n\n\n\n\n\n\n\n\n\n\n11 mai 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nNeopixel Didel WS2813\n\n\n\n\n\n\n\n\n\n\n\n\n27 avril 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nCommande d’un relai bistable 240 V avec un Arduino Pro Mini\n\n\n\n\n\n\n\n\n\n\n\n\n\n14 avril 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest du deep sleep de l’ESP8266\n\n\n\n\n\n\n\n\n\n\n\n\n2 avril 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nRelai commandé par microcontrôleur\n\n\n\n\n\n\n\n\n\n\n\n\n13 janvier 2017\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMise en route d’un Arduino Pro Mini 3.3 V\n\n\n\n\n\n\n\n\n\n\n\n\n14 novembre 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nLes pointeurs en C\n\n\n\n\n\n\n\n\n\n\n\n\n1 novembre 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTempérature et humidité avec un capteur DHT22 sur ESP8266\n\n\n\n\n\n\n\n\n\n\n\n\n22 octobre 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nExternal interrupts on the ATmega168/328\n\n\n\n\n\n\n\n\n\n\n\n\n21 octobre 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest de décharge de batteries\n\n\n\n\n\n\n\n\n\n\n\n\n5 octobre 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nESP8266 — Commandes AT utiles\n\n\n\n\n\n\n\n\n\n\n\n\n13 août 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMise en route d’un ESP8266-01\n\n\n\n\n\n\n\n\n\n\n\n\n13 août 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nUtiliser des cartes à microcontrôleurs comme bridge USB‑RS232\n\n\n\n\n\n\n\n\n\n\n\n\n10 août 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTests de modules DFPlayer\n\n\n\n\n\n\n\n\n\n\n\n\n8 juillet 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTests de modules nRF24L01+\n\n\n\n\n\n\n\n\n\n\n\n\n27 juin 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nHorloge à cycles ultradiens\n\n\n\n\n\n\n\n\n\n\n\n\n7 juin 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest d’une horloge temps réel DS1307 I²C\n\n\n\n\n\n\n\n\n\n\n\n\n4 juin 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nProgramme basique pour commander un servomoteur\n\n\n\n\n\n\n\n\n\n\n\n\n2 juin 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest d’un écran OLED 128×64 I²C\n\n\n\n\n\n\n\n\n\n\n\n\n25 mai 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest du capteur de température DS18B20 avec le protocole OneWire\n\n\n\n\n\n\n\n\n\n\n\n\n21 mai 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest de taille entre les fonctions de manipulation de ports et les fonctions Arduino\n\n\n\n\n\n\n\n\n\n\n\n\n25 avril 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest de vitesse entre les fonctions de manipulation de ports et les fonctions Arduino\n\n\n\n\n\n\n\n\n\n\n\n\n25 avril 2016\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nAfficheur à LED 128×16\n\n\n\n\n\n\n\n\n\n\n\n\n26 novembre 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266\n\n\n\n\n\n\n\n\n\n\n\n\n16 novembre 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMise en route d’un capteur de pression, température et humidité Strinity Sensors Cobber I²C\n\n\n\n\n\n\n\n\n\n\n\n\n1 novembre 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266\n\n\n\n\n\n\n\n\n\n\n\n\n27 septembre 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nDécouverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51\n\n\n\n\n\n\n\n\n\n\n\n\n14 septembre 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nCommande d’une matrice 32×32 avec un MSP430\n\n\n\n\n\n\n\n\n\n\n\n\n11 septembre 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nGénérateurs de sites web statiques\n\n\n\n\n\n\n\n\n\n\n\n\n5 septembre 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest d’un écran TFT 2.4”\n\n\n\n\n\n\n\n\n\n\n\n\n14 juillet 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTest de hubs USB\n\n\n\n\n\n\n\n\n\n\n\n\n2 juillet 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nAnalyseur logique Scanalogic-2\n\n\n\n\n\n\n\n\n\n\n\n\n27 juin 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nCommander des Arduino avec Node.js\n\n\n\n\n\n\n\n\n\n\n\n\n26 juin 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nUn analyseur logique Arduino\n\n\n\n\n\n\n\n\n\n\n\n\n12 juin 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMOOC — Initiation aux microcontrôleurs\n\n\n\n\n\n\n\n\n\n\n\n\n11 juin 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nPinouts de quelques cartes\n\n\n\n\n\n\n\n\n\n\n\n\n28 mai 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nMélodies avec un Arduino UNO\n\n\n\n\n\n\n\n\n\n\n\n\n28 mai 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nTête d’impression chinoise pour µDelta\n\n\n\n\n\n\n\n\n\n\n\n\n24 mai 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nLED adressables\n\n\n\n\n\n\n\n\n\n\n\n\n22 mai 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nProgrammer un ATtiny25V avec un Arduino UNO comme programmateur\n\n\n\n\n\n\n\n\n\n\n\n\n21 mai 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nUtiliser un chip CH340G au lieu d’un FTDI\n\n\n\n\n\n\n\n\n\n\n\n\n21 mai 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nProgrammer un MSP430 en mode ISP\n\n\n\n\n\n\n\n\n\n\n\n\n7 janvier 2015\n\n\nNico\n\n\n\n\n\n\n  \n\n\n\n\nLa manipulation des entrées-sorties à l’aide des registres de port\n\n\n\n\n\n\n\n\n\n\n\n\n3 décembre 2014\n\n\nNico\n\n\n\n\n\n\nAucun article correspondant\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-04-25-test_vitesse_port_vs_arduino/index.html",
    "href": "posts/2016-04-25-test_vitesse_port_vs_arduino/index.html",
    "title": "Test de vitesse entre les fonctions de manipulation de ports et les fonctions Arduino",
    "section": "",
    "text": "Les fonctionnalités offertes par l’écosystème Arduino sont forts pratiques, particulièrement pour les débutants, mais ne sont pas toujours des plus efficaces en terme d’utilisation des ressources, particulièrement en ce qui concerne l’utilisation des temps de cycles. Voici un petit comparatifs avec les fonctions de manipulation de port.\nJ’ai mesuré les résultats présentés ci-dessous sur un clone d’Arduino Nano. Les temps sont donnés en nombre de cycles d’horloge, et dans le cas présenté, un cycle vaut 62.5 ns (16 MHz).\nLe programme de test est disponible ci-dessous. Si le test est fait avec une boucle for, il faut ajouter 2 aux nombres de cycles indiqués dans le tableau.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-04-25-test_vitesse_port_vs_arduino/index.html#à-lire-également",
    "href": "posts/2016-04-25-test_vitesse_port_vs_arduino/index.html#à-lire-également",
    "title": "Test de vitesse entre les fonctions de manipulation de ports et les fonctions Arduino",
    "section": "À lire également",
    "text": "À lire également\nBenchmarking Arduino’s digitalWrite() with a Logic Analyzer"
  },
  {
    "objectID": "posts/2015-05-28-melodie/index.html",
    "href": "posts/2015-05-28-melodie/index.html",
    "title": "Mélodies avec un Arduino UNO",
    "section": "",
    "text": "Voici un programme écrit par Pierre-Yves Rochat, professeur du MOOC sur les µcontrôleurs de l’EPFL qui montre comment utiliser les timers et les interruptions de l’Arduino UNO (ou du Diduino) pour jouer des mélodies.\nLe fonctionnement du programme est décrit dans ce document :\n\nhttps://d396qusza40orc.cloudfront.net/microcontroleurs/lecture_doc/MelodieDoc.pdf\n\nVoir aussi la vidéo d’introduction au MOOC :\n\nhttps://www.youtube.com/watch?v=wCgJRtzTvmI\n\n/*\n * JOUER DES MÉLODIES SUR ARDUINO UNO\n *\n * Programme original de Pierre-Yves Rochat — pyr.ch\n * Source :\n * https://d396qusza40orc.cloudfront.net/microcontroleurs/lecture_doc/MelodieDoc.pdf\n *\n * Modifié par Nicolas Jeanmonod, décembre 2014\n *\n */\n\n\n\n\n\n#define HPPin               PORTD1 // Le HP du LearnCBot est sur la pin PORTD1\n#define HautParleurEnSortie DDRD  |= ( 1 &lt;&lt; HPPin )\n#define TicHautParleur      PORTD ^= ( 1 &lt;&lt; HPPin )\n\n// DURÉE DES NOTES\n// La durée des notes est définie sur les 3 bits de poids forts. La Noire doit\n// être définie à la valeur 0. Cela permet de ne pas devoir la spécifier\n// explicitement dans les partitions. Les valeurs des autres durées sont sans\n// importance.\n#define TripleCroche 0b00100000\n#define DoubleCroche 0b01000000\n#define Croche       0b01100000\n#define Noire        0b00000000\n#define NoireP       0b10000000\n#define Blanche      0b10100000\n#define BlancheP     0b11000000\n#define Ronde        0b11100000\n\n#define tCr          DoubleCroche\n#define dCr          DoubleCroche\n#define Cr           Croche\n#define Nr           Noire\n#define Np           NoireP\n#define Bl           Blanche\n#define Blp          BlancheP\n#define Ro           Ronde\n\n\n#define Fin       0\n#define Reprise   0xFE\n\n#define DivTimer8 0b010\n\n\nconst unsigned int NotePeriode[] =\n{\n      4545,  4290,  4050,  3822,  3608,  3405,  3214,  3034,  2863,  2703,  2551,  2408,\n      2273,  2145,  2025,  1911,  1804,  1703,  1607,  1517,  1432,  1351,  1276,  1204,\n      1136,  1073,  1012,   956,   902,   851,   804,   758\n};\n\nconst byte NoteFrequenceDiv8[] =\n{\n        28,    29,    31,    33,    35,    37,    39,    41,    44,    46,    49,    52,\n        55,    58,    62,    65,    69,    73,    78,    82,    87,    92,    98,   104,\n       110,   117,   123,   131,   139,   147,   156,   165\n};\n\nenum notes\n{\n       la1,  la1d,   si1,   do2,  do2d,   re2,  re2d,   mi2,   fa2,  fa2d,  sol2, sol2d,\n       la2,  la2d,   si2,   do3,  do3d,   re3,  re3d,   mi3,   fa3,  fa3d,  sol3, sol3d,\n       la3,  la3d,   si3,   do4,  do4d,   re4,  re4d,   mi4\n};\n\nunsigned int Pique;\n\nbyte MasqueDuree = 0b11100000;\nbyte MasqueNote  = 0b00011111;\n\nbyte* DebutMelodie;\nbyte* PtMelodie;\nunsigned int PeriodesRestantes;\n\nunsigned int PeriodeCourante;\nunsigned int PeriodesOff;\n\nbyte NoteCourante;\n\nbyte FrereJacques[] =\n{\ndo3+Cr,   re3+Cr,  mi3+Cr,   do3+Cr,  do3+Cr,  re3+Cr, mi3+Cr,  do3+Cr,\nmi3+Cr,   fa3+Cr,  sol3,     mi3+Cr,  fa3+Cr,  sol3,\nsol3+dCr, la3+dCr, sol3+dCr, fa3+dCr, mi3+Cr,  do3+Cr, sol3+dCr, la3+dCr, sol3+dCr, fa3+dCr, mi3+Cr, do3+Cr,\ndo3+Cr,   sol2+Cr, do3,      do3+Cr,  sol2+Cr, do3,\n\n// Fin ou Reprise\nReprise\n};\n\n// https://books.google.ch/books?id=RCYakK7vmoEC&pg=PA459&lpg=PA459&dq=jingle+bells+garageband&source=bl&ots=Nxg1Yr-DCE&sig=4DhKrlQlvWNL8qNni7kGt5UcWss&hl=fr&sa=X&ei=H46YVI_eDoHlaLqqgYAF&ved=0CGIQ6AEwCQ#v=onepage&q=jingle%20bells%20garageband&f=false\nbyte JingleBells[]=\n{\n\n// Intro\nfa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, mi3+Cr, mi3+Cr, mi3+dCr, mi3+dCr,\n    sol3+Cr, sol3+Cr, fa3+Cr, re3+Cr, do3, sol3,\n\n// Verse\nsol2+Cr, mi3+Cr, re3+Cr, do3+Cr, sol2+Np, mi2+dCr, fa2+dCr,\n    sol2+Cr, mi3+Cr, re3+Cr, do3+Cr, la2+Bl,\n        la2+Cr, fa3+Cr, mi3+Cr, re3+Cr, si2+Bl,\n            sol3+Cr, sol3+Cr, fa3+Cr, re3+Cr, mi3+Bl,\nsol2+Cr, mi3+Cr, re3+Cr, do3+Cr, sol2+Bl,\n    sol2+Cr, mi3+Cr, re3+Cr, do3+Cr, la2+Np, la2+Cr,\n        la2+Cr, fa3+Cr, mi3+Cr, re3+Cr, sol3+Cr, sol3+Cr, sol3+Cr, sol3+Cr,\n            la3+Cr, sol3+Cr, fa3+Cr, re3+Cr, do3, sol3,\n\n// Chorus / Refrain\nmi3+Cr, mi3+Cr, mi3, mi3+Cr, mi3+Cr, mi3,\n    mi3+Cr, sol3+Cr, do3+Cr, re3+Cr, mi3+Bl,\n        fa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, mi3+Cr, mi3+Cr, mi3+dCr, mi3+dCr,\n            mi3+Cr, re3+Cr, re3+Cr, mi3+Cr, re3, sol3,\nmi3+Cr, mi3+Cr, mi3, mi3+Cr, mi3+Cr, mi3,\n    mi3+Cr, sol3+Cr, do3+Cr, re3+Cr, mi3+Bl,\n        fa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, mi3+Cr, mi3+Cr, mi3+dCr, mi3+dCr,\n            sol3+Cr, sol3+Cr,  fa3+Cr, re3+Cr, do3+Bl,\n\n// Outro\nfa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, fa3+Cr, mi3+Cr, mi3+Cr, mi3+Cr,\n    sol3+Cr, sol3+Cr, fa3+Cr, re3+Cr, do3+Bl,\n\n// Fin ou Reprise\nFin\n};\n\n\n\n\n\n/*\n *\n */\nISR( TIMER1_COMPA_vect )\n{\n    if( PeriodesRestantes == 0 )\n    {\n        NoteCourante = *PtMelodie;\n        switch( NoteCourante )\n        {\n            case Fin:\n                TIMSK1 &= ~( 1 &lt;&lt; OCIE1A );\n                return;\n            case Reprise:\n                PtMelodie    = DebutMelodie;\n                NoteCourante = *PtMelodie;\n                break;\n            default:\n                break;\n        }\n        PtMelodie++;\n        PeriodeCourante   = NotePeriode[ NoteCourante & MasqueNote ];\n        PeriodesRestantes = NoteFrequenceDiv8[ NoteCourante & MasqueNote ];\n\n        NoteCourante     &= MasqueDuree;\n        switch( NoteCourante )\n        {\n            case TripleCroche:  PeriodesRestantes *= 1;  break;\n            case DoubleCroche:  PeriodesRestantes *= 2;  break;\n            case Croche:        PeriodesRestantes *= 4;  break;\n            case 0:             PeriodesRestantes *= 8;  break;\n            case NoireP:        PeriodesRestantes *= 12; break;\n            case Blanche:       PeriodesRestantes *= 16; break;\n            case BlancheP:      PeriodesRestantes *= 24; break;\n            case Ronde:         PeriodesRestantes *= 32; break;\n        }\n        PeriodesOff = ( PeriodesRestantes * Pique ) / 100;\n    }\n    OCR1A = TCNT1 + PeriodeCourante;\n    if( PeriodesRestantes &gt; PeriodesOff ){ TicHautParleur; }\n    PeriodesRestantes--;\n}\n\n\n\n\n\n/*\n *\n */\nvoid\nInitMelodie()\n{\n    HautParleurEnSortie;\n    TCCR1B  = ( DivTimer8 &lt;&lt; CS10 ); // choix de la fréquence : 16 MHz / 8 = 2 MHz\n    TIMSK1 |= ( 1 &lt;&lt; OCIE1A );       // enclenche l’interrupt du timer\n    sei();                           // activation générale des interruptions\n}\n\n\n\n\n\n/*\n *\n */\nvoid\nJoueMelodie( byte* melodie )\n{\n    DebutMelodie      = melodie;\n    PtMelodie         = DebutMelodie;\n    PeriodesRestantes = 0;\n    InitMelodie();\n}\n\n\n\n\n\n/*\n *\n */\nint\nmainInit()\n{\n    // Nécessaire pour utiliser la pin PORTD1 sur le Diduino.\n    Serial.end();\n\n    // Toutes les pins de tous les ports en INPUT-PULLUP\n     DDRB = 0b00000000;\n    PORTB = 0b11111111;\n     DDRC = 0b00000000;\n    PORTC = 0b11111111;\n     DDRD = 0b00000000;\n    PORTD = 0b11111111;\n\n    // Excepté la LED du board\n     DDRB |= ( 1&lt;&lt;PORTB5 );\n    PORTB &=~( 1&lt;&lt;PORTB5 );\n}\n\n\n\n\n\n/*\n *\n */\nint\nmain()\n{\n    mainInit();\n    Pique = 20;\n    switch( 1 )\n    {\n        case 0:\n            JoueMelodie( FrereJacques );\n            break;\n        case 1:\n            JoueMelodie( JingleBells );\n            break;\n        default:\n            break;\n    }\n\n    volatile unsigned int i;\n    while( true )\n    {\n        // Clignote la LED du board\n        for( i=0; i&lt;65535; i++ ){}\n        PORTB ^= ( 1&lt;&lt;PORTB5 );\n    }\n}\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-05-22-leds_adressables/index.html",
    "href": "posts/2015-05-22-leds_adressables/index.html",
    "title": "LED adressables",
    "section": "",
    "text": "Pour mon projet de programmation d’un MSP430 en mode ISP, j’ai utilisé une LED RGB. C’est simplement trois LED dans un seul boîtier avec quatre pattes : une pour chaque couleur et une pour la masse.\nJusque là, rien de bien méchant. Mais comme je n’avais qu’une LED de ce type et que je l’ai soudée sur mon Perma-Proto d’Adafruit, il m’en fallait des nouvelles. Ni une, ni deux, j’ai commandé quatre LED P9823-F8 chez Boxtec.\n{:height=“250px” width=“250px”}\nMal m’en a pris, elles ne sont pas du tout du même type que ma LED RGB de base. En fait ce sont des LED adressables en PWM. Eh oui, elles contiennent de la logique capable de comprendre un signal PWM et de s’allumer en conséquence. Avec en plus la possibilité d’être mises en série.\nD’après Boxtec, la LED P9823-F8 est compatible avec le modèle WS2812 vendu par Adafruit.\nPour la programmation sur Arduino, j’ai trouvé deux librairies :\nCelle d’Adafruit est plus simple à mettre en œuvre et les exemples fonctionnent bien.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-05-22-leds_adressables/index.html#pinout",
    "href": "posts/2015-05-22-leds_adressables/index.html#pinout",
    "title": "LED adressables",
    "section": "Pinout",
    "text": "Pinout\n{:width=“200px”}"
  },
  {
    "objectID": "posts/2015-05-22-leds_adressables/index.html#câblage",
    "href": "posts/2015-05-22-leds_adressables/index.html#câblage",
    "title": "LED adressables",
    "section": "Câblage",
    "text": "Câblage\n{:width=“600px”}\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\nNotes\n\nSur mon câblage, on voit que j’ai mis la pin DO de la dernière LED à la masse. Ce n’est pas nécessaire.\nLes résistances sont de 220 Ω (à remplacer par des 47 Ω ou des 10 Ω !!)\nLes condensateurs sont des 104 (100 nF)"
  },
  {
    "objectID": "posts/2015-05-22-leds_adressables/index.html#exemple-de-programme",
    "href": "posts/2015-05-22-leds_adressables/index.html#exemple-de-programme",
    "title": "LED adressables",
    "section": "Exemple de programme",
    "text": "Exemple de programme\nP9823_LED_RS232.ino"
  },
  {
    "objectID": "posts/2015-05-22-leds_adressables/index.html#liens",
    "href": "posts/2015-05-22-leds_adressables/index.html#liens",
    "title": "LED adressables",
    "section": "Liens",
    "text": "Liens\n\nSpécification (en chinois traduit en anglais par Google…)\nBoxtec NeoPixel Guide"
  },
  {
    "objectID": "posts/2015-05-22-leds_adressables/index.html#problème",
    "href": "posts/2015-05-22-leds_adressables/index.html#problème",
    "title": "LED adressables",
    "section": "Problème",
    "text": "Problème\nLe rouge ne fonctionne pas bien. Avec une LED c’est OK, mais dès qu’on en utilise plus, elles ont tendance à clignoter. Ceci est probablement dû au fait que les LED rouges ont besoin de plus de courant pour bien fonctionner. J’ai donc fait un test (2 mois plus tard…) avec des résistances de 47 Ω à la place des 220 Ω et ça fonctionne nettement mieux ! Pour avoir du blanc presque blanc, je suis descendu jusqu’à 10 Ω. Bon le mieux est de vérifier la tension aux bornes des pattes d’alimentation des LED. Voilà ce que j’obtiens avec différentes résistances :\nR LED (Ω)   U LED (V)\n=====================\n   10         3.5\n   47         3.0\n  220         2.5\nDonc, même avec 10 Ω, la tension n’atteint pas les 4.5 V minimums de la spec. Heureusement, ça marche quand même. Bon, le Vcc du µcontrôleur se casse la gueule assez vite, donc inutile de vouloir lui coller trop de LED…"
  },
  {
    "objectID": "posts/2017-05-22-wemos-sandwich/index.html",
    "href": "posts/2017-05-22-wemos-sandwich/index.html",
    "title": "Sandwich de WEMOS",
    "section": "",
    "text": "Étage 1 : Battery Shield Étage 2 : WEMOS ESP8266 V2 Étage 3 : Relay Shield Étage 4 : nRF24 custom shield avec condensateur 2200 µF Étage 5 : DHT11 Shield\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-05-22-wemos-sandwich/index.html#matériel",
    "href": "posts/2017-05-22-wemos-sandwich/index.html#matériel",
    "title": "Sandwich de WEMOS",
    "section": "",
    "text": "Étage 1 : Battery Shield Étage 2 : WEMOS ESP8266 V2 Étage 3 : Relay Shield Étage 4 : nRF24 custom shield avec condensateur 2200 µF Étage 5 : DHT11 Shield"
  },
  {
    "objectID": "posts/2017-05-22-wemos-sandwich/index.html#notes",
    "href": "posts/2017-05-22-wemos-sandwich/index.html#notes",
    "title": "Sandwich de WEMOS",
    "section": "Notes",
    "text": "Notes\nJ’ai réalisé ce montage juste pour le plaisir des yeux. Il n’a pas d’utilité particulière dans cette configuration, mais tous les éléments fonctionnent.\nJ’ai réalisé le shield nRF24 moi-même. Pour le brochage, voir la page sur le nRF24.\nPour les connexions, j’ai utilisé des Long 8-pin Headers qui sont forts pratiques. Ils permettent également de séparer les éléments trop hauts comme le relai."
  },
  {
    "objectID": "posts/2017-05-22-wemos-sandwich/index.html#images",
    "href": "posts/2017-05-22-wemos-sandwich/index.html#images",
    "title": "Sandwich de WEMOS",
    "section": "Images",
    "text": "Images\n\n\n\nWEMOS Sandwich\n\n\n\n\n\nWEMOS Sandwich"
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "",
    "text": "Un ordinateur sur OS X Yosemite (10.10)\nUn Arduino UNO\nUn ATtiny25V\nUn breadboard\n4 LED\n4 résistances de 220 Ω\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#matériel-requis",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#matériel-requis",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "",
    "text": "Un ordinateur sur OS X Yosemite (10.10)\nUn Arduino UNO\nUn ATtiny25V\nUn breadboard\n4 LED\n4 résistances de 220 Ω"
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#sources",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#sources",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Sources",
    "text": "Sources\n\nSource principale\n\n\nhttps://www.didel.com/diduino/ProgrammerUnAtTiny.pdf\n\n\nAutres sources\n\n\nhttps://arduino.cc/en/Tutorial/ArduinoISP\nhttps://ww1.microchip.com/downloads/en/devicedoc/atmel-2586-avr-8-bit-microcontroller-attiny25-attiny45-attiny85_datasheet.pdf\n\n\nÀ voir aussi\n\n\nhttps://arduino.cc/en/Main/Standalone\nhttps://arduino.cc/en/Tutorial/ArduinoToBreadboard\nhttps://codeandlife.com/2012/03/21/using-arduino-uno-as-isp/"
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préambule",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préambule",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Préambule",
    "text": "Préambule\nLe but de ce document est de présenter la programmation d’un microcontrôleur ATtiny25V à l’aide d’un Arduino UNO. Ce mode de programmation s’appelle en anglais AVR ISP (in-system programmer). L’IDE Arduino utilisé pendant les tests était la version 1.5.8 bêta Java 6."
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préparation-matérielle",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préparation-matérielle",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Préparation matérielle",
    "text": "Préparation matérielle\nCâbler la plaque d’essai selon le schéma ci-dessous. Les trois premières LED, verte, rouge et orange, servent à afficher le statut lors de la programmation :\n\npin 9: Heartbeat - shows the programmer is running\npin 8: Error - Lights up if something goes wrong (use red if that makes sense)\npin 7: Programming - In communication with the slave\n\net la quatrième LED, bleue, sert à vérifier que l’ATtiny a effectivement été programmé avec le programme tinyblinky.ino. À noter que les LED sont optionnelles.\n\n\n\nouilogique.com"
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préparation-logicielle-ide-1.6.4",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préparation-logicielle-ide-1.6.4",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Préparation logicielle (IDE < 1.6.4)",
    "text": "Préparation logicielle (IDE &lt; 1.6.4)\n\n!! Édit 2016-07-03 Ceci est valable pour les version de l’IDE Arduino qui n’avaient pas le gestionnaire de carte. À partir de la version 1.6.4, suivre la procédure du chapitre suivant.\n\n\nTélécharger les librairies (Core Libraries) de la famille ATtiny de https://code.google.com/p/arduino-tiny/ en prenant garde de choisir la version correspondante à l’IDE Arduino qui va être utilisé par la suite.\nDécompresser le fichier zip et déplacer le répertoire tiny dans ~/Documents/Arduino/hardware/.\nCopier le fichier tiny/avr/Prospective Boards.txt vers tiny/avr/boards.txt.\nLe fichier boards.txt peut optionnellement être modifié, par exemple pour enlever des définitions de microcontrôleurs inutiles. Ce fichier complète celui de l’IDE qui se trouve à /Applications/Arduino.app/Contents/Resources/Java/hardware/arduino/avr/boards.txt et qui peut lui aussi être édité.\nRedémarrer l’IDE. Le menu Outils/Type de carte doit afficher la liste des ATtiny installés ci-dessus."
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préparation-logicielle-ide-1.6.4-1",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#préparation-logicielle-ide-1.6.4-1",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Préparation logicielle (IDE >= 1.6.4)",
    "text": "Préparation logicielle (IDE &gt;= 1.6.4)\n\n!! Édit 2016-07-03\n\n\nOuvrir les préférences de l’IDE Arduino\nAjouter l’URL https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json dans URL de gestionnaire de cartes supplémentaires.\nAller dans le menu Outils/Type de cartes/Gestionnaire de cartes et rechercher ATtiny.\nInstaller les gestionnaire de David A. Mellis pour l’ATtiny."
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#configurer-larduino-uno-comme-un-programmateur",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#configurer-larduino-uno-comme-un-programmateur",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Configurer l’Arduino UNO comme un programmateur",
    "text": "Configurer l’Arduino UNO comme un programmateur\n\nOuvrir le croquis ArduinoISP.ino qui se trouve dans le menu Fichier/Exemples en onzième position.\nVérifier que la cible est l’Arduino UNO :\n\nOutils/Type de carte/Arduino UNO\nOutils/Port : Sélectionner le port du UNO\nOutils/Programmateur/AVRISP mkII\n\nTéléverser le croquis ArduinoISP.ino sur le UNO."
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#charger-le-bootloader-dans-lattiny",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#charger-le-bootloader-dans-lattiny",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Charger le bootloader dans l’ATtiny",
    "text": "Charger le bootloader dans l’ATtiny\n\nNormalement cette étape n’est pas nécessaire quand on programme en mode ISP. Le bootloader est justement là pour palier l’absence de programmateur. Comme je n’ai pas encore vérifié cette info, je laisse ce texte pour l’instant. De toute façon une chose est sûre : ça fonctionne comme ça.\n\nCette opération est nécessaire pour les microcontrôleurs qui n’ont jamais été programmés. Elle ne doit être effectuée qu’une fois.\n\nChanger la cible pour programmer l’ATtiny25V :\n\nOutils/Type de carte/ATtiny25 @ 1 MHz\nOutils/Port : Sélectionner le port du UNO\nOutils/Programmateur/Arduino as ISP\n\nCharger le bootloader :\n\nOutils/Graver la séquence d’initialisation\n\n\nD’après Didel, ce n’est pas vraiment un bootloader qui est chargé, mais une configuration des fusibles qui est réalisée."
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#programmer-lattiny",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#programmer-lattiny",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Programmer l’ATtiny",
    "text": "Programmer l’ATtiny\n\nVérifier que la cible est effectivement l’ATtiny comme à l’étape précédente.\nTéléverser le croquis suivant :\n\n/*\n    tinyblinky.ino\n    Programme pour tester la programmation en mode ISP d’un ATtiny25V\n    Fait clignoter une LED sur PB4, pin 3\n*/\n\n#include &lt;avr/io.h&gt;\n#define LedPin PORTB4\n#define LedToggle PORTB ^= ( 1&lt;&lt;LedPin )\n#define delay1 250\n#define delay2 500\n\nvoid wait( int delay_ms )\n{\n    for( volatile int i=0; i&lt;delay_ms; i++ )\n    {\n        for( volatile int j=0; j&lt;50; j++ ) {}\n    }\n}\n\nint main()\n{\n    DDRB |= ( 1&lt;&lt;LedPin );\n    while( true )\n    {\n        LedToggle;  wait( delay1 );\n        LedToggle;  wait( delay2 );\n    }\n}"
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#résolution-de-problèmes",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#résolution-de-problèmes",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Résolution de problèmes",
    "text": "Résolution de problèmes\nCertaines cartes UNO requièrent l’ajout d’un condensateur de 10 µF entre la pin RESET et la pin GND. Voir à ce sujet https://forum.arduino.cc/index.php?topic=104435.0. Pour moi, ça a fonctionné sans ce condensateur."
  },
  {
    "objectID": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#programmation-des-fusibles",
    "href": "posts/2015-05-21-programmer_un_attiny_avec_un_arduino_uno/index.html#programmation-des-fusibles",
    "title": "Programmer un ATtiny25V avec un Arduino UNO comme programmateur",
    "section": "Programmation des fusibles",
    "text": "Programmation des fusibles\n\nLes infos de ce chapitres m’ont été gracieusement transmises par Richard (www.fablab-chene20.ch).\n\nLes fusibles (fuses en anglais) sont des paramètres intégrés aux microcontrôleurs d’Atmel et que l’on peut modifier à l’aide du programme avrdude. C’est ce même programme qui est utilisé par l’IDE Arduino pour envoyer les fichiers compilés sur le microcontrôleur. On peut d’ailleurs voir ce qu’il fait de la manière suivante :\n\nOuvrir les préférences de l’IDE Arduino\nCliquer sur le lien en bas de la fenêtre pour ouvrir le dossier contenant les préférences. Alternativement on peut directement éditer le fichier avec la commande open ~/Library/Arduino15/preferences.txt\nFermer l’IDE Arduino, car il écrase le fichier des préférences lorsqu’on le quitte\nChanger la ligne upload.verbose=false en upload.verbose=true\nRedémarrer l’IDE\nTéléverser le croquis tinyblinky.ino\nCopier le contenu de la console et le coller dans un éditeur de texte\nChercher la chaîne de caractère avrdude\nLa première occurrence nous montre un message similaire à\n\n/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin/avrdude -C/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf -v -v -v -v -pattiny25 -cstk500v1 -P/dev/tty.usbmodem1421 -b19200 -Uflash:w:/var/folders/3l/c6_nv3414rb_sxjkb8z9z1fr0000gn/T/build2612095162045447463.tmp/tinyblinky.cpp.hex:i\n\nConfiguration d’avrdude\nPour utiliser avrdude, le plus simple est d’ajouter les deux lignes suivantes à la fin du fichier ~/.bash_profile et de redémarrer le terminal\nPATH=$PATH:/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin\nAVRDUDECONF=/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf\n\n\nLectures des fusibles\nLa commande utilisée par l’IDE Arduino nous donne toutes les informations de configuration pour envoyer nos propres commandes. La première chose à faire est de lire la configuration actuelle. Adaptez la commande suivante à votre configuration :\navrdude                      \\\n    -C $AVRDUDECONF          \\\n    -v                       \\\n    -p attiny25              \\\n    -c stk500v1              \\\n    -P /dev/tty.usbmodem1421 \\\n    -b 19200                 \\\n    -U lfuse:r:-:i           \\\n    -U hfuse:r:-:i           \\\n    -U efuse:r:-:i           \\\n    -n\navrdude renvoie une longue réponse qui se termine par :\navrdude: safemode: lfuse reads as 62\navrdude: safemode: hfuse reads as D7\navrdude: safemode: efuse reads as FF\navrdude: safemode: Fuses OK (H:FF, E:D7, L:62)\n\nOn constate que cette version d’avrdude a un bug : La dernière ligne indique les fusibles dans l’ordre H, E, L alors qu’en fait il s’agit de l’ordre E, H, L. Il faut donc faire attention et ne tenir compte que des trois premières lignes. La version d’avrdude utilisée pour ce test est : Version 6.0.1, compiled on Apr  3 2014 at 22:00:33\n\n\n\nÉcriture des fusibles\nPour configurer les fusibles, il est conseillé d’utiliser un outil de configuration, comme https://www.engbedded.com/fusecalc/ ou de lire le chapitre 20. Memory Programming de la spécification https://ww1.microchip.com/downloads/en/devicedoc/atmel-2586-avr-8-bit-microcontroller-attiny25-attiny45-attiny85_datasheet.pdf. La vidéo https://www.youtube.com/watch?v=jP1NTgs-a-s donne une bonne introduction en anglais.\nDans notre cas, nous allons simplement utiliser les valeurs données par l’utilitaire fusecalc ci-dessus pour enlever la division par 8 de la fréquence d’horloge. La seule valeur que nous changeons est\nDivide clock by 8 internally; [CKDIV8=0]\nCe qui modifie la valeur du Low Byte qui passe de 62 à e2.\navrdude                      \\\n    -C $AVRDUDECONF          \\\n    -v                       \\\n    -p attiny25              \\\n    -c stk500v1              \\\n    -P /dev/tty.usbmodem1421 \\\n    -b 19200                 \\\n    -U lfuse:w:0xe2:m        \\\n    -U hfuse:w:0xd7:m        \\\n    -U efuse:w:0xff:m\nAprès l’exécution de la commande ci-dessus, on constate que le croquis tinyblinky.ino est exécuté 8 fois plus rapidement.\nSi on veut retrouver les fusibles d’origine :\navrdude                      \\\n    -C $AVRDUDECONF          \\\n    -v                       \\\n    -p attiny25              \\\n    -c stk500v1              \\\n    -P /dev/tty.usbmodem1421 \\\n    -b 19200                 \\\n    -U lfuse:w:0x62:m        \\\n    -U hfuse:w:0xd7:m        \\\n    -U efuse:w:0xff:m"
  },
  {
    "objectID": "posts/2017-01-13-relai-commande-par-microcontroleur/index.html",
    "href": "posts/2017-01-13-relai-commande-par-microcontroleur/index.html",
    "title": "Relai commandé par microcontrôleur",
    "section": "",
    "text": "Relai\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-01-13-relai-commande-par-microcontroleur/index.html#matériel",
    "href": "posts/2017-01-13-relai-commande-par-microcontroleur/index.html#matériel",
    "title": "Relai commandé par microcontrôleur",
    "section": "Matériel",
    "text": "Matériel\n\nDC-12V-10A-Relay-1CH-Wireless-RF-Remote-Control-Switch-Transmitter-Receiver\nUSB-male-to-screw-connector-USB\nBooster 2A 2V-24V\nWago 2 broches (https://fr.aliexpress.com/item/Free-shipping-WAGO-222-412-Universal-Compact-2-Wire-Wiring-Connector-2-pin-Conductor-Terminal-Block/32275638715.html)"
  },
  {
    "objectID": "posts/2017-10-22-humour-matplotlib/index.html",
    "href": "posts/2017-10-22-humour-matplotlib/index.html",
    "title": "Humour Matplotlib",
    "section": "",
    "text": "Un peu d’humour avec Matplotlib. L’exemple vient de la page https://matplotlib.org/1.3.0/examples/showcase/xkcd.html.\nEt le code se trouve là : effet-des-pizzas-sur-ma-sante.py\nMatplotlib fait partie des 4 bibliothèques de base pour le calcul numérique avec Python\nOn peut écrire le code dans n’importe quel éditeur de texte, mais c’est quand même plus agréable d’utiliser Spyder qui est un IDE qui ressemble comme deux gouttes d’eau à celui de Matlab.\nPython, Spyder, les 4 bibliothèques dont j’ai parlé ainsi qu’une ribambelle d’autres outils peuvent être téléchargés et installés avec le package Anaconda. Si vous débutez dans le monde Python, je vous conseille de télécharger la version Python 3.6. En tout cas, je vous déconseille de commencer un nouveau projet en Python 2.7, car son développement sera arrêté en 2020 et le décompte se trouve sur cette page : pythonclock.org.\nUne fois Anaconda installé, vous pouvez ouvrir Spyder de la façon suivante :\nVous pouvez découvrir les techniques de base dans le fichier de démo.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-10-22-humour-matplotlib/index.html#références",
    "href": "posts/2017-10-22-humour-matplotlib/index.html#références",
    "title": "Humour Matplotlib",
    "section": "Références",
    "text": "Références\n\nMon aide mémoire Python\nhttp://www.diveintopython3.net/\nhttps://python.developpez.com/cours/plongez_au_coeur_de_python/?page=page1"
  },
  {
    "objectID": "posts/2017-10-22-humour-matplotlib/index.html#notes",
    "href": "posts/2017-10-22-humour-matplotlib/index.html#notes",
    "title": "Humour Matplotlib",
    "section": "Notes",
    "text": "Notes\nLa police utilisée par xkcd est Humor Sans et peut être téléchargée ici : https://github.com/shreyankg/xkcd-desktop. Malheureusement, elle ne fonctionne que sous Gnome.\nUne police qui ressemble est Graphite. Adobe en propose une version payante ici : https://fonts.adobe.com/fonts/graphite#fonts-section. Mais on peut télécharger gratuitement une des fontes ici : https://www.fontyukle.net/en/DownLoad-Graphite+Std.ttf ou la famille entière ici : https://www.wfonts.com/font/graphite-std."
  },
  {
    "objectID": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html",
    "href": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html",
    "title": "Programmer un MSP430 en mode ISP",
    "section": "",
    "text": "Lors du quatrième MOOC sur les µcontrôleurs de l’EPFL, Pierre-Yves Rochat nous a présenté comment utiliser une carte Launchpad pour programmer un MSP430 sur un breadboard. Cette façon de programmer est souvent appelée ISP (in-system programmer) ou programmation in situ en français.\nLe document original au format PDF\nVoilà le proto sur breadboard :\nVoilà le résultat final :\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html#leçons-apprises",
    "href": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html#leçons-apprises",
    "title": "Programmer un MSP430 en mode ISP",
    "section": "Leçons apprises",
    "text": "Leçons apprises\n\nProgrammer un MSP sur breadboard (un MSP430G2231 dans cette application).\nUtiliser une découpeuse laser.\nLes plaques à souder Perma-Proto d’Adafruit sont très pratiques.\nQue les LED RGB translucides sont très nettement moins lumineuses que les transparentes. J’utilise une LED translucide dans ce projet, mais j’ai un gadget similaire avec une LED transparente et la différence est frappante. J’aurais aussi dû être moins conservatif sur la question de la consommation et utiliser des résistances plus faibles.\nQu’une LED éclaire beaucoup plus sur le dessus que sur les côtés.\nQu’il est horriblement long et compliqué de réaliser un projet, même aussi simple que celui-là quand on a pas de matériel. J’étais tributaire des horaires d’ouverture du FabLab Chêne 20 (www.fablab-chene20.ch) et ça a été la course permanente pour réaliser ce montage. Notez que j’ai réalisé deux autres versions : une qui ne sera jamais utilisée et une autre que j’ai offerte à Noël, mais qui ne contient pas le montage électronique, c’est donc un simple photophore pour y placer une bougie et il a une forme différente de celui que je présente ici.\n\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left; clear:right; margin-bottom:200px;”}"
  },
  {
    "objectID": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html#notes",
    "href": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html#notes",
    "title": "Programmer un MSP430 en mode ISP",
    "section": "Notes",
    "text": "Notes\nPour ceux qui ont participé au quatrième MOOC sur les microcontrôleurs, voici le lien vers le forum où j’ai présenté ce projet :\n\nhttps://class.coursera.org/microcontroleurs-004/forum/thread?thread_id=327"
  },
  {
    "objectID": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html#code",
    "href": "posts/2015-01-07-programmer_un_msp430_en_mode_ISP/index.html#code",
    "title": "Programmer un MSP430 en mode ISP",
    "section": "Code",
    "text": "Code\nEt voilà le code pour faire des jolies transitions sur la LED RGB :\n/*\n\n    Blink Noël\n\n    Effet “Arc-en-ciel” sur une LED RGB. Idéal pour un gadget de Noël.\n\n    L’algorithme “Arc-en-ciel RGB” vient de :\n    https://fightpc.blogspot.ch/2008/03/arduino-mood-light.html\n    https://sites.google.com/site/c4rjim/blog/lampara_colores2.pde\n\n    Version MSP430\n    Implémenté sur MSP430G2231\n\n*/\n\n\n#include \"Energia.h\"\n\n#define ledR P2_6\n#define ledG P1_2\n#define ledB P1_6\n#define myDelayInit1 10\n#define myDelayInit2 80\n#define myDelay 1000\n\nvoid customDelay( unsigned long iMax );\nvoid setLeds( int setR, int setG, int setB );\n\nint i;\n\nvoid customDelay( unsigned long iMax )\n{\n    volatile unsigned long iDelay;\n    for( iDelay=0; iDelay&lt;iMax; iDelay++ ){ }\n}\n\nvoid setLeds( int setR, int setG, int setB )\n{\n    analogWrite( ledR, setR );\n    analogWrite( ledG, setG );\n    analogWrite( ledB, setB );\n}\n\nint main()\n{\n    WDTCTL = WDTPW + WDTHOLD;\n\n    // Configuration des LED en OUTPUT et de toutes les autres I/O en INPUT\n    // avec Pulldown. Pour les I/O inutilisées, TI recommande de les\n    // configurer soit en OUTPUT (PxOUT est sans importance) ou en INPUT avec\n    // Pullup/Pulldown (voir https://www.ti.com/lit/ug/slau144j/slau144j.pdf).\n    // Comme le µcontrôleur sera moulé dans de la colle, si des impuretés\n    // viennent à faire baisser la résistance, la solution INPUT/Pulldown\n    // paraît plus sûre qu’OUTPUT ou INPUT/Pullup.\n\n    // ledR, ledG, ledB -&gt; OUTPUT\n    // Toutes les autres -&gt; INPUT\n\n    //         l   l\n    //         e   e\n    //         d   d\n    //         B   G\n    P1DIR = 0b01000100;\n\n    //         l\n    //         e\n    //         d\n    //         R\n    P2DIR = 0b01000000;\n\n    // ledR, ledG, ledB -&gt; pas de Pullup/Pulldown\n    // Toutes les autres -&gt; Pullup/Pulldown\n    P1REN = 0b11111111 ^ P1DIR;\n    P2REN = 0b11111111 ^ P2DIR;\n\n    // ledR, ledG, ledB -&gt; OUTPUT = 0\n    // Toutes les autres -&gt; Pulldown\n    P1OUT = 0b00000000;\n    P2OUT = 0b00000000;\n\n    for( i = 0; i &lt; 256; i++ ){ setLeds( i,   0,     0     ); customDelay( myDelayInit1 ); }\n    for( i = 0; i &lt; 256; i++ ){ setLeds( 255, i,     0     ); customDelay( myDelayInit2 ); }\n    for( i = 0; i &lt; 256; i++ ){ setLeds( 255, 255,   i     ); customDelay( myDelayInit2 ); }\n    for( i = 0; i &lt; 256; i++ ){ setLeds( 255, 255-i, 255   ); customDelay( myDelayInit2 ); }\n    for( i = 0; i &lt; 256; i++ ){ setLeds( 255, 0,     255-i ); customDelay( myDelayInit2 ); }\n\n\n    while( true )\n    {\n        for( i = 0; i &lt; 256; i++ ){ setLeds( 255,   i,     0     ); customDelay( myDelay ); }\n        for( i = 0; i &lt; 256; i++ ){ setLeds( 255-i, 255,   0     ); customDelay( myDelay ); }\n        for( i = 0; i &lt; 256; i++ ){ setLeds( 0,     255,   i     ); customDelay( myDelay ); }\n        for( i = 0; i &lt; 256; i++ ){ setLeds( 0,     255-i, 255   ); customDelay( myDelay ); }\n        for( i = 0; i &lt; 256; i++ ){ setLeds( i,     0,     255   ); customDelay( myDelay ); }\n        for( i = 0; i &lt; 256; i++ ){ setLeds( 255,   0,     255-i ); customDelay( myDelay ); }\n    }\n}"
  },
  {
    "objectID": "posts/2023-05-30-flasher-un-bootloader/index.html",
    "href": "posts/2023-05-30-flasher-un-bootloader/index.html",
    "title": "Flasher un bootloader",
    "section": "",
    "text": "Un de mes Arduino Nano refusait de se faire flasher et retournait systématiquement une erreur du genre not in sync. En googlant, j’ai trouvé que plusieurs personnes ont résolu ce problème en changeant le type de bootloader en ATmega328p (Old Bootloader) dans le menu Tools/Processor: \"ATmega328p\"/ de l’IDE Arduino. Mais pour moi, ça n’a pas marché. Du coup, j’ai décidé de reflasher le bootloader en utilisant un Arduino UNO comme programmateur. Cette façon de faire s’appelle “ICSP” ou In Circuit Serial Programming.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2023-05-30-flasher-un-bootloader/index.html#câblage",
    "href": "posts/2023-05-30-flasher-un-bootloader/index.html#câblage",
    "title": "Flasher un bootloader",
    "section": "Câblage",
    "text": "Câblage\nIl faut connecter une à une les broches ICSP qui se trouvent à l’arrière des boards, à l’exception de la broche reset de la cible (l’Arduino Nano) qui est connectée à la broche 10 du programmateur (l’Arduino UNO).\n\n\n\nProgrammateur(Arduino UNO)\nCible(Arduino Nano)\n\n\n\n\n10\nICSP RESET\n\n\nICSP SCK\nICSP SCK\n\n\nICSP MISO\nICSP MISO\n\n\nICSP GND\nICSP GND\n\n\nICSP MOSI\nICSP MOSI\n\n\nICSP 5V\nICSP 5V\n\n\n\nÀ noter que les broches ICSP se trouvent à deux endroits :\n\nÀ l’arrière de la carte\nSur les côtés de la carte (broches usuelles)\n\nSur l’Aduino UNO, il y a deux groupes de broches ICSP. Celui qui nous intéresse ici est à l’arrière de la carte. L’autre groupe qui est proche du connecteur USB permet de programmer la puce ATmega16U2 qui permet la communication sur le bus USB.\nConsulter les brochages ici pour plus de détail : https://ouilogique.com/pinouts/.\n\nAttention : l’orientation des broches ICSP sur le UNO et le Nano sont différentes. Elles sont tournées de 180° l’une par rapport à l’autre, en utilisant le connecteur USB comme référence.\n\nVoir aussi la page https://qastack.fr/arduino/40098/icsp-pin-what-is-it-actually.\nJe conseille également de connecter trois LEDs sur les broches 7, 8 et 9. C’est optionnel, mais ces LEDs aident beaucoup à comprendre ce qui se passe.\n\n\n\nBroche\nSignal\n\n\n\n\n7\nProgramming\n\n\n8\nError\n\n\n9\nHeartbeat"
  },
  {
    "objectID": "posts/2023-05-30-flasher-un-bootloader/index.html#flashage-du-bootloader",
    "href": "posts/2023-05-30-flasher-un-bootloader/index.html#flashage-du-bootloader",
    "title": "Flasher un bootloader",
    "section": "Flashage du bootloader",
    "text": "Flashage du bootloader\n\nOuvrir l’IDE Arduino.\nFlasher le programmateur avec le programme ArduinoISP.ino qui se trouve dans le menu File/Examples/11.ArduinoISP.\nConfigurer le type de programmateur à la valeur Arduino as ISP dans le menu Tools/Programmer: \"Arduino as ISP\".\nFlasher le bootloader de la cible avec la fonction Burn bootloader tout en bas du menu Tools."
  },
  {
    "objectID": "posts/2023-05-30-flasher-un-bootloader/index.html#vérification",
    "href": "posts/2023-05-30-flasher-un-bootloader/index.html#vérification",
    "title": "Flasher un bootloader",
    "section": "Vérification",
    "text": "Vérification\nPour vérifier que le flashage du bootloader s’est bien déroulé, on peut programmer la cible en la connectant directement à l’ordinateur, sans passer par le programmateur.\nAlternativement, on peut aussi utiliser le programme avrdude pour faire cette vérification.\nalias avrdude='$HOME/Library/Arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17/bin/avrdude'\nAVRDUDE_CONF=$HOME/Library/Arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17/etc/avrdude.conf\navrdude -C $AVRDUDE_CONF -v -p atmega328p -c arduino -P /dev/cu.usbmodem4012401"
  },
  {
    "objectID": "posts/2023-05-30-flasher-un-bootloader/index.html#programmation-avec-le-programmateur",
    "href": "posts/2023-05-30-flasher-un-bootloader/index.html#programmation-avec-le-programmateur",
    "title": "Flasher un bootloader",
    "section": "Programmation avec le programmateur",
    "text": "Programmation avec le programmateur\nOn peut aussi programmer la cible en utilisant le programmateur. Ceci aura pour effet d’effacer le bootloader et on récupérera donc la place qu’il prend en mémoire, soit environ 512 octets. De plus les programmes s’exécuteront sans délai lorsque le microcontrôleur est mis sous tension. Ceci est dû au fait que le bootloader attend 1 ou 2 secondes au démarrage pour permettre la programmation par le port série.\nPour vérifier si un bootloader est présent, il faut redémarrer la carte en appuyant sur le bouton reset et observer l’état de la LED intégrée. Si elle clignote rapidement pendant environ une seconde puis fait une pause d’environ une seconde aussi, c’est que le bootloader est présent.\nPour programmer la cible en utilisant le programmateur, il faut :\n\nCâbler le programmateur et la cible comme expliqué au chapitre câblage ci-dessus.\nOuvrir l’IDE Arduino.\nVérifier que le type de programmateur est toujours configuré sur Arduino as ISP (voir ci-dessus)\nVérifier les réglages du port série et du type de carte :\n\nLe port série est celui du programmateur.\nLe type de carte est celui de la cible.\n\nCliquer Upload using programmer du menu Sketch.\n\n\nAttention, si on utilise la commande Upload conventionnelle, c’est le programmateur qui sera programmé et pas la cible. Dans tous les cas, ce n’est pas grave, il suffit d’uploader à nouveau le programme ArduinoISP.ino sur le programmateur.\n\n\nSi on essaie de programmer un microcontrôleur qui n’a pas de bootloader via le port série, l’upload échouera avec l’erreur programmer is not responding.\n\n\nSi on programme le microcontrôleur avec un programmateur, il faut débrancher les éventuels composants qui seraient connectés aux broches ICSP."
  },
  {
    "objectID": "posts/2022-08-10-les-plus-belles-tables-ascii/index.html",
    "href": "posts/2022-08-10-les-plus-belles-tables-ascii/index.html",
    "title": "Les plus belles tables ASCII",
    "section": "",
    "text": "Hier (9 août 2022), je suis tombé sur une table de caractères ASCII de toute beauté. Du coup, j’ai décidé de créer une page pour répertorier les plus belles tables que je trouverai sur mon chemin.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2022-08-10-les-plus-belles-tables-ascii/index.html#ascii-table-1.1-par-tom-gibara",
    "href": "posts/2022-08-10-les-plus-belles-tables-ascii/index.html#ascii-table-1.1-par-tom-gibara",
    "title": "Les plus belles tables ASCII",
    "section": "ASCII table 1.1 par Tom Gibara",
    "text": "ASCII table 1.1 par Tom Gibara\n\nhttps://github.com/tomgibara/ascii-table\n\n\n\n\nASCII table 1.1 Tom Gibara"
  },
  {
    "objectID": "posts/2022-08-10-les-plus-belles-tables-ascii/index.html#theasciicode.com.ar",
    "href": "posts/2022-08-10-les-plus-belles-tables-ascii/index.html#theasciicode.com.ar",
    "title": "Les plus belles tables ASCII",
    "section": "theasciicode.com.ar",
    "text": "theasciicode.com.ar\n\nhttps://theasciicode.com.ar/"
  },
  {
    "objectID": "posts/2017-04-02-test-deep-sleep-esp8266/index.html",
    "href": "posts/2017-04-02-test-deep-sleep-esp8266/index.html",
    "title": "Test du deep sleep de l’ESP8266",
    "section": "",
    "text": "WeMos® D1 Mini V2 NodeMcu 4M Bytes Lua WIFI Internet Of Things Development Board Based ESP8266\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#matériel",
    "href": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#matériel",
    "title": "Test du deep sleep de l’ESP8266",
    "section": "",
    "text": "WeMos® D1 Mini V2 NodeMcu 4M Bytes Lua WIFI Internet Of Things Development Board Based ESP8266"
  },
  {
    "objectID": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#différences-entre-les-3-modes-de-veille",
    "href": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#différences-entre-les-3-modes-de-veille",
    "title": "Test du deep sleep de l’ESP8266",
    "section": "Différences entre les 3 modes de veille",
    "text": "Différences entre les 3 modes de veille\n\nhttp://www.espressif.com/sites/default/files/9b-esp8266-low_power_solutions_en_0.pdf\nModem-sleep\nLight-sleep\nDeep-sleep\n\n\n\n\nItem\nModem-sleep\nLight-sleep\nDeep-sleep\n\n\n\n\nWi-Fi\nOFF\nOFF\nOFF\n\n\nSystem clock\nON\nOFF\nOFF\n\n\nRTC\nON\nON\nON\n\n\nCPU\nON\nPending\nOFF\n\n\nSubstrate current\n15 mA\n0.4 mA\n~ 20 µA\n\n\nAverage current DTIM = 1\n16.2 mA\n1.8 mA\n-\n\n\nAverage current DTIM = 3\n15.4 mA\n0.9 mA\n-\n\n\nAverage current DTIM = 10\n15.2 mA\n0.55 mA\n-\n\n\n\nPour comparaison\n\nun MSP430 consomme 230 µA en mode Active, 0.5 µA en mode Standby et 0.1 µA en mode Off (Datasheet du MSP430).\nun ATtiny consomme 300 µA en mode Active et 0.1 µA en mode Power-down (Datasheet de l’ATtiny).\n\n\nDeep Sleep\nIl y a deux manières de sortir du Deep Sleep\n\nDébrancher et rebrancher l’alimentation\nCréer une pulse vers GND sur RST. Le reset aura lieu au flanc montant. En temps normal, RST doit être maintenu à VCC ou éventuellement laissé flottant. Cette impulsion peut être crée :\n\nAvec une interruption temporelle : on spécifie la durée d’endormissement dans le programme et l’ESP génère la pulse sur GPIO16 qui doit être connecté à RST.\nAvec une interruption matérielle : on connecte un signal en pull up sur RST. Ce signal doit être exempt de rebonds, sinon l’ESP sera remis à zéro en saccades.\n\n\nNotes\nSi on spécifie une durée de 0, l’ESP reste en deep sleep jusqu’au prochain reset sur RST ou lors du prochain branchement.\nSi GPIO 16 n’est pas connecté à RST, certaines fonctions de l’ESP sont quand même redémarrées à la fin du temps de veille, car sa consommation augmente à ~10 mA, même avec la RF désactivée…"
  },
  {
    "objectID": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#montage-1-interruption-temporelle",
    "href": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#montage-1-interruption-temporelle",
    "title": "Test du deep sleep de l’ESP8266",
    "section": "Montage 1 — Interruption temporelle",
    "text": "Montage 1 — Interruption temporelle\nL’ESP sort du deep sleep à intervales réguliers. Lors de ce reset, D0 passe à 0 pendant 273.70 µs et doit être connecté à RST. Le reset a lieu lors du flanc montant.\nNote : 273.70 µs correspond à 21896 cycles d’horloge à 80 MHz (= 80E+6 * 273.7E-6).\n\n\n\nDeep Sleep ESP8266 — Test 1\n\n\n\n\n\nDeep Sleep ESP8266 — Signal de reset sur D0"
  },
  {
    "objectID": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#montage-2-interruption-externe",
    "href": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#montage-2-interruption-externe",
    "title": "Test du deep sleep de l’ESP8266",
    "section": "Montage 2 — Interruption externe",
    "text": "Montage 2 — Interruption externe\nL’ESP sort du deep sleep lorsque le bouton connecté en pull-up est pressé. Problème garanti avec ce montage parce que l’ESP sera reseté autant de fois que le bouton sera pressé, y compris lors des rebonds du bouton. Une solution serait d’utiliser une bascule en entrée (https://github.com/esp8266/Arduino/issues/1488).\n\n\n\nDeep Sleep ESP8266 — Test 2"
  },
  {
    "objectID": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#programme-de-test",
    "href": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#programme-de-test",
    "title": "Test du deep sleep de l’ESP8266",
    "section": "Programme de test",
    "text": "Programme de test\nNote : c’est le même programme qui est utilisé pour les deux montages.\n/*\n\nTest Deep Sleep Wemos\n\navril 2017, ouilogique.com\n\n*/\n\n#include &lt;ESP8266WiFi.h&gt;\nextern \"C\" {\n#include \"user_interface.h\"\n}\n\nstatic const uint8_t LEDverte  = D1; // GPIO 5\nstatic const uint8_t LEDorange = D2; // GPIO 4\nstatic const uint8_t LEDbleue  = D4; // GPIO 2 ⇒ LED du board\n\n#define LEDverteHIGH  digitalWrite( LEDverte, HIGH )\n#define LEDverteLOW   digitalWrite( LEDverte, LOW )\n#define LEDorangeHIGH digitalWrite( LEDorange, HIGH )\n#define LEDorangeLOW  digitalWrite( LEDorange, LOW )\n#define LEDbleueHIGH  digitalWrite( LEDbleue, LOW )   // LED du board ⇒ logique inversée\n#define LEDbleueLOW   digitalWrite( LEDbleue, HIGH )\n\nconst int sleepTimeS = 2;\n\nvoid initHardware()\n{\n  WiFi.mode( WIFI_OFF );\n\n  Serial.begin( 115200 );\n  Serial.print( F( \"\\n\\nSTART\\n\" ) );\n\n  pinMode( LEDverte,  OUTPUT );\n  pinMode( LEDorange, OUTPUT );\n  pinMode( LEDbleue,  OUTPUT );\n  for( int i=0; i&lt;10; i++ )\n  {\n    LEDverteLOW;\n    LEDorangeLOW;\n    LEDbleueLOW;\n    delay( 50 );\n    LEDverteHIGH;\n    LEDorangeHIGH;\n    LEDbleueHIGH;\n    delay( 50 );\n  }\n\n  Serial.print( F( \"FIN DU SETUP\\n\" ) );\n}\n\nvoid initSleep()\n{\n  rst_info *rsti;\n  rsti = ESP.getResetInfoPtr();\n  Serial.println( String( \"ResetInfo.reason = \" ) + rsti-&gt;reason );\n\n  // system_deep_sleep_set_option( 0 );\n  // system_deep_sleep( sleepTimeS * 1000000 );\n  ESP.deepSleep( sleepTimeS * 1000000, WAKE_RF_DISABLED );\n}\n\nvoid setup()\n{\n  initHardware();\n  initSleep();\n}\n\nvoid loop()\n{}"
  },
  {
    "objectID": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#sources",
    "href": "posts/2017-04-02-test-deep-sleep-esp8266/index.html#sources",
    "title": "Test du deep sleep de l’ESP8266",
    "section": "Sources",
    "text": "Sources\n\nhttp://www.esp8266.com/viewtopic.php?f=13&t=8315\nhttps://www.youtube.com/watch?v=9G-nMGcELG8&index=11&list=PL3XBzmAj53Rlu3Byy_GkqG6b-nwEpWku0"
  },
  {
    "objectID": "posts/2019-07-26-debuggage-esp32/index.html",
    "href": "posts/2019-07-26-debuggage-esp32/index.html",
    "title": "Débuggage sur ESP32 avec un ESP‑Prog et PIO Unified Debugger",
    "section": "",
    "text": "{:style=“width:90%;”}\n{:style=“width:90%;”}\nCet article montre comment mettre en route un board ESP‑Prog et les outils intégrés à PlatformIO pour flasher et débugger un ESP32.\nLe board ESP‑Prog permet de faire deux choses distinctes :\n© ouilogique.com"
  },
  {
    "objectID": "posts/2019-07-26-debuggage-esp32/index.html#documentation",
    "href": "posts/2019-07-26-debuggage-esp32/index.html#documentation",
    "title": "Débuggage sur ESP32 avec un ESP‑Prog et PIO Unified Debugger",
    "section": "Documentation",
    "text": "Documentation\n\nPIO Unified Debugger (intégré à PlatformIO)\n\nhttps://docs.platformio.org/en/latest/plus/debugging.html\n\nESP-Prog\n\nhttps://docs.platformio.org/en/latest/plus/debug-tools/esp-prog.html\nhttps://github.com/espressif/esp-iot-solution/blob/master/documents/evaluation_boards/ESP-Prog_guide_en.md"
  },
  {
    "objectID": "posts/2019-07-26-debuggage-esp32/index.html#matériel-utilisé",
    "href": "posts/2019-07-26-debuggage-esp32/index.html#matériel-utilisé",
    "title": "Débuggage sur ESP32 avec un ESP‑Prog et PIO Unified Debugger",
    "section": "Matériel utilisé",
    "text": "Matériel utilisé\n\nESP32\nESP-Prog\nCâble JTAG 2.54 mm (2×5 broches)"
  },
  {
    "objectID": "posts/2019-07-26-debuggage-esp32/index.html#vidéo-dandreas-spiess",
    "href": "posts/2019-07-26-debuggage-esp32/index.html#vidéo-dandreas-spiess",
    "title": "Débuggage sur ESP32 avec un ESP‑Prog et PIO Unified Debugger",
    "section": "Vidéo d’Andreas Spiess",
    "text": "Vidéo d’Andreas Spiess\nSource d’inspiration de cet article. Merci Andreas.\n\nhttps://www.youtube.com/watch?v=psMqilqlrRQ"
  },
  {
    "objectID": "posts/2019-07-26-debuggage-esp32/index.html#connexions-jtag",
    "href": "posts/2019-07-26-debuggage-esp32/index.html#connexions-jtag",
    "title": "Débuggage sur ESP32 avec un ESP‑Prog et PIO Unified Debugger",
    "section": "Connexions JTAG",
    "text": "Connexions JTAG\n\nLe débuggage JTAG utilise les GPIO 12 à 15, ce qui veut dire que ces broches ne peuvent pas être utilisées par le programme en cours de test !\n\nLes couleurs sont indicatives et correspondent simplement aux fils que j’ai utilisés et que l’on peut voir sur la photo.\n       ESP32        PROG BOARD      |      PROG BOARD    ESP32\n====================================|=================================\njaune  3.3V      1. VDD             |   2. ESP_TMS       IO_14  vert\nbleu   GND       3. GND             |   4. ESP_TCK       IO_13  violet\n       -         5. GND             |   6. ESP_TDO       IO_15  gris\n       -         7. GND             |   8. ESP_TDI       IO_12  blanc\n       -         9. GND             |  10. NC            -\n{:style=“width:90%;”}"
  },
  {
    "objectID": "posts/2019-07-26-debuggage-esp32/index.html#mise-en-route",
    "href": "posts/2019-07-26-debuggage-esp32/index.html#mise-en-route",
    "title": "Débuggage sur ESP32 avec un ESP‑Prog et PIO Unified Debugger",
    "section": "Mise en route",
    "text": "Mise en route\n\nS’assurer que les cavaliers sont configurés correctement (voir l’image ci-dessus).\nConnecter le câble JTAG comme indiqué dans le tableau ci-dessus.\nOuvrir un projet PlatformIO existant ou en créer un nouveau.\nAjouter les informations suivantes dans le fichier platformio.ini.\n\ndebug_tool = esp-prog\nupload_protocol = esp-prog\ndebug_init_break = tbreak setup\n\nPour info, voici le fichier platformio.ini que j’ai utilisé :\n\n\n[platformio]\ndefault_envs =\n    esp32doit-devkit-v1\n\n\n[env]\nmonitor_speed = 115200\nbuild_flags =\n    -D VERSION=\"0.1\"\n    -D BAUD_RATE=${env.monitor_speed}\n\n\n[env:esp32doit-devkit-v1]\nplatform = espressif32\nboard = esp32doit-devkit-v1\nframework = arduino\ndebug_tool = esp-prog\nupload_protocol = esp-prog\ndebug_init_break = tbreak setup\n\nBrancher le connecteurs USB de l’ESP‑Prog à l’ordinateur. L’ESP‑Prog utilise deux ports série. Il n’y a pas besoin de brancher le connecteur USB de l’ESP, mais ça peut être pratique pour accéder à l’interface série. L’ESP‑Prog a aussi une interface série que je n’ai pas testé.\nSous Mac, il faut installer libusb avec Homebrew (brew update && brew upgrade && brew install libusb).\nSous Windows, il faut modifier le pilote par défaut avec le logiciel Zadig. Voir la procédure dans la vidéo d’Andreas Spiess à 14:52.\nUploader le programme avec la commande standard de PlatformIO (ctrl alt u).\nPlacer quelques points d’arrêts dans le programme.\nDémarrer le débuggage (menu Debug/Start Debugging F5).\n\n{:style=“width:90%;”}"
  },
  {
    "objectID": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html",
    "href": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html",
    "title": "Test d’un écran TFT 2.4”",
    "section": "",
    "text": "J’ai acheté un écran TFT 2.4” chez Banggood :\nC’est un écran tactile résistif avec un lecteur de carte micro SD intégré. Le PCB indique www.mcufriend.com, mais ce site ne répondait pas au moment où j’ai essayé. Je me suis donc armé de patience et après quelques heures et quelques dizaines de recherches sur Google, j’ai réussi à en faire quelque chose.\nPour arriver à ce résultat, il faut tout d’abord télécharger trois librairies d’Adafruit :\net les mettre dans le dossier des librairies de l’IDE Arduino, par exemple ~/Documents/Arduino/libraries/ sur Mac. Le plus simple est d’exécuter les commandes suivantes dans un terminal :\nIl faut redémarrer l’IDE Arduino pour utiliser les librairies.\nLa librairie TFTLCD-Library contient un dossier exemples que vous pouvez copier pour faire des modifications et un dossier bitmaps. Les bitmaps peuvent être copiées à la racine d’une carte Micro SD. Celle-ci fonctionne bien pour moi :\nwww.banggood.com/8GB-Micro-SDTF-Memory-Card-For-Cell-Phone-PDA-MP3-Player-p-926928.html?p=0431091025639201412F\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html#modification-de-lexemple-tftpaint.ino",
    "href": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html#modification-de-lexemple-tftpaint.ino",
    "title": "Test d’un écran TFT 2.4”",
    "section": "Modification de l’exemple tftpaint.ino",
    "text": "Modification de l’exemple tftpaint.ino\n\nC’est l’exemple tftpaint que j’ai utilisé et pas l’exemple tftpaint_shield.\n\nÀ la ligne 47\n#define YP A3  // must be an analog pin, use \"An\" notation!\n#define XM A2  // must be an analog pin, use \"An\" notation!\n#define YM 9   // can be a digital pin\n#define XP 8   // can be a digital pin\ndevient\n#define YP A1  // must be an analog pin, use \"An\" notation!\n#define XM A2  // must be an analog pin, use \"An\" notation!\n#define YM 7   // can be a digital pin\n#define XP 6   // can be a digital pin\nÀ la ligne 92\nuint16_t identifier = tft.readID();\ndevient\nuint16_t identifier = 0x9341;\nÀ la ligne 165\np.x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0);\ndevient\np.x = map(p.x, TS_MINX, TS_MAXX, 0, tft.width());\n\n\n\nmcufriend LCD touch screen"
  },
  {
    "objectID": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html#spécifications",
    "href": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html#spécifications",
    "title": "Test d’un écran TFT 2.4”",
    "section": "Spécifications",
    "text": "Spécifications\n\nSource : www.smokeandwires.co.nz/blog/a-2-4-tft-touchscreen-shield-for-arduino/\n\nScreen Size | 2.4 inch |\nResolution | 240 x 320 |\nLCD Color | 65k |\nLCD Driver | ST7781 |\nInterface | 8080 8 data bit with 4 control bits |\nTouchscreen | 4 Wire Resistive Touchscreen |\n\nPinout\n\n\n\nmcufriend LCD touch screen\n\n\n\n\n\nARDUINO PIN\nLCD SHIELD PIN\nUSE\n\n\n\n\n3.3V\n3.3V\nPower\n\n\n5V\n5V\nPower\n\n\nGND\nGND\nPower\n\n\nA0\nLCD_RD\nLCD Control\n\n\nA1\nLCD_WR TOUCH_YP\nLCD Control / Touch Data\n\n\nA2\nLCD_RS TOUCH_XM\nLCD Control / Touch Data\n\n\nA3\nLCD_CS\nLCD Control\n\n\nA4\nLCD_RST\nLCD Reset\n\n\nA5 ¹\n¹\n-\n\n\nD0 ¹\n¹\n-\n\n\nD1 ¹\n¹\n-\n\n\nD2\nLCD_D2\nLCD Data\n\n\nD3\nLCD_D3\nLCD Data\n\n\nD4\nLCD_D4\nLCD Data\n\n\nD5\nLCD_D5\nLCD Data\n\n\nD6\nLCD_D6 / TOUCH XP\nLCD Data/ Touch Data\n\n\nD7\nLCD_D7 / TOUCH YM\nLCD Data / Touch Data\n\n\nD8\nLCD_D0\nLCD Data\n\n\nD9\nLCD_D1\nLCD Data\n\n\nD10 ²\nSD_CS ²\nSD Select\n\n\nD11 ²\nSD_DI ²\nSD Data\n\n\nD12 ²\nSD_DO ²\nSD Data\n\n\nD13 ²\nSD_SCK ²\nSD Clock\n\n\n\n \n\n¹ On constate que le shield ne laisse que 3 broches libres : A5, D0 et D1. Comme D0 et D1 ne sont pas utilisées, on peut faire communiquer l’Arduino avec un autre système via RS232.\n\n\n² Si on n’utilise pas la carte SD, on peut libérer les 4 broches D10 à D13 (bus SPI), ce qui fait un total de 7 broches libres."
  },
  {
    "objectID": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html#lcd-drivers",
    "href": "posts/2015-08-14-2-4-in_TFT_Touch_screen/index.html#lcd-drivers",
    "title": "Test d’un écran TFT 2.4”",
    "section": "LCD Drivers",
    "text": "LCD Drivers\nLes deux drivers LCD sont des TM74HC245.\nDatasheet en chinois Datasheet traduite par Google goo.gl/hKB7W1\n\n\n\nTM74HC245"
  },
  {
    "objectID": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html",
    "href": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html",
    "title": "Utiliser des cartes à microcontrôleurs comme bridge USB‑RS232",
    "section": "",
    "text": "L’idée est de déterminer s’il est possible de remplacer un bridge USB-RS232 (UART) par une carte à microcontrôleur comme le Launchpad, l’Arduino Nano ou l’ESP8266. Elle m’a été inspirée par cette réponse sur StackExchange.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html#essai-avec-launchpad",
    "href": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html#essai-avec-launchpad",
    "title": "Utiliser des cartes à microcontrôleurs comme bridge USB‑RS232",
    "section": "Essai avec Launchpad",
    "text": "Essai avec Launchpad\n\nProgrammation des Launchpad\n/*\n  serial_end.ino\n\n  Ce programme arrête la gestion du port série par le\n  microcontrôleur. Contrairement à ce que suggère la\n  documentation¹, cela permet d’envoyer RX et TX depuis l’USB vers\n  les pins correspondantes sans pertes. Si on n’arrête pas\n  le port série, il se peut que des caractères ne soient pas\n  transmis, mais ce comportement n’est pas reproductible et ce\n  programme permet de rendre le comportement fiable.\n\n  ¹ https://www.arduino.cc/en/Serial/End\n*/\n\nvoid setup()\n  { Serial.end(); }\nvoid loop()\n  {}\n\n\nBranchements\n\nDeux Launchpad avec RX connecté à TX et inversement TX à RX.\nGND connecté à GND.\nLes cavaliers RXD et TXD connectés horizontalement (mode HW UART selon le pictogramme à côté des cavaliers).\n\n\n\n\nBranchement des Launchpad\n\n\n\n\nRésultats\nOn peut envoyer des commandes d’un Launchpad vers l’autre via CoolTerm. Malheureusement, même si on modifie la vitesse de transmission dans CoolTerm, elle reste à 9600 bauds entre les deux Launchpad. J’ai vérifié ça avec un analyseur logique.\n\n\n\nCoolTerm Launchpad 1\n\n\n\n\n\nCoolTerm Launchpad 2\n\n\n\n\n\nScanalogic entre les Launchpad\n\n\n\n\nSans le microcontrôleur\nEt ça fonctionne aussi sans le microcontrôleur.\n\n\n\nBranchement des Launchpad sans MSP430"
  },
  {
    "objectID": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html#essai-avec-esp8266-12e-test-1",
    "href": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html#essai-avec-esp8266-12e-test-1",
    "title": "Utiliser des cartes à microcontrôleurs comme bridge USB‑RS232",
    "section": "Essai avec ESP8266-12E — Test 1",
    "text": "Essai avec ESP8266-12E — Test 1\n\nProgrammation des ESP8266-12E\nIdem que pour les Launchpad (programme serial_end.ino)\n\n\nBranchements\n\nDeux ESP8266-12E avec RX connecté à TX et inversement TX à RX.\n\n\n\n\nBranchement des ESP8266-12E\n\n\n\n\nRésultats\nOn peut envoyer des commandes d’un ESP8266-12E vers l’autre via CoolTerm. Contrairement aux Launchpad, on peut modifier la vitesse de transmission dans CoolTerm et la vitesse de transmission entre les deux ESP8266-12E change aussi. Encore une fois j’ai vérifié ça avec un analyseur logique.\n\n9600 bauds\n\n\n\nScanalogic entre les ESP8266-12E 9600 bauds\n\n\n\n\n115200 bauds\n\n\n\nScanalogic entre les ESP8266-12E 115200 bauds"
  },
  {
    "objectID": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html#essai-avec-esp8266-12e-test-2",
    "href": "posts/2016-08-10-usb-rs232_bridge_microcontroleurs/index.html#essai-avec-esp8266-12e-test-2",
    "title": "Utiliser des cartes à microcontrôleurs comme bridge USB‑RS232",
    "section": "Essai avec ESP8266-12E — Test 2",
    "text": "Essai avec ESP8266-12E — Test 2\nLa différence entre le test 2 et le test 1, c’est que j’ai connecté la broche RST au GND. Pour vérifier que les ESP ne démarrent pas, j’ai chargé le programme blink.ino.\n\nProgrammation des ESP8266-12E\nAvec blink.ino\n\n\nBranchements\n\nDeux ESP8266-12E avec RX connecté à TX et inversement TX à RX.\nRST connecté à GND\n\n\n\n\nBranchement des ESP8266-12E\n\n\n\n\nRésultats\nIdem que pour le test 1."
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html",
    "href": "posts/2015-05-28-pinouts/index.html",
    "title": "Pinouts de quelques cartes",
    "section": "",
    "text": "find $HOME -type f -name \"boards.txt\"\n\n$HOME/.platformio/packages/framework-arduinoespressif8266/boards.txt\n$HOME/.platformio/packages/framework-arduinoespressif32@3.10006.210326/boards.txt\n$HOME/.platformio/packages/framework-arduino-mbed/boards.txt\n$HOME/.platformio/packages/framework-arduino-avr/boards.txt\n$HOME/.platformio/packages/framework-arduinoespressif32/boards.txt\n$HOME/.platformio/packages/framework-arduinoststm32/boards.txt\n$HOME/Library/Arduino15/packages/arduino/hardware/avr/1.8.6/boards.txt\n#ifdef PLATFORM_NAME\n//...\n#endif\n\nAVR_UNO\nAVR_NANO\nAVR_MEGA2560\nAVR_MINI\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n// ...\n#elif defined(__AVR_ATmega328P__)\n// ...\n#else\n//...\n#endif\n\n#elif defined(__AVR__)\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#defines",
    "href": "posts/2015-05-28-pinouts/index.html#defines",
    "title": "Pinouts de quelques cartes",
    "section": "",
    "text": "find $HOME -type f -name \"boards.txt\"\n\n$HOME/.platformio/packages/framework-arduinoespressif8266/boards.txt\n$HOME/.platformio/packages/framework-arduinoespressif32@3.10006.210326/boards.txt\n$HOME/.platformio/packages/framework-arduino-mbed/boards.txt\n$HOME/.platformio/packages/framework-arduino-avr/boards.txt\n$HOME/.platformio/packages/framework-arduinoespressif32/boards.txt\n$HOME/.platformio/packages/framework-arduinoststm32/boards.txt\n$HOME/Library/Arduino15/packages/arduino/hardware/avr/1.8.6/boards.txt\n#ifdef PLATFORM_NAME\n//...\n#endif\n\nAVR_UNO\nAVR_NANO\nAVR_MEGA2560\nAVR_MINI\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n// ...\n#elif defined(__AVR_ATmega328P__)\n// ...\n#else\n//...\n#endif\n\n#elif defined(__AVR__)"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-arduino-mega-2560",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-arduino-mega-2560",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout Arduino MEGA 2560",
    "text": "Pinout Arduino MEGA 2560\n\n\n\nPinout Arduino MEGA 2560"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-arduino-uno",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-arduino-uno",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout Arduino UNO",
    "text": "Pinout Arduino UNO\n\n\n\nPinout Arduino UNO\n\n\n\n\n\nPinout Arduino UNO"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-atmega328",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-atmega328",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout ATmega328",
    "text": "Pinout ATmega328\n\n\n\nPinout ATmega328"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-arduino-nano",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-arduino-nano",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout Arduino NANO",
    "text": "Pinout Arduino NANO\n\n\n\nArduino Nano"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-arduino-pro-mini",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-arduino-pro-mini",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout Arduino PRO MINI",
    "text": "Pinout Arduino PRO MINI\n\n\n\nPinout Arduino PRO MINI"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-learncbot",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-learncbot",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout LearnCBot",
    "text": "Pinout LearnCBot\n\n\n\nPinout LearnCBot\n\n\n\n\n\nPinout LearnCBot\n\n\n\n\n\nPinout LearnCBot"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-launchpad-msp430",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-launchpad-msp430",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout Launchpad-MSP430",
    "text": "Pinout Launchpad-MSP430\n\n\n\nPinout Launchpad-MSP430"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-nrf51-dk",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-nrf51-dk",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout nRF51-DK",
    "text": "Pinout nRF51-DK\nVoir aussi https://os.mbed.com/platforms/Nordic-nRF51-DK/\n\n\n\nPinout nRF51-DK"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-carte-avec-firmware-nodemcu-et-module-wifi-esp8266-lolin",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-carte-avec-firmware-nodemcu-et-module-wifi-esp8266-lolin",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout carte avec firmware NodeMCU et module WiFi ESP8266 — LoLin",
    "text": "Pinout carte avec firmware NodeMCU et module WiFi ESP8266 — LoLin\n\n⚠ voir l’avertissement de la carte Amica ci-dessous.\n\n\n\n\nPinout carte avec firmware NodeMCU et module WiFi ESP8266 — LoLin"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-carte-avec-firmware-nodemcu-et-module-wifi-esp8266-amica",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-carte-avec-firmware-nodemcu-et-module-wifi-esp8266-amica",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout carte avec firmware NodeMCU et module WiFi ESP8266 — Amica",
    "text": "Pinout carte avec firmware NodeMCU et module WiFi ESP8266 — Amica\n⚠ GPIO 2, GPIO 3 et GPIO 9 ne fonctionnent pas en INPUT_PULLUP ! Lorsque ces GPIO sont configurées en INPUT_PULLUP, l’ESP8266 redémarre constamment.\n\nGPIO 16 fonctionne en INPUT_PULLUP, mais la LED rouge s’allume quand l’entrée est à la masse. La LED bleue est connectée à D4/GPIO 2 (logique inverse). La LED rouge est connectée à D0/GPIO 16 (logique inverse).\n\n\n⚠ La 2e et la 3e pin en haut à gauche sont différentes chez Amica et LoLin. En plus la largeur des deux cartes est différente, et leurs deux rangées de pins sont aussi espacées de valeurs différentes : LoLin ⇒ 11 × 2.54 = 27.94 mm Amica ⇒ 9 × 2.54 = 22.86 mm\n\n\n\n\nPinout carte avec firmware NodeMCU et module WiFi ESP8266 — Amica"
  },
  {
    "objectID": "posts/2015-05-28-pinouts/index.html#pinout-esp8266-01",
    "href": "posts/2015-05-28-pinouts/index.html#pinout-esp8266-01",
    "title": "Pinouts de quelques cartes",
    "section": "Pinout ESP8266-01",
    "text": "Pinout ESP8266-01\n{:width=“400px”}\n\nPinout Wemos D1 mini\n\n\n\nPinout Wemos D1 mini\n\n\n\n\nPinout M5STACK CORE\n\n\n\nPinout M5STACK CORE\n\n\n\n\nPinout ESP32 S2 Mini wemos.cc v1.0.0\nÀ voir aussi :\n\nhttps://openmuscle.org/esp32-s2-mini-pinout-2/\nhttps://www.espressif.com/sites/default/files/documentation/esp32-s2_datasheet_en.pdf\n\n\n\n\nPinout ESP32 S2 Mini\n\n\n\n\nPinout ESP32-WROOM-32 (38 pins)\nAussi appelé ESP32-DevKitC\nMon modèle : ESP32-D0WDQ6\nÀ voir aussi :\n\nAndreas Spiess – Which ESP32 pins are safe to use?\nEspressif technical documents\n\n\n\n\nPinout ESP32-WROOM-32\n\n\n\nLED\nLED bleue : GPIO 2 (= LED_BUILTIN) LED rouge : Pas de GPIO. Indique que le board est sous tension.\n\n\nVendeurs\n\nMouser — Espressif ESP32-DevKitC-VIB (WROVER-B 8MiB RAM)\nBanggood — WeMos® ESP32 (WROOM 500KiB RAM) (bgd.onl/21)\n\n\n\nGPIO en INPUT seul\nLes GPIO 36, 39, 34 et 35 (tous en haut à gauche), ne peuvent être utilisés qu’en INPUT. En plus ces GPIO n’ont pas de résistance de pullup/pulldown. Voir la fiche technique de l’ESP32 à la page 41 (https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf).\nÀ lire : https://randomnerdtutorials.com/esp32-pinout-reference-gpios/\n\n\nBroches qui ne devraient pas être utilisées\nCertaines broches ne devraient pas être utilisées parce qu’elles sont connectées à la flash interne. Ces broches ne sont pas exactement les mêmes suivant les fiches techniques !!!\nFiche technique du module ESP32¹                       : GPIO 6, 7, 8, 11, 16, 17\nFiche technique des boards WROOM, WROVER et WROVER-B²  : GPIO 6, 7, 8, 11,  9, 10\n\n¹ Fiche technique du module ESP32 https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf Page 8 — Fin du chapitre 2.2 (Pin Description)\n\nESP32-D2WD’s pins GPIO16, GPIO17, SD_CMD, SD_CLK, SD_DATA_0 and SD_DATA_1 are used for connecting the embedded flash, and are not recommended for other uses.\n\n² Fiche technique des boards WROOM, WROVER et WROVER-B Fiche technique WROOM Fiche technique WROVER Fiche technique WROVER-B Fin du chapitre 2.2 (Pin Description)\n\nPins SCK/CLK, SDO/SD0, SDI/SD1, SHD/SD2, SWP/SD3 and SCS/CMD, namely, GPIO6 to GPIO11 are connected to the integrated SPI flash integrated on the module and are not recommended for other uses.\n\n\n\nFiche technique complète ESP32\n\nhttps://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf\n\n\n\nImages\n\n\n\n#\nNOM & URL\n\n\n\n\n1\n\n\n\n2\nboard Espressif ESP32-DevKitC-VIB (8 MiB psRAM) Mouser\n\n\n3\nboard WeMos (500 KiB RAM) Banggood\n\n\n\n\n\nComparaison pinout\n💥 ⇒ Différences entre Espressif et Wemos 🚫 ⇒ Broches à ne pas utiliser\n\n\n\n\n\n\n\n\n\n\n\n\n\n PIN#\n1MODULEGAUCHE\n2ESPRESSIFGAUCHE\n3WEMOSGAUCHE\n\n1MODULEDROITE\n2ESPRESSIFDROITE\n3WEMOSDROITE\n\n\n\n\n1\nGND\nGND\nGND\n—\nGND\n3V3\n3V3\n\n\n2\nIO23\n23\nIO23\n—\nVDD33\n💥 EN\n💥 RST\n\n\n3\nIO22\n22\nIO22\n—\nEN\nVP\nSVP\n\n\n4\nTXD0\nTX\nTXD\n—\nSENSOR_VP\nVN\nSVN\n\n\n5\nRXD0\nRX\nRXD\n—\nSENSOR_VN\n34\nIO34\n\n\n6\nIO21\n21\nIO21\n—\nIO34\n35\nIO35\n\n\n7\nNC\nGND\nGND\n—\nIO35\n32\nIO32\n\n\n8\nIO19\n19\nIO19\n—\nIO32\n33\nIO33\n\n\n9\nIO18\n18\nIO18\n—\nIO33\n25\nIO25\n\n\n10\nIO5\n5\nIO5\n—\nIO25\n26\nIO26\n\n\n11\nNC\n💥 NC\n💥 IO17 (TX2)\n—\nIO26\n27\nIO27\n\n\n12\nNC\n💥 NC\n💥 IO16 (RX2)\n—\nIO27\n14\nIO14\n\n\n13\nIO4\n4\nIO4\n—\nIO14\n12\nIO12\n\n\n14\nIO0\n0\nIO0\n—\nIO12\nGND\nGND\n\n\n15\nIO2\n2\nIO2\n—\nGND\n13\nIO13\n\n\n16\nIO15\n15\nIO15\n—\nIO13\n🚫 D2\n🚫 SD2\n\n\n17\nSD1\n🚫 D1\n🚫 SD1\n—\nSD2\n🚫 D3\n🚫 SD3\n\n\n18\nSD0\n🚫 D0\n🚫 SD0\n—\nSD3\n🚫 CMD\n🚫 CMD\n\n\n19\nCLK\n🚫 CLK\n🚫 SCK\n—\nCMD\n5V\n5V"
  },
  {
    "objectID": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html",
    "href": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html",
    "title": "Mise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "",
    "text": "Voir aussi l’article sur l’ESP8266 LoLin\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#référence-aliexpress",
    "href": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#référence-aliexpress",
    "title": "Mise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Référence AliExpress",
    "text": "Référence AliExpress\n\nhttp://fr.aliexpress.com/item/V2-4M-4FLASH-NodeMcu-Lua-WIFI-Networking-development-board-Based-ESP8266/32448694790.html"
  },
  {
    "objectID": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#installation-du-pilote-pour-le-silabs-cp2102",
    "href": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#installation-du-pilote-pour-le-silabs-cp2102",
    "title": "Mise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Installation du pilote pour le Silabs CP2102",
    "text": "Installation du pilote pour le Silabs CP2102\n\nhttps://www.silabs.com/products/mcu/Pages/USBtoUARTBridgeVCPDrivers.aspx\n\nLa version 4.x.13 - August 31, 2016 fonctionne sous macOS Sierra."
  },
  {
    "objectID": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#premières-impressions",
    "href": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#premières-impressions",
    "title": "Mise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Premières impressions",
    "text": "Premières impressions\n\nLe chip Silabs CP2102 semble plus rapide que le CH340G utilisé par LoLin.\nLe pinout est différent de LoLin sur la 2e et la 3e pin en haut à gauche sur l’image du pinout ci-dessous.\nLes largeurs des cartes Amica et LoLin sont différentes, et leurs deux rangées de pins sont aussi espacées de valeurs différentes : LoLin ⇒ 11 × 2.54 = 27.94 mm Amica ⇒ 9 × 2.54 = 22.86 mm\nAu premier test, la carte a refusé de communiquer sur le port série. Sur le dessous de la carte, il est indiqué 9600 bauds, mais il me semble qu’en fait c’est 115200 bauds. De toute façon, aucune vitesse ne semblait fonctionner, donc j’ai flashé un nouveau firmware et ça a fonctionné.\nPour flasher le firmware, j’ai dû appuyer sur le bouton “FLASH” et tout en le maintenant appuyé, presser une fois le bouton “RST”. Sur LoLin, ce n’est pas nécessaire.\nLes barrettes de pins ne sont pas perpendiculaires au PCB, mais ça entre quand même dans un breadboard.\nCette carte a deux LED : une bleue sur GPIO 4 à côté de l’antenne et une rouge sur GPIO 0 à 7 mm du bouton “RST”. La carte LoLin n’a que la LED bleue.\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com"
  },
  {
    "objectID": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#pinout",
    "href": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#pinout",
    "title": "Mise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Pinout",
    "text": "Pinout\n\n\n\nouilogique.com"
  },
  {
    "objectID": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#vitesse-de-la-liaison-série",
    "href": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#vitesse-de-la-liaison-série",
    "title": "Mise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Vitesse de la liaison série",
    "text": "Vitesse de la liaison série\nLe test consiste à flasher un firmware identique sur LoLin et Amica et de comparer les temps nécessaires.\n\nScript de flashage\n#!/bin/bash\n\n# USBPORT=/dev/cu.SLAB_USBtoUART\nUSBPORT=/dev/tty.wchusbserial14140\nFIRMWARE=nodemcu_integer_0.9.6-dev_20150704.bin\nesptool.py           \\\n    --port $USBPORT  \\\n    --baud 230400    \\\n    write_flash      \\\n    --flash_mode qio \\\n    --flash_size 32m \\\n    --flash_freq 40m \\\n    0x00000 $FIRMWARE\n\n\nRésultat LoLin\nConnecting...\nErasing flash...\nWrote 450560 bytes at 0x00000000 in 33.2 seconds (108.6 kbit/s)...\n\nLeaving...\n\n\nRésultat Amica\nConnecting...\nErasing flash...\nWrote 450560 bytes at 0x00000000 in 22.8 seconds (158.0 kbit/s)...\n\nLeaving...\n\n\nConclusion\nLe chip Silabs CP2102 est 50 % plus rapide que le CH340G ! J’ai réalisé ce test sur mon MacBook Pro (Retina, 13 pouces, mi-2014, 2.8 GHz Intel Core i5, 8 Go 1600 MHz DDR3) avec un hub USB Delock 61857."
  },
  {
    "objectID": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#drivers-silabs-cp2102",
    "href": "posts/2015-11-16-NodeMCU_esp8266_amica/index.html#drivers-silabs-cp2102",
    "title": "Mise en route d’une carte Amica avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Drivers Silabs CP2102",
    "text": "Drivers Silabs CP2102\n\nhttps://www.silabs.com/products/mcu/Pages/USBtoUARTBridgeVCPDrivers.aspx"
  },
  {
    "objectID": "posts/2023-10-07-test-lightbox/index.html",
    "href": "posts/2023-10-07-test-lightbox/index.html",
    "title": "Simple Lightbox Example",
    "section": "",
    "text": "https://biati-digital.github.io/glightbox/\n\n\n\nFigure 1: An Elephant\n\n\nThis is illustrated well by Figure 1.\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\nPlateforme de Stewart — ouilogique.com\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-11-01-Strinity_Sensors_Cobber/index.html",
    "href": "posts/2015-11-01-Strinity_Sensors_Cobber/index.html",
    "title": "Mise en route d’un capteur de pression, température et humidité Strinity Sensors Cobber I²C",
    "section": "",
    "text": "J’ai acheté une carte chez Banggood pour me faire une mini station météo :\nC’est une carte “trois en un” qui permet de mesurer :\nElle offre la possibilité de sélectionner la tension (3.3 V ou 5V) à l’aide d’un bouton.\nLa mise en route fut un peu fastidieuse vu qu’il n’y a pas de doc sur Banggood. Heureusement, Adafruit propose deux pilotes pour la carte BMP180 :\net un pilote pour la carte TSL2561 :\nPour la mesure de température, ça se corse parce qu’Adafruit n’a qu’un pilote pour la carte AM2315 et il ne fonctionne pas avec la carte AM2321 :\nSinon Wangdong propose un pilote qui ne fonctionne pas non plus :\nIl me reste plus qu’à lire la spec en chinois ;-) https://www.microduino.cc/wiki/images/d/d1/AM2321.pdf\nEn attendant, j’ai testé la luminosité et la pression et les mesures ont l’air cohérentes, ce qui est un bon point. À noter quand même que la carte BMP180 retourne aussi la température.\nBon, j’ai décidé de m’y remettre après une semaine de pause et comme le capteur de température ne veut rien savoir, j’ai utilisé un scanner I²C disponible ici :\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-11-01-Strinity_Sensors_Cobber/index.html#liens",
    "href": "posts/2015-11-01-Strinity_Sensors_Cobber/index.html#liens",
    "title": "Mise en route d’un capteur de pression, température et humidité Strinity Sensors Cobber I²C",
    "section": "Liens",
    "text": "Liens\n\nBMP180 Digital pressure sensor — Bosch Sensortec\nTSL2560, TSL2561 Light-to-Digital Converter — TAOS\nLien fourni sur page support Banggood http://pan.baidu.com/s/1qWjYtqs\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com"
  },
  {
    "objectID": "posts/2019-09-08-stm32-e407-blink/index.html",
    "href": "posts/2019-09-08-stm32-e407-blink/index.html",
    "title": "Mise en route d’une carte STM32‑E407 sur PlatformIO avec le framework Arduino",
    "section": "",
    "text": "Cet article montre comment mettre en route une carte STM32‑E407 sur PlatformIO avec le framework Arduino. Je l’ai écris en anglais parce qu’il m’a été utile pour le déverminage lors de la mise en route qui n’a pas été simple. L’article original est publié sur GitHub :\n© ouilogique.com"
  },
  {
    "objectID": "posts/2019-09-08-stm32-e407-blink/index.html#stm32e407-blink",
    "href": "posts/2019-09-08-stm32-e407-blink/index.html#stm32e407-blink",
    "title": "Mise en route d’une carte STM32‑E407 sur PlatformIO avec le framework Arduino",
    "section": "STM32‑E407 BLINK",
    "text": "STM32‑E407 BLINK\nHello World example for the STM32-E407 board on PlatformIO with the Arduino framework. The upload is done with a USB cable and not with a JTAG programmer.\n\nThis example works only if the STM32 platform version is 5.6.0 or higher. You can check the current version of this platform in your editor (VSCode on macOS for me), in the PlatformIO Home / Platforms pane. The STM32 platform is automatically installed by PlatformIO during the first build.\nThis example didn’t work at first and the debugging story can be read here: https://community.platformio.org/t/stm32-e407-doesn-t-work-on-pio/9303/13 and here: https://www.olimex.com/forum/index.php?topic=7206.0.\nDuring the debugging process, maxgerhardt forked this example and made an STM32Cube version of it (i.e. not using the Arduino framework). It works well and you can see it here: https://github.com/maxgerhardt/STM32-E407-BLINK.\nThanks to maxgerhardt and valeros for their support.\n\n\nIMAGES\n\nNote that USB-OTG#1 and #2 are inverted on the image compared to the board I have. It seems that the images (from Olimex) are showing an older revision of the board.\n\n\n\n\nSTM32-E407 top view\n\n\n\n\n\nSTM32-E407 back view\n\n\n\n\nPREREQUISITE\n\nOn macOS\nInstall libusb, lsusb and dfu-util with Homebrew. The library libusb is required. The other two are optional but can help in case of problems.\nbrew install libusb lsusb dfu-util\n\n\n\nSETUP\n\nSet the Power Selection jumper (PWR_SEL) to 7-8 (i.e. USB-OTG1 power supply). This jumper is located next to the power jack connector.\nSet the Boot Mode Selection jumpers. These jumpers are located on the back of the board, next to the UEXT connector:\n\nB0_1/B0_0 ⇒ B0_1\nB1_1/B1_0 ⇒ B1_0\n\nConnect the USB cable to USB-OTG1. This is the USB connector that is closest to the Ethernet connector. Note that the label is correct on the PCB but not on the image above!\nOptionally, verify that the card is detected with the bash command lsusb and dfu-util --list. If no card is detected, check the Boot Mode Selection jumpers and push the reset button next to the power jack connector.\n\nlsusb\nBus 020 Device 015: ID 0483:df11 STMicroelectronics STM32  BOOTLOADER  Serial: 336032683536\ndfu-util --list\ndfu-util 0.9\n\nCopyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc.\nCopyright 2010-2016 Tormod Volden and Stefan Schmidt\nThis program is Free Software and has ABSOLUTELY NO WARRANTY\nPlease report bugs to http://sourceforge.net/p/dfu-util/tickets/\n\nFound DFU: [0483:df11] ver=2200, devnum=11, cfg=1, intf=0, path=\"20-1.4\", alt=3, name=\"@Device Feature/0xFFFF0000/01*004 e\", serial=\"336032683536\"\nFound DFU: [0483:df11] ver=2200, devnum=11, cfg=1, intf=0, path=\"20-1.4\", alt=2, name=\"@OTP Memory /0x1FFF7800/01*512 e,01*016 e\", serial=\"336032683536\"\nFound DFU: [0483:df11] ver=2200, devnum=11, cfg=1, intf=0, path=\"20-1.4\", alt=1, name=\"@Option Bytes  /0x1FFFC000/01*016 e\", serial=\"336032683536\"\nFound DFU: [0483:df11] ver=2200, devnum=11, cfg=1, intf=0, path=\"20-1.4\", alt=0, name=\"@Internal Flash  /0x08000000/04*016Kg,01*064Kg,07*128Kg\", serial=\"336032683536\"\n\nCompile and upload the code with PlatformIO.\nThe LED of the board located near the SD card slot and the Arduino LED (D13 on the board or PA5 in the sketch) should blink. Note that the program is executed right after the upload, but if you reset the board, it will be waiting for another upload and the program won’t run anymore. So for normal use, you need to set the Boot Mode Selection jumpers again:\n\nB0_1/B0_0 ⇒ B0_0\nB1_1/B1_0 ⇒ B1_0 (unchanged)\n\nDuring development, you can let the Boot Mode Selection jumpers unchanged, but you need to reset the board before upload. The reset button is located beside the power jack connector.\n\n\n\nSERIAL OUTPUT\nSerial output is available from three different sources:\n\nSerialUSB\nTo read SerialUSB, you only need a USB cable connected to the USB-OTG#1 port, i.e. it is the same cable that we used to program the board.\nFor SerialUSB to work, the function SystemClock_Config(void) must be overridden by the one provided in this project. The original function can be found here: ~/.platformio/packages/framework-arduinoststm32/variants/BLACK_F407XX/variant.cpp or here: C:\\Users\\&lt;home&gt;\\.platformio\\packages\\framework-arduinoststm32\\variants\\BLACK_F407XX\\variant.cpp.\nFor more explanations see: https://community.platformio.org/t/stm32-e407-doesn-t-work-on-pio/9303/3.\n\nNote that unlike the Arduino UNO and similar boards, a terminal showing the output of SerialUSB must be restarted manually each time the board is reset. This is quite annoying during development and you may prefer the other two serial ports below.\n\n\n\nSerial3\nTo read Serial3, you need to connect an UART Serial Bridge to the GND and TX pins of the BOOT header located beside the UEXT connector (the pin labels are on the back of the board).\n\n\nSerial6\nTo read Serial6, you need to connect an UART Serial Bridge to pin 2 (GND) and 3 (TX) of the UEXT connector.\n\n\n\nSTM32-E407 UEXT connector\n\n\n\n\n\nREFERENCES\n\nSTM32-E407 development board with STM32F407ZGT6 microcontroller\n\nhttps://www.olimex.com/Products/ARM/ST/STM32-E407/open-source-hardware\nhttps://www.olimex.com/Products/ARM/ST/STM32-E407/resources/STM32-E407.pdf\n\nPlatformIO\n\nhttps://docs.platformio.org/en/latest/boards/ststm32/black_f407zg.html\n\ndfu-util\n\nhttp://dfu-util.sourceforge.net"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html",
    "href": "posts/2018-02-15-introduction-html/index.html",
    "title": "Introduction au langage HTML",
    "section": "",
    "text": "Ce document fait partie du cours sur le HTML embarqué que j’ai donné au Microclub en janvier et février 2018 à l’EPFL.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#les-documents-du-cours",
    "href": "posts/2018-02-15-introduction-html/index.html#les-documents-du-cours",
    "title": "Introduction au langage HTML",
    "section": "LES DOCUMENTS DU COURS",
    "text": "LES DOCUMENTS DU COURS\n\nIntroduction au langage HTML\nIntroduction au langage CSS\nIntroduction au langage JavaScript\nCours complet au format PDF"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#les-agents-utilisateurs",
    "href": "posts/2018-02-15-introduction-html/index.html#les-agents-utilisateurs",
    "title": "Introduction au langage HTML",
    "section": "LES AGENTS UTILISATEURS",
    "text": "LES AGENTS UTILISATEURS\nDans le cadre de ce cours, un agent utilisateur, ou user agent en anglais, est un logiciel qui peut traiter des données conformes aux normes HTML, XHTML, CSS, JavaScript et JSON. Cette liste n’est pas exhaustive et différents agents utilisateurs offrent des possibilités plus étendues ou au contraire plus restreintes. Pour la suite, nous nous focaliserons sur la partie du traitement des fichiers HTML, CSS et JavaScript.\nDans la grande majorité des cas, l’agent utilisateur sera un navigateur web, ou web browser en anglais, mais il est intéressant de noter que d’autres possibilités existent :\n\nLes appareils IoT (Internet of Things ou Internet des objets).\nLes navigateurs braille pour les personnes malvoyantes.\nLes logiciels de mise en page comme Prince XML.\nLes logiciels qui ne sont pas des navigateurs mais qui utilisent des données distantes. Par exemple les applications météo ou les horaires de transports publics.\n…\n\n\nPour en savoir plus\n\nAgents utilisateurs (Wikipedia fr)"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#la-structure-minimale-dune-page-html",
    "href": "posts/2018-02-15-introduction-html/index.html#la-structure-minimale-dune-page-html",
    "title": "Introduction au langage HTML",
    "section": "LA STRUCTURE MINIMALE D’UNE PAGE HTML",
    "text": "LA STRUCTURE MINIMALE D’UNE PAGE HTML\nVoici la structure minimale pour qu’un document soit considéré comme un document HTML par tous les agents utilisateurs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=utf-8 /&gt;\n        &lt;title&gt;Structure minimale&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\nOn voit dans cet exemple que le code HTML est composé de balises. Les balises absolument obligatoires pour qu’un document soit considéré comme un document HTML sont :\n1. &lt;!DOCTYPE html&gt;\n2. &lt;html&gt;&lt;/html&gt;\n3. &lt;head&gt;&lt;/head&gt;\n4. &lt;meta charset=utf-8 /&gt;\n5. &lt;title&gt;&lt;/title&gt;\n6. &lt;body&gt;&lt;/body&gt;\nNous aurons besoin d’autres balises pour étoffer nos documents HTML, mais les 6 ci-dessus doivent toujours être présentes.\nSans entrer dans les détails, voici à quoi servent ces premiers éléments :\n1. &lt;!DOCTYPE html&gt; Définit que le document suit la norme HTML 5.\n2. &lt;html&gt;&lt;/html&gt; Tout le document (à l’exception du doctype) est entouré des balises &lt;html&gt;.\n3. &lt;head&gt;&lt;/head&gt; Le contenu de l’élément &lt;head&gt; sert à donner des informations aux agents utilisateurs. Ces informations ne sont donc pas visibles directement par l’utilisateur, à l’exception du contenu de l’élément &lt;title&gt; et du favicon (pas déclaré dans cet exemple). Il est possible de générer dynamiquement ce contenu avec JavaScript.\n4. &lt;meta charset=utf-8 /&gt; Cet élément &lt;meta&gt; indique au navigateur quel est l’encodage du fichier. Sans cette information, les navigateurs font des choix par défaut qui sont souvent différents de l’UTF-8 et donc les caractères ne s’afficheront pas correctement. Pour des raisons de performance, il est conseillé de placer cette balise en premier dans l’élément &lt;head&gt;.\n5. &lt;title&gt;&lt;/title&gt; Le contenu de l’élément &lt;title&gt; sera affiché dans l’onglet de la page dans le navigateur.\n6. &lt;body&gt;&lt;/body&gt; Et enfin, le contenu visible par l’utilisateur de la page est placé dans l’élément &lt;body&gt;. Il est possible de générer dynamiquement ce contenu avec JavaScript."
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#les-éléments-et-leurs-balises",
    "href": "posts/2018-02-15-introduction-html/index.html#les-éléments-et-leurs-balises",
    "title": "Introduction au langage HTML",
    "section": "LES ÉLÉMENTS ET LEURS BALISES",
    "text": "LES ÉLÉMENTS ET LEURS BALISES\n\nStructure des éléments HTML\nUn élément HTML est formé de balises, ou tag en anglais. Par exemple :\n&lt;p&gt;&lt;/p&gt;\nPour la balise ouvrante, la structure est :\n\nchevron ouvrant (&lt;)\nle nom de la balise (dans l’exemple ci-dessus “p”)\nchevron fermant (&gt;)\n\nPour la balise fermante, la structure est :\n\nchevron ouvrant (&lt;)\nbarre oblique (/)\nle nom de la balise (dans l’exemple ci-dessus “p”)\nchevron fermant (&gt;)\n\nEntre les balises, on peut inclure :\n\nrien : &lt;p&gt;&lt;/p&gt;\ndu texte sans balises : &lt;p&gt;du texte&lt;/p&gt;\nd’autres balises : &lt;p&gt;du &lt;i&gt;texte&lt;/i&gt;&lt;/p&gt;\nd’autres balises imbriquées (nested en anglais) : &lt;p&gt;&lt;b&gt;du &lt;i&gt;texte&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;\n\n\n\nÉléments HTML vides\nCertains éléments HTML sont toujours vides, c’est-à-dire qu’ils n’ont jamais de contenu entre leur balise ouvrante et leur balise fermante. On les appelle “éléments vides” (empty elements ou void elements en anglais). Dans ce cas, il est obligatoire d’utiliser une notation compacte avec la barre oblique avant le chevron fermant, que l’on nomme “balise autofermante”.\nDonc ceci est valide :\n&lt;br /&gt; &lt;!-- Line break = retour à la ligne --&gt;\n&lt;img /&gt; &lt;!-- Image --&gt;\n&lt;meta /&gt; &lt;!-- Meta-donnée --&gt;\n&lt;link /&gt; &lt;!-- lien vers une feuille CSS --&gt;\nAlors que ceci n’est pas valide :\n&lt;br&gt;&lt;/br&gt; &lt;!-- Line break = retour à la ligne --&gt;\n&lt;img&gt;&lt;/img&gt; &lt;!-- Image --&gt;\n&lt;meta&gt;&lt;/meta&gt; &lt;!-- Meta-donnée --&gt;\n&lt;link&gt;&lt;/link&gt; &lt;!-- lien vers une feuille CSS --&gt;\n\nDans une balise autofermante, l’espace avant la barre oblique est optionnel.\n\nVoici une liste d’éléments vides : Éléments vides MDN, fr\n\n\nÉléments HTML non vides\nSi un élément peut avoir un contenu (non-void HTML element en anglais), mais que ce contenu est simplement vide dans un contexte donné, il n’est pas valide d’utiliser la notation compacte.\nDonc ceci est valide :\n&lt;p&gt;&lt;/p&gt; &lt;!-- Paragraphe --&gt;\n&lt;li&gt;&lt;/li&gt; &lt;!-- Élément de liste --&gt;\n&lt;h1&gt;&lt;/h1&gt; &lt;!-- Titre de niveau 1 --&gt;\nAlors que ceci n’est pas valide :\n&lt;p /&gt; &lt;!-- Paragraphe --&gt;\n&lt;li /&gt; &lt;!-- Élément de liste --&gt;\n&lt;h1 /&gt; &lt;!-- Titre de niveau 1 --&gt;\n\nLa grande majorité des éléments HTML sont non vides.\n\n\n\nCas particulier de l’élément &lt;script&gt;\nL’élément script est un peu spécial parce qu’il peut être utilisée de deux façons différentes :\n\nPour appeler un script externe au fichier HTML.\nPour définir un script interne au fichier HTML.\n\nDans le cas de l’appel du script externe, cet élément est toujours vide. Il serait donc légitime de penser qu’on peut utiliser la balise autofermante. Mais comme cet élément peut avoir un contenu dans sa deuxième utilisation, on doit toujours utiliser la notation avec une balise ouvrante et une balise fermante.\n&lt;!-- Lien vers un fichier JavaScript (JS) externe. --&gt;\n&lt;script src=\"scripts.js\"&gt;&lt;/script&gt;\n\n&lt;!--\n    Définition d’un script JavaScript (JS) interne.\n    Comme la balise &lt;script&gt; contient le script dans ce cas là, on ne peut pas l’autofermer lorsqu’on l’utilise pour faire un lien vers un fichier externe (exemple ci-dessus), même si l’élément est vide.\n--&gt;\n&lt;script&gt;\n    console.log(\"Hello Microclub !\")\n&lt;/script&gt;\nNotons au passage que les feuilles de style CSS peuvent aussi être internes ou externes au fichier HTML. Mais dans ce cas, les balises utilisées sont différentes :\n&lt;!--\n    Lien vers une feuille de style CSS externe.\n    Comme la balise &lt;link&gt; est toujours vide, elle doit être autofermée.\n    --&gt;\n&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n\n&lt;!-- Définition d’une feuille de style CSS interne. --&gt;\n&lt;style rel=\"stylesheet\"&gt;\n    /* commentaire CSS */\n&lt;/style&gt;\nPour résumer :\nCSS externe : &lt;link /&gt; CSS interne : &lt;style&gt;&lt;/style&gt; JS externe : &lt;script&gt;&lt;/script&gt; JS interne : &lt;script&gt;&lt;/script&gt;\n\n\nImbrication d’éléments\nLorsque les éléments sont imbriqués (nested en anglais), il est important de fermer les balises “enfants” avant les balises “parents”.\nCeci est correct :\n&lt;p&gt;\n    &lt;strong&gt;...&lt;/strong&gt;\n&lt;/p&gt;\nCeci ne l’est pas :\n&lt;p&gt;\n    &lt;strong&gt;...&lt;/p&gt;\n&lt;/strong&gt;\n\n\nQuelques éléments courants\nVoici une liste non exhaustive d’éléments courants :\n&lt;p&gt;Ceci est un paragraphe.\nLes retours à la ligne doivent y\nêtre explicitement indiqués avec la balise &lt;br /&gt;\n&lt;br /&gt;\nLa balise “p” est la plus utilisée pour afficher du texte.\n&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Texte en gras&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Texte en italique&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Texte en gras &lt;em&gt;avec une partie italique&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;Ceci est un texte préformaté\n     dans lequel les passages à la ligne\n     et les espaces\n     seront respectés&lt;/pre&gt;\n\n&lt;p&gt;Le &lt;span&gt;est&lt;/span&gt; utilisé pour formater différemment une partie du texte.&lt;/p&gt;\n\n&lt;div&gt;Le div sert à regrouper des balises.\n    &lt;p&gt;...&lt;/p&gt;\n    &lt;p&gt;...&lt;/p&gt;\n    &lt;div&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;img src=\"https://ouilogique.com/images/site-logo.png\" alt=\"image de démo\" /&gt;\n\n\nListe des balises HTML\nLa norme HTML définit environ 130 balises différentes que vous pouvez découvrir en suivant les liens ci-dessous.\n\n\nÉléments vs balises\nComme nous l’avons vu ci-dessus, un élément HTML est composé de balises et d’un contenu. Dans le langage courant, on utilise souvent indifféremment les termes éléments et balises, même si à proprement parler il s’agit de deux choses distinctes.\n\n\nPour en savoir plus\n\nLes balises HTML et leur rôle (MDN fr)\nRéférence des éléments HTML (MDN fr)\nHTML Element Reference (W3Schools en)"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#les-attributs",
    "href": "posts/2018-02-15-introduction-html/index.html#les-attributs",
    "title": "Introduction au langage HTML",
    "section": "LES ATTRIBUTS",
    "text": "LES ATTRIBUTS\nToutes les balises acceptent des attributs, certains étant obligatoires d’autres optionnels.\nPar exemple, la balise &lt;img&gt; qui sert à insérer une image a deux attributs obligatoires : src et alt. À noter que l’attribut alt est souvent omis dans les pages web que vous rencontrerez. Il est pourtant fortement conseillé, car il s’agit du texte qui remplacera l’image si celle-ci ne peut pas être affichée. Cet attribut est aussi utilisé par les systèmes de lecture pour les malvoyants.\n&lt;img src=\"https://ouilogique.com/images/site-logo.png\" alt=\"image de démo\" /&gt;\nVoir les attributs possibles de la balise &lt;img /&gt; sur le site MDN.\nLes attributs peuvent être mis à ligne pour faciliter la lecture :\n&lt;img\n    src=\"https://ouilogique.com/images/site-logo.png\"\n    alt=\"image de démo\" /&gt;\n\nLes attributs personnalisés\nHTML5 permet à l’utilisateur de définir ses propres attributs ce qui peut être fort utile lorsqu’on désire rendre le document interactif avec JavaScript. Ces attributs personnalisés s’appellent “attributs de données” et doivent obligatoirement commencer par le préfix data-.\n&lt;article\n  id=\"voitureelectrique\"\n  data-columns=\"3\"\n  data-index-number=\"12314\"\n  data-parent=\"voitures\"&gt;\n...\n&lt;/article&gt;\nVoir les attributs de données sur MDN"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#le-doctype",
    "href": "posts/2018-02-15-introduction-html/index.html#le-doctype",
    "title": "Introduction au langage HTML",
    "section": "LE DOCTYPE",
    "text": "LE DOCTYPE\nLe doctype est une chaine de caractère présente au début du fichier et qui définit explicitement la version de la norme HTML utilisée dans le document. Le mot doctype est un mot-valise tiré de la locution anglaise Document Type Declaration. Le seul doctype que nous utiliserons dans le cadre de ce cours est le doctype HTML 5 qui se déclare de la manière suivante :\n&lt;!DOCTYPE html&gt;\nSi on ne spécifie pas de doctype, alors les agents utilisateurs utiliseront le mode quirks, c’est-à-dire que le moteur de disposition émule le comportement non standard de Netscape Navigator 4 et d’Internet Explorer 5. Ce mode permet de prendre en charge les sites web rédigés avant l’adoption généralisée des standards web.\nSi on spécifie un doctype, alors les agents utilisateurs utilisent le mode standard total ou éventuellement le mode quasi standard (qui a priori n’existe plus).\nSi vous désirez plus d’informations sur ces différents modes, vous pouvez vous référer aux liens ci-dessous. Je vous conseille de toute façon de ne pas jouer avec le feu et de toujours spécifier le doctype HTML 5 (&lt;!DOCTYPE html&gt;).\nPour déterminer si un agent utilisateur est en mode standard ou au contraire en mode quirks, vous pouvez utiliser le JavaScript suivant :\n    console.log(document.compatMode === \"CSS1Compat\" ? \"standard\" : \"quirks\");\nHistoriquement, de nombreux doctype ont eu cours et il est fort probable que vous en rencontriez d’autres.\nLe doctype est un élément à part dans la grammaire HTML dans le sens où sa balise ouvrante ne doit jamais être fermée.\n\nPour en savoir plus\n\nRecommended list of Doctype declarations (W3C en)\nDocument type declaration (Wikipedia en)\nDoctype (Wikipedia fr)\nMode quirks de Mozilla (MDN fr)\nMode presque standard de Gecko (MDN fr)\nFix Your Site With the Right DOCTYPE!"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#lespace-de-nom",
    "href": "posts/2018-02-15-introduction-html/index.html#lespace-de-nom",
    "title": "Introduction au langage HTML",
    "section": "L’ESPACE DE NOM",
    "text": "L’ESPACE DE NOM\nCertains validateurs comme celui de l’éditeur Oxygen XML Editor imposent que l’espace de nom soit spécifié et ceci se fait dans l’attribut xmlns de la balise &lt;html&gt; ouvrante :\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n...\n&lt;/html&gt;"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#les-éditeurs-de-code-html",
    "href": "posts/2018-02-15-introduction-html/index.html#les-éditeurs-de-code-html",
    "title": "Introduction au langage HTML",
    "section": "LES ÉDITEURS DE CODE HTML",
    "text": "LES ÉDITEURS DE CODE HTML\nVoici une liste non exhaustive d’éditeurs de code HTML :\n\nBrackets (que nous allons utiliser pour ce cours)\nSublime Text 3 (que j’utilise au quotidien)\nAtom\nOxygen XML Editor\nVisual Studio Code\nNotepad++\nBBEdit\nGedit\nNano\n…"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#la-validation",
    "href": "posts/2018-02-15-introduction-html/index.html#la-validation",
    "title": "Introduction au langage HTML",
    "section": "LA VALIDATION",
    "text": "LA VALIDATION\nÀ ce stade, nous pouvons commencer à vérifier que ce que nous faisons est valide avec le validateur du World Wide Web Consortium (W3C) W3C Markup Validation Service."
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#les-entités",
    "href": "posts/2018-02-15-introduction-html/index.html#les-entités",
    "title": "Introduction au langage HTML",
    "section": "LES ENTITÉS",
    "text": "LES ENTITÉS\nLes entités servent à référencer les caractères par un code qui peut être textuel, décimal ou hexadécimal. Ceci est particulièrement utile dans les cas suivants :\n\nLe caractère est aussi utilisé dans la grammaire HTML comme les signes &lt;, &gt; et &.\nLe caractère peut être confondu avec un autre ayant un glyphe visuellement identique, comme l’espace insécable qui est visuellement identique à l’espace simple et que l’on représentera par donc par &nbsp; ou le trait d’union insécable, identique au trait d’union normal et que l’on représentera par &#8209;.\nLe type d’encodage du fichier texte ne permet pas de représenter le caractère. Par exemple si le fichier est encodé en windows-1257, le caractère “ç” ne sera pas utilisable directement, mais pourra quand même être représenté avec l’entité &ccedil;.\nLe caractère ne s’affiche pas correctement dans votre éditeur, comme l’émoticône “visage souriant” (&#9786; = ☺).\nLe caractère est par nature invisible, comme l’espace sans chasse (&#8203;).\n\n\nPour tout nouveau projet, il est important de s’assurer que tous vos fichiers sont encodés en utf-8 qui est une norme quasi universelle aujourd’hui en occident. Le premier avantage est que vos fichiers seront lisibles par la grande majorité des agents utilisateurs et le deuxième avantage est que vous ne serez pas contraint d’utiliser plus d’entités que nécessaire.\n\n\nQuelques entités\n\n\n\n\n\n\n\n\n\n\nCaractère\nGlyphe\nEntité textuelle\nEntité décimale\nEntité hexadécimale\n\n\n\n\nSigne inférieur à\n&lt;\n&lt;\n&#60;\n&#x3C;\n\n\nSigne supérieur à\n&gt;\n&gt;\n&#62;\n&#x3E;\n\n\nEsperluette\n&\n&amp;\n&#38;\n&#x26;\n\n\nEspace insécable\n \n&nbsp;\n&#160;\n&#xA0;\n\n\nTrait d’union insécable\n‑\n\n&#8209;\n&#x2011;\n\n\nÉmoticône “visage souriant”\n☺\n\n&#9786;\n&#x263A;\n\n\nEspace sans chasse\n​\n\n&#8203;\n&#x200B;\n\n\n\nVous trouverez une liste exhaustive d’entités sur unicode-table.com."
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#html-vs-xhtml",
    "href": "posts/2018-02-15-introduction-html/index.html#html-vs-xhtml",
    "title": "Introduction au langage HTML",
    "section": "HTML vs XHTML",
    "text": "HTML vs XHTML\nLa norme HTML 5 autorise deux syntaxes :\n\nLa syntaxe HTML\nLa syntaxe XHTML\n\nLa différence la plus notable est que la syntaxe HTML autorise que certaines balises ne soient pas fermées :\nen HTML, ceci est valide :\n&lt;meta charset=\"utf-8\"&gt;\n&lt;p&gt;...\n&lt;ul&gt;\n    &lt;li&gt;...\n    &lt;li&gt;...\n&lt;/ul&gt;\nalors qu’en XHTML, toutes les balises doivent être fermées :\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;p&gt;...&lt;/p&gt;\n&lt;ul&gt;\n    &lt;li&gt;...&lt;/li&gt;\n    &lt;li&gt;...&lt;/li&gt;\n&lt;/ul&gt;\n\nLa syntaxe XHTML a l’immense avantage d’être logique et facile à appliquer lorsque l’on génère le code à la main. De plus elle permet d’utiliser les outils prévus pour les fichiers XML, comme les langages XPath, XSLT et XQuery.\nLa syntaxe HTML permet quand à elle d’économiser quelques octets puisque le nombre de balises nécessaires est moindre. Certaines personnes, dont je ne fais pas partie, la trouvent aussi plus facile à lire puisque moins verbeuse.\nLe validateur du W3C accepte le mélange des deux syntaxes dans un même document et de ce que je peux voir sur le web, la syntaxe HTML a le vent en poupe. Cependant, mon conseil est de privilégier systématiquement la syntaxe XHTML. (Je découvre quelques mois plus tard que Google suggère de privilégier la syntaxe HTML.)\n\n\nLes différences principales entre HTML et XHTML\n\nStructure du document\n\nLe doctype &lt;!DOCTYPE html&gt; est obligatoire.\nL’attribut xmlns=\"http://www.w3.org/1999/xhtml\" est obligatoire.\nLes balises &lt;html&gt;, &lt;head&gt;, &lt;title&gt;, et &lt;body&gt; sont obligatoires.\n\n\n\nBalises XHTML\n\nLes balises doivent être imbriquées correctement.\nLes balises doivent être systématiquement fermées ou autofermées.\nLes balises doivent être écrites en minuscules.\nLa balise racine &lt;html&gt; doit être unique.\n\n\n\nAttributs XHTML\n\nLes attributs doivent être écrits en minuscules.\nLes valeurs des attributs doivent être entourées de guillemets simples (') ou doubles (\").\nLa minimisation des attributs est interdite. FAUX  ⇒ &lt;input checked /&gt;JUSTE ⇒ &lt;input checked=\"checked\" /&gt;\n\n\nNote : Je préfère souvent les guillemets doubles (\") aux guillemets simples ('), parce que l’apostrophe sur un clavier standard est aussi un guillemet simple et que ça peut rendre les recherches fastidieuses, particulièrement quand on veut appliquer les règles de typographie soignées qui imposent d’utiliser l’apostrophe typographique (’) au lieu de l’apostrophe droite (').\n\n\n\n\nPour en savoir plus\n\nHTML and XHTML (W3Schools en)\nApostrophe et « impostrophe »\nGoogle HTML/CSS Style Guide"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#le-traitement-des-blancs",
    "href": "posts/2018-02-15-introduction-html/index.html#le-traitement-des-blancs",
    "title": "Introduction au langage HTML",
    "section": "LE TRAITEMENT DES BLANCS",
    "text": "LE TRAITEMENT DES BLANCS\n\nOn appelle “blanc” ou whitespace en anglais, un caractère qui n’a pas de représentation graphique. Les blancs les plus usuels sont le retour à la ligne et l’espace (qui est un mot féminin en typographie).\n\nEn HTML et en CSS, il y a 5 façons possibles de traiter les blancs :\n\nnormal Les séries de blancs sont regroupées, les caractères de saut de ligne sont gérés comme les autres blancs. Les passages à la ligne sont faits naturellement pour remplir les boîtes.\nnowrap Les blancs sont regroupés comme avec normal mais les passages à la ligne automatiques sont supprimés.\npre Les séries de blancs sont conservées telles quelles. Les sauts de ligne ont uniquement lieu avec les caractères de saut de ligne et avec les éléments &lt;br /&gt;.\npre-wrap Les séries de blancs sont conservées telles quelles. Les sauts de ligne ont lieu avec les caractères de saut de ligne, avec &lt;br /&gt; et on a des passages à la ligne automatiques.\npre-line Les séries de blancs sont regroupées, les sauts de lignes ont lieu avec les caractères de saut de ligne, les éléments &lt;br /&gt; et on a des passages à la ligne automatiques.\n\n\nExemple de blanc normal avec la balise &lt;p&gt;\n\nLes espaces successives ne comptent que pour une espace.\nSi on veut tout de même afficher plusieurs espaces successives, il faut utiliser l’espace insécable (&nbsp;).\nUn ou plusieurs retours à ligne sont traités comme une seule espace.\nSi on veut un retour à ligne, on doit utiliser la balise &lt;br /&gt; (line break).\n\n\n\nValeurs par défaut\n\nnormal La grande majorité des balises HTML ont leur attribut CSS white-space défini par défaut à la valeur normal.\npre &lt;option&gt;, &lt;pre&gt;, &lt;select&gt;\npre-wrap &lt;textarea&gt;\n\n\n\nModification de la valeur par défaut\nOn peut modifier la valeur de l’attribut white-space par défaut avec l’instruction CSS suivante :\np.pre-line { white-space: pre-line; }\n\n\nPour en savoir plus\n\nwhite-space (MDN fr)\nUn espace ou une espace ?"
  },
  {
    "objectID": "posts/2018-02-15-introduction-html/index.html#les-commentaires",
    "href": "posts/2018-02-15-introduction-html/index.html#les-commentaires",
    "title": "Introduction au langage HTML",
    "section": "LES COMMENTAIRES",
    "text": "LES COMMENTAIRES\nSi l’on veut commenter une portion de code HTML, il faut utiliser la notation suivante :\n&lt;!-- Commentaire --&gt;\nPar contre, il faut utiliser les marques de commentaire natives des langages que l’on intègre :\nExemple avec du code CSS intégré dans le code HTML :\n&lt;style rel=\"stylesheet\"&gt;\n    /* commentaire CSS */\n&lt;/style&gt;\nExemple avec du code JavaScript intégré dans le code HTML :\n&lt;script&gt;\n    /* commentaire JS */\n    // Commentaire JS\n&lt;/script&gt;"
  },
  {
    "objectID": "posts/2015-06-26-nodejs_arduino_matrices/index.html",
    "href": "posts/2015-06-26-nodejs_arduino_matrices/index.html",
    "title": "Commander des Arduino avec Node.js",
    "section": "",
    "text": "Le système est géré avec un Raspberry Pi B+ avec :\n\nUn serveur Node.js{:target=“_blank”}\nUn hotspot WiFi{:target=“_blank”}\nUn hub USB sur lequel sont connectés les Arduino. Il y a 6 Arduino au total : 5 pour les matrices d’affichage et un 6e pour le contrôle des 4 boutons poussoirs.\n\nLa communication se passe de la façon suivante :\n\nOn connecte l’iPad au réseau WiFi du RPi\nOn charge la page web de l’application dans Safari sur l’iPad\nOn envoie des requêtes de changement de chiffres depuis la page web\nLe serveur Node.js reçoit les requêtes et les envoie via RS232 aux Arduino\n\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-05-21-ch340_driver/index.html",
    "href": "posts/2015-05-21-ch340_driver/index.html",
    "title": "Utiliser un chip CH340G au lieu d’un FTDI",
    "section": "",
    "text": "Édit du 15 juillet 2017\nJ’ai acheté quatre clones d’Arduino Nano sur AliExpress (s.click.aliexpress.com/e/aY3Jamyr3). Ce qu’ils ont de bien, c’est qu’ils m’ont coûté 3.60 $ la pièce. Par contre pour la communication USB, ils ne sont pas équipés de puces FTDI mais d’une puce CH340G\nLe pilote se télécharge ici :\nPour Mac OS X 10.10{:target=“_blank”}\nPour Windows 10{:target=“_blank”}\nLa doc en anglais se trouve ici :\nPour la version Mac, il faut désactiver la protection qui empêche les drivers non signés par Apple de s’exécuter. Ceci est valable depuis Mavericks (OS X 10.9).\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-05-21-ch340_driver/index.html#quelques-commandes-pour-obtenir-des-infos-sur-les-ports-usb",
    "href": "posts/2015-05-21-ch340_driver/index.html#quelques-commandes-pour-obtenir-des-infos-sur-les-ports-usb",
    "title": "Utiliser un chip CH340G au lieu d’un FTDI",
    "section": "Quelques commandes pour obtenir des infos sur les ports USB",
    "text": "Quelques commandes pour obtenir des infos sur les ports USB\nioreg -p IOUSB -l -w 0\n\nsystem_profiler SPUSBDataType\n\n# Voir aussi https://github.com/jlhonora/lsusb qui affiche les résultats de `system_profiler SPUSBDataType` de façon plus compacte.\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html",
    "href": "posts/2018-02-16-introduction-css/index.html",
    "title": "Introduction au langage CSS",
    "section": "",
    "text": "Ce document fait partie du cours sur le HTML embarqué que j’ai donné au Microclub en janvier et février 2018 à l’EPFL.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#les-documents-du-cours",
    "href": "posts/2018-02-16-introduction-css/index.html#les-documents-du-cours",
    "title": "Introduction au langage CSS",
    "section": "LES DOCUMENTS DU COURS",
    "text": "LES DOCUMENTS DU COURS\n\nIntroduction au langage HTML\nIntroduction au langage CSS\nIntroduction au langage JavaScript\nCours complet au format PDF"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#introduction",
    "href": "posts/2018-02-16-introduction-css/index.html#introduction",
    "title": "Introduction au langage CSS",
    "section": "INTRODUCTION",
    "text": "INTRODUCTION\nNous avons vu que le langage HTML permet de définir la structure du contenu d’un document. Nous allons maintenant voir comment mettre en forme l’apparence de ce contenu grâce au langage CSS.\nCSS signifie Cascading Style Sheets, c’est à dire Feuilles de style en cascade. CSS fait appel à des sélecteurs qui permettent d’appliquer les styles aux différents éléments HTML.\n\nNote\nIl n’y a pas que les documents HTML qui peuvent profiter de la mise en forme avec CSS, les documents SVG (Scalable Vector Graphics ou graphique vectoriel adaptable, en français) le peuvent aussi.\n\n\nPour en savoir plus\n\nCSS sur MDN"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#bénéfices-de-la-technologie-css",
    "href": "posts/2018-02-16-introduction-css/index.html#bénéfices-de-la-technologie-css",
    "title": "Introduction au langage CSS",
    "section": "BÉNÉFICES DE LA TECHNOLOGIE CSS",
    "text": "BÉNÉFICES DE LA TECHNOLOGIE CSS\nUne des grandes forces de la technologie CSS est d’offrir la possibilité de mettre en forme un document de façons complètement différentes en adaptant uniquement les feuilles de style, mais sans modifier le document HTML source.\nCe cours lui-même est un exemple de cette possibilité offerte par CSS. Il y a plusieurs scénarios de transformation possibles et chacun à son CSS associé :\n\nExemple avec ce cours\nPrérequis\n\nRédaction des documents au format Markdown.\n\nScénario 1 : Génération avec GitHub\n\nLors de la mise en ligne, GitHub convertit automatiquement les fichiers Markdown en HTML et affiche le résultat sur leur site en utilisant leur propre CSS.\n\nScénario 2 : Génération avec Pandoc\n\nJ’utilise Pandoc pour convertir les fichiers Markdown en HTML et j’inclus dans le fichier HTML la feuille de style CSS qui permet de lire ce fichier dans un navigateur.\n\nScénario 3 : Génération avec Prince\n\nJ’utilise Prince pour convertir le fichier HTML du scénario 2 en format PDF. La feuille de style est également la même, mais elle contient des instructions qui permettent de différencier le rendu à l’écran et le rendu au format PDF.\n\nConclusion\nOn voit que les trois scénarios utilisent des CSS différents et qu’un fichier source peut générer différents fichiers cibles.\n\n\nEXEMPLE AVEC CSS ZEN GARDEN\nUn exemple spectaculaire de la puissance de la technologie CSS est le site CSS Zen Garden. Le défi proposé par ce site est que tous les participants mettent en forme le même fichier HTML et le résultat visuel doit être aussi original que possible. Je vous laisse juger de l’inventivité des participants ainsi que de la puissance de la technologie CSS."
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#position-du-css",
    "href": "posts/2018-02-16-introduction-css/index.html#position-du-css",
    "title": "Introduction au langage CSS",
    "section": "POSITION DU CSS",
    "text": "POSITION DU CSS\nLes instructions CSS peuvent être définies dans 3 endroits différents :\n\nDans un ou plusieurs fichiers externes.\nÀ l’intérieur du fichier HTML, dans la balise &lt;style&gt; qui doit se trouver elle-même dans la balise &lt;head&gt;.\nDans l’attribut style d’un élément HTML.\n\n\nCSS externe au fichier HTML\nL’avantage du fichier CSS externe est qu’il permet de réunir toutes les informations de style en un seul fichier qui pourra être utilisé par toutes les pages HTML d’un site, aussi grand soit-il. Ceci permet de minimiser la bande passante et d’accélérer le rendu puisque les agents utilisateurs peuvent garder la feuille de style en cache.\nAvec des fichiers CSS externes, il est également plus facile de gérer des scénarios de transformation différents.\nVoici un exemple de fichier CSS (style.css) :\np {\n    color: firebrick;\n}\nPour faire appel à ce fichier, il faut inclure la balise &lt;link&gt; dans le document HTML, généralement à l’intérieur de la balise &lt;head&gt;, mais la norme HTML 5 permet de positionner cette balise dans l’élément &lt;body&gt; également.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;CSS&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;Hello Microclub !&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nCSS interne au fichier HTML, dans la balise &lt;style&gt;\nSi on désire ne servir qu’un seul fichier qui contient à la fois les instructions HTML et CSS, comme c’est souvent le cas dans le monde de l’IoT, il est possible de placer les instructions CSS dans une ou plusieurs balises &lt;style&gt; qui doivent se trouver dans la balise &lt;head&gt; du fichier HTML.\nOn peut aussi utiliser cette méthode pour créer des exceptions pour une page donnée dans un site web contenant plusieurs pages.\nC’est aussi un moyen de forcer les agents utilisateurs à ne pas réutiliser les informations de leur cache.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;CSS&lt;/title&gt;\n    &lt;style&gt;\n    p {\n    color: aqua;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;Hello Microclub !&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nCSS interne au fichier HTML, dans l’attribut style d’un élément HTML\nCette méthode est analogue à celle que l’on utiliserait dans un logiciel de traitement de texte, c’est-à-dire que l’on applique le style directement à l’élément concerné.\nElle doit être utilisée le moins souvent possible, car elle augmente considérablement la taille des fichiers et diminue la lisibilité. Google pénalise aussi cette pratique lors de l’indexation si on en croit leur outil PageSpeed Insights.\nElle a également le désavantage d’empêcher la gestion de scénarios de transformation.\nCela dit, c’est un bon moyen de créer une exception pour un élément donné.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;CSS&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p style=\"color: blueviolet\"&gt;Hello Microclub !&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#la-syntaxe",
    "href": "posts/2018-02-16-introduction-css/index.html#la-syntaxe",
    "title": "Introduction au langage CSS",
    "section": "LA SYNTAXE",
    "text": "LA SYNTAXE\nPour apprendre les bases de la syntaxe CSS, nous allons utiliser l’exemple ci-dessous (adapté de l’exemple sur MDN).\nfichier syntaxe.css\nbody {\n    font: 1em/150% \"Helvetica Neue\", Arial, monospace;\n    padding: 1em;\n    margin: 20px auto;\n    max-width: 33em;\n}\n\n@media (min-width: 768px) {\n    body {\n    border: 1px solid chocolate;\n    }\n}\n\nh1 {\n    font-size: 1.5em;\n}\n\ndiv p, #id:first-line {\n    background-color: antiquewhite;\n    color: cadetblue;\n}\n\ndiv p {\n    margin: 0;\n    padding: 1em;\n}\n\ndiv p + p {\n    padding-top: 0;\n}\nfichier syntaxe.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Syntaxe CSS&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"syntaxe.css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Un exemple simple&lt;/h1&gt;\n\n    &lt;p id=\"id\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n       Nulla eget sapien volutpat, blandit tortor sit amet, consequat\n       sem. Mauris suscipit nunc eu mi lobortis, in porttitor nulla\n       tempor. Suspendisse ante erat, eleifend auctor dictum in,\n       viverra eu elit.&lt;/p&gt;\n\n    &lt;div&gt;\n      &lt;p&gt;Nullam sit amet augue consequat, tristique enim non, varius\n         orci. Vivamus bibendum elit turpis, sit amet fringilla neque\n         mollis sed. Donec semper, nibh molestie maximus pretium, tellus\n         nibh molestie leo, vitae vulputate ante turpis a eros.&lt;/p&gt;\n\n      &lt;p&gt;Vestibulum pharetra metus id quam dignissim, ac maximus libero\n         efficitur. Nullam hendrerit diam nisl. Nullam feugiat semper\n         ipsum a pharetra. Ut posuere varius consectetur. Sed purus nunc,\n         fringilla laoreet risus vitae, laoreet dapibus diam.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nAnatomie d’une règle CSS\nUne règle CSS se présente sous la forme suivante :\nsélecteur1, sélecteur2 {\n    propriété1: valeur1;\n    propriété2: valeur2;\n}\nVoici un exemple réel de règle :\ndiv p, #id:first-line {\n    background-color: antiquewhite;\n    color: cadetblue;\n}\nOn voit qu’une règle est composée de la manière suivante :\n\nUn ou plusieurs sélecteurs séparés par des virgules, ici div p et #id:first-line.\nUn bloc délimité par des accolades {}.\nUn bloc peut être vide ou contenir une ou plusieurs déclarations, ici background-color: antiquewhite; et color: cadetblue;.\nLes blocs peuvent être imbriqués.\nChaque déclaration est constituée de propriétés et de valeurs séparées du caractère deux points (:).\nLes déclarations sont terminées par un point-virgule.\nLe point-virgule est optionnel (mais recommandé) pour la dernière déclaration d’un bloc.\nLes déclarations peuvent être mises sur une ou plusieurs lignes.\n\n\nLes instructions CSS sont sensibles à la casse (majuscule ≠ minuscule). En CSS, il n’est pas possible de définir des variables ou des constantes, ce qui est très problématique pour gérer des projets complexes. Dans ce cas, on utilisera un langage de génération de feuilles de style comme Sass. Si une règle est invalide, elle est ignorée.\n\n\n\nCommentaires\nIl est possible de commenter le code CSS de la manière suivante :\nbody {\n    font: 1em/150% \"Helvetica Neue\", Arial, monospace;\n    padding: 1em;\n    /*\n    Ceci est un commentaire.\n    Les instructions ci-dessous\n    ne seront pas exécutées\n    car elles sont commentées.\n    */\n    /*\n    margin: 20px auto;\n    max-width: 33em;\n    */\n}\n\nCSS ne permet pas de commenter ligne par ligne, comme il est possible de le faire en JavaScript avec les symboles //.\n\n\nOn ne peut pas commenter une portion de code qui contient elle-même des commentaires. Ceci est très contraignant et il convient donc d’être très prudent quand on commente une grande portion de code. Si des commentaires étaient déjà présents, le code ne sera plus valide !\n\n\n\nValidation\nPour s’assurer qu’un code CSS est valide, on peut utiliser le validateur CSS du W3C.\n\n\nPour en savoir plus\n\nLes déclarations CSS MDN\nLes blocs CSS MDN\nLes règles CSS MDN\n\n\n\nLes instructions CSS\nLes instructions CSS MDN"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#les-sélecteurs",
    "href": "posts/2018-02-16-introduction-css/index.html#les-sélecteurs",
    "title": "Introduction au langage CSS",
    "section": "LES SÉLECTEURS",
    "text": "LES SÉLECTEURS\nEn CSS, les sélecteurs sont utilisés afin de cibler une partie spécifique d’une page web à mettre en forme. Afin de pouvoir être précis, CSS est très riche en sélecteurs et une grande partie de sa flexibilité dépend de ceux-ci.\n\nLes sélecteurs simples\n\nLes sélecteurs de type (type selectors)\nLes sélecteurs de classe\nLes sélecteurs d’identifiant\nLe sélecteur universel\n\nLes sélecteurs d’attribut\n\nDéfinition et valeur des sélecteurs d’attribut\nLes sélecteurs d’attribut utilisant un filtre sur les fragments de chaînes\n\nLes pseudo-classes\nLes pseudo-éléments\nLes combinateurs\n\nPour découvrir les sélecteurs, rendez-vous sur la page des sélecteurs de MDN."
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#la-cascade",
    "href": "posts/2018-02-16-introduction-css/index.html#la-cascade",
    "title": "Introduction au langage CSS",
    "section": "LA CASCADE",
    "text": "LA CASCADE\nComme son nom l’indique, CSS agit en cascade, ce qui signifie que les définitions de style sont lues les unes après les autres et que si deux règles sont identiques, c’est la dernière qui sera appliquée.\nDans l’exemple ci-dessous, la couleur du texte à l’intérieur des balises &lt;p&gt; est définie 3 fois. Pour être exhaustif, il faut aussi mentionner que les agents utilisateurs appliquent eux aussi des styles par défaut et qu’ils peuvent permettre aux utilisateurs de créer leurs propres styles. Donc, l’agent utilisateur lira les 5 sources suivantes et dans cet ordre :\n\nStyle par défaut de l’agent utilisateur ⇒ black\nUtilisateur de l’agent utilisateur ⇒ not set\nFichier externe (style.css) ⇒ firebrick\nBalise &lt;style&gt; ⇒ aqua\nAttribut style de l’élément &lt;p&gt; ⇒ blueviolet\n\nLes règles de cascade imposent que, si des règles sont en concurrence, ce soit la dernière qui est appliquée. Donc dans l’exemple ci-dessous, la couleur du texte sera blueviolet.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;CSS&lt;/title&gt;\n\n    &lt;!-- Lorsque l’agent utilisateur arrive ici,\n    il a déjà chargé ses styles par défaut ainsi\n    que les styles personnels de l’utilisateur. --&gt;\n\n    &lt;!-- Ici l’agent utilisateur charge le fichier\n    style.css --&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n\n    &lt;!-- Ici l’agent utilisateur charge les styles\n    déclarés dans la balise “style” --&gt;\n    &lt;style&gt;\n        p {\n            color: aqua;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Ici l’agent utilisateur applique le style\n    indiqué dans l’attribut “style” --&gt;\n    &lt;p style=\"color: blueviolet\"&gt;Hello Microclub !&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#la-pondération",
    "href": "posts/2018-02-16-introduction-css/index.html#la-pondération",
    "title": "Introduction au langage CSS",
    "section": "LA PONDÉRATION",
    "text": "LA PONDÉRATION\nLes règles de la cascade s’appliquent pour prioriser les différentes sources. Que se passe-t-il si, pour une même source, plusieurs règles concernent le même élément ? Dans ce cas, pour prioriser les règles, on prendra en compte le poids du sélecteur. Le poids d’un sélecteur est calculé en fonction de sa spécificité :\n\nNiveau 1 (spécificité élevée) : Sélecteur d’identifiant\nNiveau 2 (spécificité moyenne) : Sélecteur de classe, de pseudo-classe et d’attribut\nNiveau 3 (spécificité faible) : Sélecteur de type et de pseudo-element\n\nPour déterminer si une règle s’applique plutôt qu’une autre on regarde :\n\nCelle qui possède le plus de sélecteurs de niveau 1.\nSi le nombre de sélecteurs de niveau 1 est le même : celle qui possède le plus de sélecteurs de niveau 2.\nSi le nombre de sélecteurs de niveau 2 est le même : celle qui possède le plus de sélecteurs de niveau 3.\nEnfin, si les sélecteurs ont le même poids, ce sera l’ordre des règles dans le fichier source qui importera : la règle la plus basse dans le fichier l’emportera sur une règle déclarée avant.\n\nPrenons ce fragment de HTML par exemple :\n&lt;p id=\"cookie\" class=\"crispy\"&gt;Ce cookie est &lt;span&gt;délicieux !&lt;/span&gt;&lt;/p&gt;\nCette feuille de style illustre ce qui se passe lorsqu’un sélecteur de niveau 1 entre en conflit avec d’autres sélecteurs :\n/* Ce sélecteur est composé d’un sélecteur de niveau 1\n   Poids : 1 | 0 | 0 */\n#cookie {\n  color: green;\n}\n/* Ce sélecteur n’a aucun sélecteur de niveau 1\n   et 2 sélecteur de niveau 2\n   Poids : 0 | 2 | 0 */\n[id=cookie].crispy {\n  color: red;\n}\n\n/* 1|0|0 &gt; 0|2|0 : La première règle s’applique et le texte\n   est vert. Un seul sélecteur de niveau 1 sera toujours\n   prioritaire par rapport à X sélecteurs de niveau 2. */\n\nPour en savoir plus\n\nPondération MDN"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#lhéritage",
    "href": "posts/2018-02-16-introduction-css/index.html#lhéritage",
    "title": "Introduction au langage CSS",
    "section": "L’HÉRITAGE",
    "text": "L’HÉRITAGE\nHéritage MDN"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#les-media-queries",
    "href": "posts/2018-02-16-introduction-css/index.html#les-media-queries",
    "title": "Introduction au langage CSS",
    "section": "LES MEDIA QUERIES",
    "text": "LES MEDIA QUERIES\nLes media queries, ou requêtes media en français, sont des instructions CSS qui permettent d’appliquer des règles CSS différentes en fonction de l’appareil utilisé et ceci sans modification du code HTML. Elles sont à la base de ce qu’on appelle le responsive design ou design adaptatif en français et c’est ce qui permet à un site web de s’afficher lisiblement à la fois sur un écran de bureau 27” et sur l’écran d’un téléphone.\nOn peut spécifier le média cible à deux endroits différents :\nDans l’attribut media de la balise &lt;link&gt; qui appelle le code CSS :\n&lt;link rel=\"stylesheet\" media=\"screen\" href=\"style-screen.css\" /&gt;\n&lt;link rel=\"stylesheet\" media=\"print\" href=\"style-print.css\" /&gt;\nOu dans le CSS lui-même :\nbody\n{\n  background-color: lime;\n}\n\n@media (min-width: 700px)\n{\n  body\n  {\n    background-color: red;\n  }\n}\n\n@media (min-width: 700px) and (orientation: landscape)\n{\n  body\n  {\n    background-color: lime;\n  }\n}\n\nPour en savoir plus\n\nLes medias queries MDN"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#les-couleurs",
    "href": "posts/2018-02-16-introduction-css/index.html#les-couleurs",
    "title": "Introduction au langage CSS",
    "section": "LES COULEURS",
    "text": "LES COULEURS\nLes couleurs peuvent être définies de plusieurs façons différentes. Tous les exemples ci-dessous définissent la même couleur firebrick.\n/* Par nom : */\nbody { background-color: firebrick; }\n\n/* Par code hexadecimal RGB : */\nbody { background-color: #B22222; }\n\n/* Par code decimal RGB : */\nbody { background-color: rgb(178, 34, 34); }\n\n/* Par code decimal RGB avec gestion de la transparence : */\nbody { background-color: rgba(178, 34, 34, 0.5); }\n\n/* Par code decimal HSL : */\nbody { background-color: hsl(0, 68%, 42%); }\n\n/* Par code decimal HSL avec gestion de la transparence : */\nbody { background-color: hsla(0, 68%, 42%, 0.5); }\n\nNotation courte\nIl existe aussi une notation courte sur 3 chiffres au lieu de 6. Par exemple, #B22 est équivalent à #BB2222, ce qui est très proche de #B22222 de notre exemple ci-dessus.\nbody { background-color: #B22; }\n\n\nNombre de couleurs\nLa notation standard sur 6 chiffres permet d’afficher 166 = 2563 = 16’777’216 de couleurs, alors que la notation sur 3 chiffres n’en offre que 163 = 4’096.\n\n\nPour en savoir plus\n\nHTML Color Picker W3 Schools\nCouleurs CSS MDN"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#frameworks",
    "href": "posts/2018-02-16-introduction-css/index.html#frameworks",
    "title": "Introduction au langage CSS",
    "section": "FRAMEWORKS",
    "text": "FRAMEWORKS\nMettre en forme des pages HTML peut vite devenir une tâche complexe, particulièrement quand on veut l’afficher sur des écrans de tailles très différentes. Pour cela, il est fortement conseillé de ne pas réinventer la roue et d’utiliser un framework, c’est-à-dire une collection d’outils prête à l’emploi.\nDans le monde du CSS, le framework Bootstrap est très populaire en ce moment. Il est basé sur un système de grille à 12 colonnes qui sont utilisées pour l’alignement des éléments visuels.\nUn désavantage de Bootstrap est que le fichier CSS de base (bootstrap.min.css) pèse 118 ko, ce qui est relativement conséquent quand on veut travailler avec un ESP8266. Mais j’ai essayé et ça fonctionne. Si la topologie du projet le permet, il est de toute façon préférable de charger Bootstrap depuis un CDN et pas depuis le site web ou l’appareil IoT de l’application en utilisant le code suivant :\n&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\" /&gt;\nVoici un canevas pour bien commencer avec Bootstrap. Il est assez complet, donc dans la plupart des cas, il conviendra d’enlever les éléments inutilisés.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\" /&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\" /&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\" /&gt;\n  &lt;style type=\"text/css\"&gt;\n    @import url('https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,200i,400');\n    body {\n      font-family: 'Source Sans Pro', monospace;\n      font-size: 14pt;\n      margin: 2em;\n      background-color: #f2f2f2;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-12 col-xs-offset-0\"&gt;\n        &lt;h1&gt;Bootstrap starter template&lt;/h1&gt;\n        &lt;p&gt;&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-3.6.4.slim.min.js\" integrity=\"sha256-a2yjHM4jnF9f54xUQakjZGaqYs/V1CYvWpoqZzC2/Bw=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://maxcdn.bootstrapcdn.com/js/ie10-viewport-bug-workaround.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIl existe d’autres frameworks, comme Foundation qui est aussi très populaire.\n\nPour en savoir plus\n\nSite officiel de Bootstrap, en\nSite officiel de Foundation, en"
  },
  {
    "objectID": "posts/2018-02-16-introduction-css/index.html#pour-la-suite",
    "href": "posts/2018-02-16-introduction-css/index.html#pour-la-suite",
    "title": "Introduction au langage CSS",
    "section": "POUR LA SUITE",
    "text": "POUR LA SUITE\nAvec cette introduction sur la technologie CSS, vous avez maintenant une base pour comprendre comment mettre en forme une page HTML simple.\nSi vous désirez approfondir vos connaissances, vous pouvez lire l’article “Composer le HTML avec les CSS”.\nPour vous aider lors de l’écriture de vos feuilles de style, vous trouverez une liste exhaustive des mots-clés de la syntaxe CSS ici : Référence CSS MDN.\nLe site du W3C contient lui aussi beaucoup d’informations utiles : CSS sur le site du W3C."
  },
  {
    "objectID": "posts/2017-04-27-neopixel-didel-ws2813/index.html",
    "href": "posts/2017-04-27-neopixel-didel-ws2813/index.html",
    "title": "Neopixel Didel WS2813",
    "section": "",
    "text": "Test d’un strip de 2 LED que Didel m’a gracieusement offert.\nOn peut l’acheter chez Boxtec et dans ce cas, il a 11 LED adressables WS2813. http://shop.boxtec.ch/didel-neopixel-stickbreakout-ws2813-p-42819.html\nIl y a un guide utilisateur ici : http://cdn2.boxtec.ch/pub/didel/WS2813MiniStrip.pdf\nEt la spécification des LED WS2813 se trouve ici : http://cdn2.boxtec.ch/pub/diverse/WS2813.pdf\nDidel propose des exemples de programme pour Arduino http://didel.com/WS28.zip et c’est eux que j’ai testés.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-04-27-neopixel-didel-ws2813/index.html#projet",
    "href": "posts/2017-04-27-neopixel-didel-ws2813/index.html#projet",
    "title": "Neopixel Didel WS2813",
    "section": "",
    "text": "Test d’un strip de 2 LED que Didel m’a gracieusement offert.\nOn peut l’acheter chez Boxtec et dans ce cas, il a 11 LED adressables WS2813. http://shop.boxtec.ch/didel-neopixel-stickbreakout-ws2813-p-42819.html\nIl y a un guide utilisateur ici : http://cdn2.boxtec.ch/pub/didel/WS2813MiniStrip.pdf\nEt la spécification des LED WS2813 se trouve ici : http://cdn2.boxtec.ch/pub/diverse/WS2813.pdf\nDidel propose des exemples de programme pour Arduino http://didel.com/WS28.zip et c’est eux que j’ai testés."
  },
  {
    "objectID": "posts/2017-04-27-neopixel-didel-ws2813/index.html#brochage",
    "href": "posts/2017-04-27-neopixel-didel-ws2813/index.html#brochage",
    "title": "Neopixel Didel WS2813",
    "section": "Brochage",
    "text": "Brochage\n\n\n\nNeopixel Didel\nArduino Nano\n\n\n\n\n-\nGND\n\n\n+\n5V ¹\n\n\nd\nA0 ²\n\n\nb\nNC\n\n\n\n¹ Utiliser une résistance de 220 Ω à 1 kΩ pour limiter le courant. Faux ! Voir l’édition de février-mars 2018 ci-dessous. ² A0 est utilisé par défaut dans les programmes de Didel, mais n’importe quel GPIO peut être utilisé."
  },
  {
    "objectID": "posts/2017-04-27-neopixel-didel-ws2813/index.html#notes",
    "href": "posts/2017-04-27-neopixel-didel-ws2813/index.html#notes",
    "title": "Neopixel Didel WS2813",
    "section": "Notes",
    "text": "Notes\nOn peut aussi alimenter ce strip en 3.3 V.\nLes programmes de Didel sont optimisés pour être aussi compacts que possible et tiennent sans problèmes sur un ATtiny.\n\n\n\nProgramme\nTaille programme\nTaille variables globales\n\n\n\n\nWS28First.ino\n812 o (2%)\n9 o (0%)\n\n\nRGBvsLogRGB.ino\n886 o (2%)\n42 o (2%)\n\n\nHuetest.ino\n1264 o (4%)\n23 o (1%)\n\n\n\n{: width=“90%” }"
  },
  {
    "objectID": "posts/2017-04-27-neopixel-didel-ws2813/index.html#édit-de-février-mars-2018",
    "href": "posts/2017-04-27-neopixel-didel-ws2813/index.html#édit-de-février-mars-2018",
    "title": "Neopixel Didel WS2813",
    "section": "Édit de février-mars 2018",
    "text": "Édit de février-mars 2018\nJ’ai refait des tests avec ces LED pour évaluer leur luminosité et je me suis rendu compte que j’avais fait une grosse bourde : il ne faut pas utiliser de résistance de limitation de courant !\nDans la foulée, j’ai aussi essayé de les alimenter de deux façons différentes :\n\nAvec l’Arduino Nano.\nAvec une alimentation externe 5 V.\n\n\nRésultat des courses : l’intensité lumineuse est identique dans les deux cas.\n\nLe programme de test se trouve sur mon GitHub.\nAlimentation avec l’Arduino Nano\n{: width=“90%” }\nAlimentation avec une source externe 5 V\n{: width=“90%” }"
  },
  {
    "objectID": "posts/2017-04-27-neopixel-didel-ws2813/index.html#test-avec-un-raspberry-pi",
    "href": "posts/2017-04-27-neopixel-didel-ws2813/index.html#test-avec-un-raspberry-pi",
    "title": "Neopixel Didel WS2813",
    "section": "Test avec un Raspberry Pi",
    "text": "Test avec un Raspberry Pi\nJ’ai aussi fait un test avec un Raspberry Pi pour voir s’il est possible de faire fonctionner des LED adressables lorsque le processeur du RPi est utilisé au maximum de sa capacité.\nPour les LED, j’ai utilisé la solution logicielle proposée par Adafruit.\nPour le stress-test, j’ai utilisé vcgencmd.\nPour convertir le 3.3 V en 5 V, j’ai utilisé un Logic Level Converter bidirectionnel.\nLa broche de données est la 18.\n\nRésultat du test : ça fonctionne parfaitement. Le RPi peut sans problème être utilisé à 100 % de sa capacité et en même temps piloter les deux LED. Peut-être que ça sera plus dur avec plus de LED… à voir.\n\n{: width=“90%” }"
  },
  {
    "objectID": "posts/2017-04-27-neopixel-didel-ws2813/index.html#voir-aussi",
    "href": "posts/2017-04-27-neopixel-didel-ws2813/index.html#voir-aussi",
    "title": "Neopixel Didel WS2813",
    "section": "Voir aussi",
    "text": "Voir aussi\n\nLED adressable P9823-F8\nRGBstrips.pdf"
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html",
    "title": "Afficheur à LED 128×16",
    "section": "",
    "text": "ouilogique.com\n128 full-color display type P6-16\n16×128 pixels\nXuan Cai\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#informations-au-démarrage",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#informations-au-démarrage",
    "title": "Afficheur à LED 128×16",
    "section": "INFORMATIONS AU DÉMARRAGE",
    "text": "INFORMATIONS AU DÉMARRAGE\nColorful LED V39\nSystem Checks..\nPassword OFF\nBaud 9600\nSim card OK!\nCSQ Checks...\nCSQ: 9\n\nLe CSQ indique la qualité du signal GPRS : http://m2msupport.net/m2msupport/atcsq-signal-quality/\n\n\nL’afficheur n’a pas d’antenne et la réception est très mauvaise dès que l’on s’éloigne des fenêtres. Pour pallier ce problème, j’ai acheté ce modèle d’antenne chez AliExpress et il fonctionne très bien. Le CSQ est de 14 au milieu d’une pièce (environ 3 m de la fenêtre)."
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#carte-sim",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#carte-sim",
    "title": "Afficheur à LED 128×16",
    "section": "CARTE SIM",
    "text": "CARTE SIM\nIntroduire la carte SIM avec son support en plastique.\nRessortir la carte en pressant le bouton vert à côté de celle-ci.\nLa carte SIM permet de contrôler l’afficheur à distance via SMS ou Fetion App (service chinois de messagerie)."
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#mot-de-passe",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#mot-de-passe",
    "title": "Afficheur à LED 128×16",
    "section": "MOT DE PASSE",
    "text": "MOT DE PASSE\nPas de mot passe par défaut."
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#commande-par-sms",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#commande-par-sms",
    "title": "Afficheur à LED 128×16",
    "section": "COMMANDE PAR SMS",
    "text": "COMMANDE PAR SMS\n\n⚠ Les commandes sont sensibles à la casse ! ⚠ Les accents ne sont pas supportés ! ⚠ 140 caractères maximum !\n\n\nProtocole\nLe message commence obligatoirement par *\net se termine obligatoirement par #× où × est le n° du message à afficher, × = 1 .. 59. Si x n’est pas dans l’intervalle 1 .. 59, le message #1 est modifié. × peut être spécifié avec un 0 non significatif (#1 ou #01).\nLes autres sélecteurs (mode de défilement, n° de ligne, couleur) sont optionnels.\n\n\n\n\n\n\n\n&lt;F×&gt;\nMode de défilement, × = 1 .. 6\n\n\n&lt;L×&gt;\nN° de ligne, × = 1, 2\n\n\n&lt;C×&gt;\nDéfinition de la couleur, × = R (rouge), Y (jaune), G (vert), C (cyan), B (bleu), P (mangenta), W (blanc)\n\n\n\n\n\nModes de défilement\n\n\n\n&lt;F1&gt;\nstatique\n\n\n&lt;F2&gt;\ndéfilement vers le haut\n\n\n&lt;F3&gt;\ndéfilement vers la gauche\n\n\n&lt;F4&gt;\ndéfilement vers le bas\n\n\n&lt;F5&gt;\nclignote\n\n\n\n\n\nCombinaisons de modes de défilements possibles sur deux lignes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL1\nF1\nF1\nF1\nF1\nF2\nF2\nF2\nF4\nF4\nF5\nF5\n\n\nL2\nF1\nF2\nF3\nF4\nF1\nF2\nF3\nF1\nF4\nF3\nF5\n\n\n\n\n\nExemples de messages sur une ligne\n\nLe mode de défilement est optionnel. Si on ne le précise pas, tous les modes de défilement sont utilisés successivement et dans l’ordre chronologique (F1, F2,…). On ne peut pas spécifier plusieurs modes de défilement sur une ligne donnée. Les lignes de commande ci-dessous doivent être envoyées dans des SMS distincts.\n\n*&lt;F1&gt;&lt;CG&gt;A GAGNER EN CE MOMENT A L'EURO MILLIONS : &lt;CR&gt;!! 147 MILLION$ !!#02\n*&lt;F5&gt;!! 147 MILLION$ !!#03\n\n\nExemples de messages sur deux lignes\n\nEn mode deux lignes, les caractères ont une hauteur de 7 px. Par défaut, la première lignes est statique et la deuxième défile vers la gauche. On peut changer les modes de défilement des deux lignes. Voir les combinaisons possibles ci-dessus.\n\n*&lt;L1&gt;&lt;F2&gt;KIOSQUE DE MONTCHOISI&lt;L2&gt;&lt;F2&gt;JOYEUSES FETES DE FIN D'ANNEE#01\n*&lt;L1&gt;&lt;F4&gt;KIOSQUE DE MONTCHOISI&lt;L2&gt;&lt;F4&gt;JOYEUSES FETES DE FIN D'ANNEE#04\n\n\nSpécifier les textes qui doivent s’afficher\n*RL#01#02#03#04*\n\n\nSpécifier la couleur\n\nSi aucune couleur n’est spécifiée, les caractères s’affichent dans 7 couleurs successivement : (rouge R, jaune Y, vert G, cyan C, bleu B, mangenta P, blanc W)\n\n*&lt;CR&gt;ce texte sera rouge &lt;CY&gt;et celui-ci sera jaune#08\n\n\nSpécifier la vitesse\n\nVitesses de 1 à 6 1 = rapide, 6 = lent Utiliser de préférence les vitesses S1, S2 et S3. Les autres ont tendance à scintiller. La vitesse est définie pour tous les messages. On ne peut pas régler des vitesses individuelles.\n\n*S1*\n\n\nSpécifier la luminosité\n\nLuminosité de 1 à 6 1 = moins lumineux, 6 = plus lumineux La luminosité est définie pour tous les messages. On ne peut pas régler des luminosité individuelles.\n\n*B1*\n\n\nMise à zéro\n\nLa mise à zéro supprime tous les messages. Si aucun message n’est enregistré, le message “Welcome!” est affiché.\n\n*DEL*"
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#commande-par-usb-sur-windows",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#commande-par-usb-sur-windows",
    "title": "Afficheur à LED 128×16",
    "section": "COMMANDE PAR USB SUR WINDOWS",
    "text": "COMMANDE PAR USB SUR WINDOWS\n\nBrancher le câble USB entre l’afficheur et l’ordinateur.\nVérifier si la carte USB est reconnue dans les périphériques de Windows.\nSi c’est le cas, noter son port COM.\nSi ce n’est pas le cas installer le driver pour le CH340 et retourner au point 2.\nUtiliser le logiciel fourni (MiniLEDDisplayEditorV2.exe)"
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#commande-par-usb-sur-os-x",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#commande-par-usb-sur-os-x",
    "title": "Afficheur à LED 128×16",
    "section": "COMMANDE PAR USB SUR OS X",
    "text": "COMMANDE PAR USB SUR OS X\n\nPour trouver les commandes RS232 à envoyer, j’ai espionné les transmissions du logiciel MiniLEDDisplayEditorV2.exe avec Free Serial Analyzer sous Win10/VirtualBox.\n\nUtiliser un logiciel qui permet d’envoyer des caractères via RS232. Celui de l’IDE Arduino fonctionne bien.\n\nInstaller le pilote pour la communication USB avec le CH340 https://ouilogique.com/ch340_driver/\nL’adresse du port RS232 est de la forme /dev/cu.wchusbserial14240\nVitesse de transmission : 9600 bauds\nAttendre ~ 3 s entre chaque commande\n\n\nExemples\n&lt;ID01&gt;&lt;PA&gt;&lt;L1&gt;&lt;F2&gt;KIOSQUE DE MONTCHOISI&lt;L2&gt;&lt;F2&gt;JOYEUSES FETES DE FIN D'ANNEE&lt;E&gt;\n&lt;ID01&gt;&lt;PB&gt;&lt;F1&gt;&lt;CG&gt;A GAGNER EN CE MOMENT A L'EURO MILLIONS : &lt;CR&gt;!! 147 MILLION$ !!&lt;E&gt;\n&lt;ID01&gt;&lt;PC&gt;&lt;F5&gt;!! 147 MILLION$ !!&lt;E&gt;\n&lt;ID01&gt;&lt;PD&gt;&lt;L1&gt;&lt;F4&gt;KIOSQUE DE MONTCHOISI&lt;L2&gt;&lt;F4&gt;JOYEUSES FETES DE FIN D'ANNEE&lt;E&gt;\n&lt;ID01&gt;&lt;RG&gt;ABCD&lt;E&gt;"
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#module-gsmgprs",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#module-gsmgprs",
    "title": "Afficheur à LED 128×16",
    "section": "MODULE GSM/GPRS",
    "text": "MODULE GSM/GPRS\nQuectel GC65\n850/900/1800/1900 MHz"
  },
  {
    "objectID": "posts/2015-11-26-afficheur_a_led_128x16/index.html#images",
    "href": "posts/2015-11-26-afficheur_a_led_128x16/index.html#images",
    "title": "Afficheur à LED 128×16",
    "section": "IMAGES",
    "text": "IMAGES\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\nCarte GPRS + USB XC-1015 MSC6.3\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\nNappe\n\n⚠ Un des connecteurs de cette nappe est plus bas que normal (environ 3mm du câble jusqu’au sommet). C’est nécessaire pour pouvoir assembler l’afficheur !\n\n\n\n\nouilogique.com\n\n\n\n\nLogiciel MiniLEDDisplayEditorV2.exe\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\nProfilé 118 × 35 mm\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n⚠ À priori, les rainures au dos ne peuvent pas être utilisées avec de la visserie standard. En effet le M5 est trop petit et le M6 est trop grand. Voir le dessin Onshape\n\n\n\n\nouilogique.com\n\n\n\n\nConnecteur jack ⌀ 5.5 mm / ⌀ 2.5 mm\n\n⚠ Le connecteur jack de l’afficheur ne mesure que 9 mm de long et a un diamètre intérieur de 2.5 mm. Quand on le tourne, il y a de temps en temps des mauvais contacts qui font que l’afficheur redémarre. Avec un connecteur de 11 mm de long, de diamètre intérieur de 2.5 mm, mais pourvus d’ergots, ce problème disparait.\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\nJ’ai également fait un test avec deux connecteurs jack de test d’une longueur de 12 mm, de diamètres 5.5/2.1 mm et sans ergot. Le connecteur de test sur l’afficheur a un très bon contact alors que le connecteur de test branché au jack de l’alimentation pose le même problème de faux contact que si l’alimentation est directement connectée à l’afficheur.\n\n\n\n\nouilogique.com\n\n\nLa norme de ce genre de connecteurs s’appelle EIAJ et il me semble que celui de l’afficheur est un EIAJ-04.\n\nhttps://en.wikipedia.org/wiki/EIAJ_connector\n\n\n\nConclusion\nUn connecteur jack de diamètres 5.5/2.1 mm et d’une longueur de 11 ou 12 mm ferait mieux l’affaire."
  },
  {
    "objectID": "posts/2016-10-05-tests_batteries/index.html",
    "href": "posts/2016-10-05-tests_batteries/index.html",
    "title": "Test de décharge de batteries",
    "section": "",
    "text": "batterie noname ouverte\n\n\n\n\n\nTest batterie noname\n\n\n\n\n\nTest batterie Infinity PV\n\n\n\n\n\nBatterie\nCapacité annoncée\nCapacité mesurée\nCapacité mesuréevs annoncée\nDurée de la décharge\nTension mesurée\nCourant mesuré\nRésistance calculée\n\n\n\n\nSans marque 18650\n2600 mAh\n1526 mAh\n59%\n3 h 58\n4.90 V\n0.39 A\n12.6 Ω\n\n\nSamsung INR18650 - 25R\n2500 mAh\n1472 mAh\n59%\n3 h 06\n-\n-\n-\n\n\nMXJO IMR18650\n3000 mAh\n1786 mAh\n60%\n3 h 42\n-\n-\n-\n\n\nInfinity PV\n2600 mAh\n1563 mAh\n60%\n3 h 54\n5.12 V\n0.39 A\n13.1 Ω\n\n\nPowerbank Arctic\n2000 mAh\n893  mAh\n45%\n1 h 54\n-\n-\n-\n\n\nPowerbank Solaire\n20’000 mAh\n5806 mAh\n29%\n15 h 58\n4.55 V\n0.36 A\n12.6 Ω\n\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "",
    "text": "Commande d’un relai bistable qui doit commuter du 240 V avec une tension de commande de 9V très instable. Pour limiter les effets de cette instabilité, le système doit être temporisé, c’est-à-dire que dès que la première impulsion de commande est détectée, le relai doit s’ouvrir et rester ouvert pendant un temps défini (60 s dans ce projet), même si la tension de commande disparait. La temporisation est remise à zéro à chaque changement d’état de la commande. La détection de la commande 9 V et la temporisation sont réalisées avec un Arduino Pro Mini (ATmega 328p, 3.3V, horloge 8MHz interne).\nCette commande à relai est utilisée pour alimenter un lit électrique avec commande 9 V dans les mains de l’utilisateur. L’idée est d’amener le 240 V jusqu’au lit uniquement quand l’utilisateur actionne les moteurs. Ainsi il ne passe pas ses nuits avec du 240 V dans le dos. D’origine, le lit était livré avec un système à relai qui a cessé de fonctionné, probablement à cause de l’instabilité de la tension de commande. Et comme ce modèle n’existe plus depuis belle lurette, j’ai décidé d’en construire un nouveau.\n\nCe circuit est conçu pour consommer le moins possible puisqu’il est branché 24/24, mais utilisé que quelques secondes par jour. Pour cela, l’Arduino est mis en veille lorsque le relais est ouvert et consomme moins de 100 µA. La consommation totale du circuit est trop faible pour que je puisse la mesurer, mais je suppose qu’elle est de l’ordre du courant de fuite de l’alimentation Mean Well (&lt; 0.25 mA d’après le fabricant).\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#projet",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#projet",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "",
    "text": "Commande d’un relai bistable qui doit commuter du 240 V avec une tension de commande de 9V très instable. Pour limiter les effets de cette instabilité, le système doit être temporisé, c’est-à-dire que dès que la première impulsion de commande est détectée, le relai doit s’ouvrir et rester ouvert pendant un temps défini (60 s dans ce projet), même si la tension de commande disparait. La temporisation est remise à zéro à chaque changement d’état de la commande. La détection de la commande 9 V et la temporisation sont réalisées avec un Arduino Pro Mini (ATmega 328p, 3.3V, horloge 8MHz interne).\nCette commande à relai est utilisée pour alimenter un lit électrique avec commande 9 V dans les mains de l’utilisateur. L’idée est d’amener le 240 V jusqu’au lit uniquement quand l’utilisateur actionne les moteurs. Ainsi il ne passe pas ses nuits avec du 240 V dans le dos. D’origine, le lit était livré avec un système à relai qui a cessé de fonctionné, probablement à cause de l’instabilité de la tension de commande. Et comme ce modèle n’existe plus depuis belle lurette, j’ai décidé d’en construire un nouveau.\n\nCe circuit est conçu pour consommer le moins possible puisqu’il est branché 24/24, mais utilisé que quelques secondes par jour. Pour cela, l’Arduino est mis en veille lorsque le relais est ouvert et consomme moins de 100 µA. La consommation totale du circuit est trop faible pour que je puisse la mesurer, mais je suppose qu’elle est de l’ordre du courant de fuite de l’alimentation Mean Well (&lt; 0.25 mA d’après le fabricant)."
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#matériel",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#matériel",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "Matériel",
    "text": "Matériel\n\nAlimentation Mean Well, IRM-03-3.3, 3.3V, PCB\n\nSpécifications (PDF)\n\nRelais de puissance pour circuits imprimés 3 VDC 400 mW, ADW1203W, Panasonic\n\nSpécifications (PDF)\n\nTransistor NPN BC337, Spécifications (PDF)\nVeroboard, Carte de laboratoire Papier bakélisé au phénol FR2, 710-2, Rademacher\nDiode 1N4004 400 V 1A DO-41\nOptocoupleur SFH620A DIP DIP-4\n\nSpécifications (PDF)\n\nRelai solid state (pour le tout premier proto)\nBoitier plastique\n\nBoitier plastique dimensions 1\nBoitier plastique dimensions 2\nOnshape 1\nOnshape 2\n\nPresse-étoupes\nForêts à étage (pour la découpe des passages des presse-étoupes)\nArduino Pro Mini\nInterface clone FTDI (je déconseille ce modèle car il envoie du 5 V en mode 3.3 V, mais pour l’Arduino Pro Mini, ça n’a pas de conséquence)\nBorniers\nConnecteurs 3 pôles\nConnecteurs 2 pôles (plus disponible)"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#programme",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#programme",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "Programme",
    "text": "Programme\n\nhttps://github.com/NicHub/ouilogique-Arduino/blob/master/relai-bistable-commande-tension/relai-bistable-commande-tension.ino\n\n\nPour la programmation de l’Arduino Pro Mini dans l’IDE Arduino, voir https://ouilogique.com/arduino-pro-mini/"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#schéma-électrique",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#schéma-électrique",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "Schéma électrique",
    "text": "Schéma électrique\n{: width=“90%” }"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#montage-final-avec-pcb",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#montage-final-avec-pcb",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "Montage final avec PCB",
    "text": "Montage final avec PCB\nJ’ai designé le PCB sur KiCad et je l’ai fait fabriquer chez SeeedStudio.\n{:style=“width:60%;”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%”}\n{:style=“width:100%; margin-top: 50px;”}"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#prototype-sur-veroboard",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#prototype-sur-veroboard",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "Prototype sur veroboard",
    "text": "Prototype sur veroboard\n\nPour diminuer la consommation d’énergie, j’ai dessoudé la LED verte sur l’Arduino Pro Mini qui indique qu’il est alimenté.\n\n\nLes optocoupleurs SFH620A que j’ai reçus n’ont pas l’indication de la broche 1 sur le boitier. Cette broche se trouve en haut à gauche quand on tient la puce de façon à pouvoir lire le texte sur le dos du boitier normalement.\n\n\nLes broches du relai Panasonic ADW1203W ne sont pas au pas de 2.54 mm. J’ai dû souder des fils aux broches et les plier pour pouvoir souder le tout sur le veroboard.\n\n\n\n\nPrototype sur veroboard commande relai bistable avec Arduino Pro Mini\n\n\n\n\n\nPrototype sur veroboard commande relai bistable avec Arduino Pro Mini\n\n\n\n\n\nPrototype sur veroboard commande relai bistable avec Arduino Pro Mini\n\n\n\n\n\nPrototype sur veroboard commande relai bistable avec Arduino Pro Mini\n\n\n\n\n\nPrototype sur veroboard commande relai bistable avec Arduino Pro Mini"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#prototype-sur-breadboard",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#prototype-sur-breadboard",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "Prototype sur breadboard",
    "text": "Prototype sur breadboard\nAvec un relai bistable au lieu des relais solid state.\n\n\n\nPrototype sur breadboard commande relai bistable avec Arduino Pro Mini"
  },
  {
    "objectID": "posts/2017-04-14-relai-bistable-commande-tension/index.html#tout-premier-prototype-dans-une-boîte-en-carton",
    "href": "posts/2017-04-14-relai-bistable-commande-tension/index.html#tout-premier-prototype-dans-une-boîte-en-carton",
    "title": "Commande d’un relai bistable 240 V avec un Arduino Pro Mini",
    "section": "Tout premier prototype dans une boîte en carton…",
    "text": "Tout premier prototype dans une boîte en carton…\nLe tout premier prototype était basé sur un Arduino UNO avec deux relais solid state, un pour la phase et l’autre pour le neutre. J’ai préféré la solution avec relai bistable pour le deuxième proto (ci-dessus), pour assurer la séparation galvanique. Le relai bistable a aussi l’avantage de ne consommer que lors des commutations. Comme il ne commute que la phase, j’ai utilisé un cordon 240 V avec une prise à 3 broches pour être sûr que c’est la phase qui est connectée au relai (et pas le neutre).\n\n\n\nPrototype sur veroboard commande relai solid state avec Arduino UNO"
  },
  {
    "objectID": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html",
    "href": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html",
    "title": "Commande d’une matrice 32×32 avec un MSP430",
    "section": "",
    "text": "ouilogique.com\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#référence-de-la-matrice-sur-aliexpress",
    "href": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#référence-de-la-matrice-sur-aliexpress",
    "title": "Commande d’une matrice 32×32 avec un MSP430",
    "section": "Référence de la matrice sur AliExpress",
    "text": "Référence de la matrice sur AliExpress\n\nhttps://fr.aliexpress.com/item/1677389664.html"
  },
  {
    "objectID": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#launchpad",
    "href": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#launchpad",
    "title": "Commande d’une matrice 32×32 avec un MSP430",
    "section": "Launchpad",
    "text": "Launchpad\nLaunchpad-MSP430 rev 1.5, voir le brochage ici : https://ouilogique.com/blog/pinouts/index.html#pinout-launchpad-msp430"
  },
  {
    "objectID": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#brochage",
    "href": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#brochage",
    "title": "Commande d’une matrice 32×32 avec un MSP430",
    "section": "Brochage",
    "text": "Brochage\nLe brochage est décrit au début du programme ci-dessous.\nImage du connecteur sur Adafruit.com{:target=“_blank”}\n{:height=“438px” width=“300px”}\n\n\n\nouilogique.com"
  },
  {
    "objectID": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#article-sur-adafruit",
    "href": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#article-sur-adafruit",
    "title": "Commande d’une matrice 32×32 avec un MSP430",
    "section": "Article sur Adafruit",
    "text": "Article sur Adafruit\n\nhttps://learn.adafruit.com/32x16-32x32-rgb-led-matrix?view=all"
  },
  {
    "objectID": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#brochage-des-différents-connecteurs-de-matrices",
    "href": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#brochage-des-différents-connecteurs-de-matrices",
    "title": "Commande d’une matrice 32×32 avec un MSP430",
    "section": "Brochage des différents connecteurs de matrices",
    "text": "Brochage des différents connecteurs de matrices\nwww.ec086.com/Technical_support.html"
  },
  {
    "objectID": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#programme",
    "href": "posts/2015-09-11-commande_matrice_32x32_avec_msp430/index.html#programme",
    "title": "Commande d’une matrice 32×32 avec un MSP430",
    "section": "Programme",
    "text": "Programme\nLe programme ci-dessous m’a été gracieusement transmis par Pierre-Yves Rochat. La seule chose que j’ai modifiée est la description du brochage pour qu’elle corresponde à ma matrice. Voir l’article d’Adafruit ci-dessus au sujet des différentes descriptions de brochage.\n \n// Brochage de la matrice (HUB75)\n\n//     (P2.0) |  R0 [ 1]         [ 2] G0  | (P2.2)\n//     (P2.4) |  B0 [ 3]         [ 4]     | (GND)\n//     (P2.1) |  R1 [ 5]         [ 6] G1  | (P2.3)\n//     (P2.5) |  B1 [ 7]         [ 8]     | (GND)\n//     (P1.6) |   A [ 9]         [10] B   | (P1.7)\n//      (XIN) |   C [11]         [12] D   | (XOUT)\n//     (P1.1) | CLK [13]         [14] STB | (P1.2)\n//     (P1.3) |  OE [15]         [16]     | (GND)\n\n\n\n// Afficheur 32 x 32 RGB\n// Utilisation en monochrome, 1 bit par couleur par pixel\n//-------------------------------------------------------\n// Exemple : lancer de drapeau...\n// (2015) Pierre-Yves Rochat, pyr@pyr.ch\n\n// Définitions matérielles :\n//==========================\n\n\n// Données des couleurs :\n#define R1On P2OUT |= (1&lt;&lt;0)\n#define R1Off P2OUT &=~(1&lt;&lt;0)\n#define G1On P2OUT |= (1&lt;&lt;2)\n#define G1Off P2OUT &=~(1&lt;&lt;2)\n#define B1On P2OUT |= (1&lt;&lt;4)\n#define B1Off P2OUT &=~(1&lt;&lt;4)\n\n#define R2On P2OUT |= (1&lt;&lt;1)\n#define R2Off P2OUT &=~(1&lt;&lt;1)\n#define G2On P2OUT |= (1&lt;&lt;3)\n#define G2Off P2OUT &=~(1&lt;&lt;3)\n#define B2On P2OUT |= (1&lt;&lt;5)\n#define B2Off P2OUT &=~(1&lt;&lt;5)\n\n// Données des lignes :\n#define AOn P1OUT |= (1&lt;&lt;6)\n#define AOff P1OUT &=~(1&lt;&lt;6)\n#define BOn P1OUT |= (1&lt;&lt;7)\n#define BOff P1OUT &=~(1&lt;&lt;7)\n#define COn P2OUT |= (1&lt;&lt;6)\n#define COff P2OUT &=~(1&lt;&lt;6)\n#define DOn P2OUT |= (1&lt;&lt;7)\n#define DOff P2OUT &=~(1&lt;&lt;7)\n\n// Signaux de contrôle :\n#define ClockHaut P1OUT |= (1&lt;&lt;1)\n#define ClockBas P1OUT &=~(1&lt;&lt;1)\n\n#define LatchHaut P1OUT |= (1&lt;&lt;2)\n#define LatchBas P1OUT &=~(1&lt;&lt;2)\n\n#define OeHaut P1OUT |= (1&lt;&lt;3)\n#define OeBas P1OUT &=~(1&lt;&lt;3)\n\nvoid SetABCD(uint16_t ligne) {\n  if (ligne&1) AOn; else AOff;\n  if (ligne&2) BOn; else BOff;\n  if (ligne&4) COn; else COff;\n  if (ligne&8) DOn; else DOff;\n}\n\n// Définition d'une matrice de 32 lignes de 32 points, 3 couleurs :\n#define MAX_X 32\n#define MAX_Y 32\n#define TAILLE_MOT 16\n#define LG_MATRICE_1COUL MAX_X * MAX_Y / TAILLE_MOT\n#define NB_COUL 3 // Rouge-Vert-Bleu\n#define LG_MATRICE LG_MATRICE_1COUL * NB_COUL\nuint16_t Matrice [LG_MATRICE];\n\n// Routine de balayage :\n//----------------------\nvoid BalayeMatrice(uint16_t nbScan) {\n  uint16_t b, i, rouge, vert, bleu, n;\n  uint32_t masque;\n  for (n=0; n&lt;nbScan; n++) {\n    for (i=0; i&lt;LG_MATRICE_1COUL/2; i++) {\n      SetABCD(i&gt;&gt;1);\n      masque = 1;\n      for (b=0; b&lt;TAILLE_MOT; b++) {\n        rouge = i; vert = i + LG_MATRICE_1COUL;  bleu = vert + LG_MATRICE_1COUL;\n        if (Matrice[rouge] & masque) R1On; else R1Off;\n        if (Matrice[vert] & masque) G1On; else G1Off;\n        if (Matrice[bleu] & masque) B1On; else B1Off;\n\n        if (Matrice[rouge + ((MAX_Y / 2) * MAX_X / TAILLE_MOT)] & masque) R2On; else R2Off;\n        if (Matrice[vert + ((MAX_Y / 2) * MAX_X / TAILLE_MOT)] & masque) G2On; else G2Off;\n        if (Matrice[bleu + ((MAX_Y / 2) * MAX_X / TAILLE_MOT)] & masque) B2On; else B2Off;\n        ClockHaut;\n        masque = masque &lt;&lt; 1;\n        ClockBas;\n      }\n      if (i & 1) {\n        LatchBas; LatchHaut;\n        OeBas;\n        delayMicroseconds(200);\n        OeHaut;\n        // delayMicroseconds(100);\n      }\n    }\n  }\n}\n\n#define NOIR 0\n#define ROUGE 1\n#define VERT 2\n#define BLEU 4\n#define BLANC ROUGE+VERT+BLEU\n\nuint16_t couleur; // Variable globale pour la couleur\n\n// Adaptation de la géométrie :\n//-----------------------------\nuint16_t CalculeIndex(int16_t x, int16_t y) {\n  uint16_t index;\n  // permutation des y2 et y3 :\n  uint16_t yy = y;\n  if (y & (1&lt;&lt;2)) yy |= (1&lt;&lt;3); else yy&=~(1&lt;&lt;3);\n  if (y & (1&lt;&lt;3)) yy |= (1&lt;&lt;2); else yy&=~(1&lt;&lt;2);\n\n  index = (yy&lt;&lt;1) | (x&gt;&gt;4); // 5 bits : y4 y3 y2 y1 y0 x4\n  return index;\n}\n\nuint16_t CalculeNoBit(int16_t x, int16_t y) {\n  uint16_t noBit;\n  noBit = x & 0xF; // 4 bits : x4 x3 x2 x1 x0\n  return noBit;\n}\n\nvoid AllumePoint(int16_t x, int16_t y) {\n  // tient compte de la variable globale couleur\n  uint16_t index = CalculeIndex(x, y);\n  uint16_t noBit = CalculeNoBit(x, y);\n  if ((x&gt;=0) && (x&lt;MAX_X) && (y&gt;=0) && (y&lt;MAX_Y)){\n    if (couleur & ROUGE) {\n      Matrice[index] |= (1&lt;&lt;noBit);\n    } else {\n      Matrice[index] &=~(1&lt;&lt;noBit);\n    }\n    if (couleur & VERT) {\n      Matrice[index + LG_MATRICE_1COUL] |= (1&lt;&lt;noBit);\n    } else {\n      Matrice[index + LG_MATRICE_1COUL] &=~(1&lt;&lt;noBit);\n    }\n    if (couleur & BLEU) {\n      Matrice[index + (LG_MATRICE_1COUL * 2)] |= (1&lt;&lt;noBit);\n    } else {\n       Matrice[index + (LG_MATRICE_1COUL * 2)] &=~(1&lt;&lt;noBit);\n    }\n  }\n}\n\n// Primitives de dessin :\n//-----------------------\nvoid EteintPoint(int16_t x, int16_t y) {\n  uint16_t coul = couleur;\n  couleur = NOIR;\n  AllumePoint(x, y);\n  couleur = coul;\n}\n\nvoid EffaceMatrice() { // met tous les points à 0\n  int16_t x, y;\n  for (y=0; y&lt;MAX_Y; y++) {\n    for (x=0; x&lt;MAX_X; x++) {\n      EteintPoint(x, y);\n    }\n  }\n}\n\nvoid DroiteHorizontale (int16_t x, int16_t y, int16_t lg) {\n  uint16_t i;\n  for (i=0; i&lt;lg; i++) {\n    AllumePoint (x+i, y);\n  }\n}\n\nvoid DroiteVerticale (int16_t x, int16_t y, int16_t lg) {\n  uint16_t i;\n  for (i=0; i&lt;lg; i++) {\n    AllumePoint (x, y+i);\n  }\n}\n\n// Interpréteur de commandes graphiques :\n//=======================================\n\n#define DrH 0x30 // + dx (sur 4 bits) : droite horizontale, depuis le curseur courant\n#define DrV 0x40 // + dy (sur 4 bits) : droite verticale, depuis le curseur courant\n#define PlusX 0x50 // + dx (sur 4 bits) : avance le curseur en X\n#define PlusY 0x60 // + dy (sur 4 bits) : avance le curseur en Y\n#define MoinsX 0x70 // + dx (sur 4 bits) : recule le cureur en X\n#define MoinsY 0x80 // + y (sur 4 bits) : recule le curseur en Y\n#define Repete 0x90 // + 4 bits : préfixe de répétition pour l'instruction suivante (souvent un call)\n#define Delai 0xA0 // + 4 bits : Attente, valeur exposant de 2\n#define SetAccu 0xB0 // + 4 bits : Charge l'accumulateur (utilisé pour Couleur, à compléter)\n#define Label 0xC0 // + 5 bits (32 routines max)\n#define Call 0xE0 // + 5 bits\n\n#define Fin 0 // fin du programme\n#define Vide 1 // efface l'écran\n#define Ret 2 // retour de sous-routine (saut à l'adresse sur la pile)\n#define Origine 3 // place le curseur à 0,0\n#define ZeroX 4 // met à zéro X\n#define Couleur 5 // détermine la couleur, selon la valeur de l'accumulateur\n#define Masque 0x9\n#define InvMasque 0xA // inverse le masque courant\n#define SetDelai 0xB // définit du délai utilisé entre l'affichage de chaque point dses droites\n#define SetDelaiDef 0xC // définit la valeur du délai 0\n#define Effet 0xD\n#define Libre2 0xE // instructions non utilisées\n#define Libre1 0xF\n\n// Label des routines :\n#define Croix7x7 1\n#define Croix7x7plusDel 2\n#define Croix7x7passeX 3\n#define Croix7x7Tourne 4\n#define CadreCroix23 5\n#define CadreCroix4 15\n#define CadreCroix5 6\n#define CroixGrandit 7\n#define CadreEtCroix 16\n#define DroitesArrivent 13\n#define CadreSimpleCarre 14\n#define Caducee 8\n#define CadreTrait 20\n#define CadreTraitX4 18\n#define DroiteHori 9\n#define DroiteVert2P 10\n#define DroitesHoriDescendent 11\n#define DroitesVertDeGauche 12\n#define TeteFleche 21\n#define LangueSerpent 19\n#define CadreTrait3 22\n#define CadreTourneVite 23\n\n// Programme :\nconst uint16_t Prog [] = {\n  Label+Croix7x7, // Affiche une croix 7x7 (1/4 de la surface), curseur courant\n  PlusX+2,\n  DrH+2, PlusY+1, MoinsX+2,\n  DrH+2, PlusY+1, MoinsX+4,\n  DrH+6, PlusY+1, MoinsX+6,\n  DrH+6, PlusY+1, MoinsX+6,\n  DrH+6, PlusY+1, MoinsX+4,\n  DrH+2, PlusY+1, MoinsX+2,\n  DrH+2, MoinsY+6, MoinsX+4,\n  Ret,\n\n  Label+Croix7x7plusDel, // Afficheur une croix 7x7, déplace le curseur en X et attend 2\n  Vide, Call+Croix7x7, PlusX+1, Delai+2, Ret,\n\n  Label+Croix7x7passeX, // Fait passer une croix X\n  ZeroX, MoinsX+8, Repete+12, Call+Croix7x7plusDel,\n  Repete+12, Call+Croix7x7plusDel, Vide, Delai+6, PlusY+2, Ret,\n\n  Label+Croix7x7Tourne, // Fait tourner une croix 7x7 au 4 coins du carré\n  Origine, Call+Croix7x7, Delai+6,\n  PlusX+9, Call+Croix7x7, Delai+6,\n  PlusY+9, Call+Croix7x7, Delai+6,\n  MoinsX+9, Call+Croix7x7, Delai+7,\n  SetAccu+BLEU, Couleur,\n  Origine,\n  Call+Croix7x7, Delai+6,\n  PlusX+9, Call+Croix7x7, Delai+6,\n  PlusY+9, Call+Croix7x7, Delai+6,\n  MoinsX+9, Call+Croix7x7, Delai+7,\n  SetAccu+VERT, Couleur,\n  Ret,\n\n  Label+CadreCroix23, // Cadre de croix, largeur 2 et 3\n  Origine, PlusX+7, PlusY+3, DrV+9, MoinsY+9, PlusX+1, DrV+9,\n  MoinsY+5, MoinsX+5, DrH+9, MoinsX+9, PlusY+1, DrH+9, Delai+6,\n  Origine, PlusX+6, PlusY+2, DrV+11, DrH+3, MoinsY+11, DrV+11, MoinsX+3, MoinsY+11, DrH+3,\n  Origine, PlusY+6, PlusX+2, DrH+11, DrV+3, MoinsX+11, DrH+11, MoinsY+3, MoinsX+11, DrV+3, Delai+6,\n  Ret,\n\n  Label+CadreCroix4, // Cadre de croix, largeur 4\n  Origine, PlusX+5, PlusY+1, DrV+13, DrH+5, MoinsY+13, DrV+13, MoinsX+5, MoinsY+13, DrH+5,\n  Origine, PlusY+5, PlusX+1, DrH+13, DrV+5, MoinsX+13, DrH+13, MoinsY+5, MoinsX+13, DrV+5, Delai+6,\n  Ret,\n\n  Label+CadreCroix5, // Cadre de croix, largeur 5\n  Origine, PlusX+4, DrV+15, DrH+7, MoinsY+15, DrV+15, MoinsX+7, MoinsY+15, DrH+7,\n  Origine, PlusY+4, DrH+15, DrV+7, MoinsX+15, DrH+15, MoinsY+7, MoinsX+15, DrV+7, Delai+7,\n  Ret,\n\n  Label+CroixGrandit, // Croix grandit\n  Call+CadreCroix23, Call+15, Call+6, SetAccu+ROUGE, Couleur, Call+CadreCroix23, Call+15, Delai+8,\n  SetAccu+VERT, Couleur, Vide, Delai+6,\n  Ret,\n\n  Label+LangueSerpent, // langue du serpent\n  SetAccu+NOIR, Couleur, DrH+0, SetAccu+VERT, Delai+6, Couleur, DrH+0, Ret,\n\n  Label+Caducee, // caducée\n  Origine, PlusY+4, PlusX+2, DrH+11,\n  PlusY+1, MoinsX+9, DrH+7,\n  PlusY+1, MoinsX+5, DrH+3,\n  PlusY+8, MoinsX+3, DrH+3,\n  PlusY+1, MoinsX+5, DrH+7,\n  MoinsY+8, MoinsX+4, DrV+6,\n  MoinsY+6, PlusX+1, DrV+6,\n   Delai+6, SetAccu+BLEU, Couleur, SetAccu+3, SetDelai,\n  PlusX+2, PlusY+1, DrH+0, MoinsY+1, DrH+0, MoinsY+1, MoinsX+1, DrH+0, Delai+4,\n  MoinsY+1, MoinsX+3, DrH+0, MoinsY+1, MoinsX+1, DrH+0,\n  MoinsY+1, DrH+0, MoinsY+1, PlusX+1, DrH+0, Delai+4,\n  PlusX+3, DrH+1,\n   MoinsY+1, PlusX+1, DrH+0, MoinsY+1, DrH+0, Delai+4,\n  MoinsY+3, DrH+0, MoinsY+1, MoinsX+1, DrH+0,\n  MoinsY+1, MoinsX+1, DrH+0, MoinsX+1, DrH+0, MoinsX+1, DrH+0,\n  SetAccu+0, SetDelai, MoinsX+2, DrH+1, MoinsX+1, PlusY+1, DrH+1,\n  SetAccu+6, SetDelai, MoinsX+2, PlusY+1, DrH+0,\n  Repete+5, Call+LangueSerpent, // langue\n  SetAccu+0, SetDelai, Vide, Delai+6,\n  Ret,\n\n  Label+DroiteHori, // droite horizontale\n  SetAccu+NOIR, Couleur, DrH+15, MoinsX+15, PlusY+1,\n  SetAccu+VERT, Couleur, DrH+15, MoinsX+15, Delai+1,\n  Ret,\n\n  Label+DroiteVert2P, // droite verticale (en 2 parties)\n  SetAccu+NOIR, Couleur, DrV+4, PlusY+7, DrV+4, MoinsY+15, PlusX+1,\n  SetAccu+VERT, Couleur, DrV+4, PlusY+7, DrV+4, MoinsY+15, Delai+1,\n  Ret,\n\n  Label+DroitesHoriDescendent, // droites horizontales qui descendent\n  Repete+8, Call+DroiteHori, MoinsY+9, Ret,\n\n  Label+DroitesVertDeGauche, // droites verticales qui viennent de la gauche\n  Repete+8, Call+DroiteVert2P, MoinsX+9, Ret,\n\n  Label+DroitesArrivent, // Croix composée par des droites qui arrivent\n  Origine, PlusY+2,\n  Repete+6, Call+DroitesHoriDescendent,\n  Origine, PlusX+2,\n  Repete+6, Call+DroitesVertDeGauche, Delai+8, SetAccu+ROUGE, Couleur,\n  Call+CadreCroix23, SetAccu+VERT, Couleur, Delai+8, Vide, Ret,\n\n  Label+CadreSimpleCarre, // Cadre simple du carré\n  Origine, DrH+15, DrV+15,\n  Origine, DrV+15, DrH+15,\n  Ret,\n\n  Label+CadreEtCroix, // cadre et croix\n  SetAccu+1, SetDelai, Call+CadreCroix23, Call+CadreSimpleCarre, Delai+8,\n  SetAccu+BLEU, Couleur, Call+CadreSimpleCarre, Delai+8, SetAccu+VERT, Couleur,\n  Vide,\n  Ret,\n\n  Label+CadreTraitX4, // Cadre traitillé x4\n  SetAccu+1, Masque, Call+CadreTrait, Call+CadreTrait, Call+CadreTrait, Call+CadreTrait, Ret,\n\n  Label+CadreTrait, // Cadre traitillé\n  Origine, DrH+15,\n  InvMasque, DrV+15,\n  Origine, InvMasque, DrV+15,\n  InvMasque, DrH+15,\n  Delai+5,\n  Ret,\n\n  // à terminer...\n  Label+TeteFleche, // tête de flèche et avance\n  SetAccu+VERT, Couleur, DrV+8, DrH+8, MoinsX+9, MoinsY+7, Delai+6,\n  DrV+8, DrH+8, MoinsX+9, MoinsY+7,\n  SetAccu+NOIR, Couleur, PlusX+3, MoinsY+3,  DrV+4, PlusY+4, PlusX+4, DrH+4, MoinsX+10, MoinsY+8,\n  Delai+7,\n  Ret,\n\n  Label+CadreTrait3,\n  Origine, SetAccu+3, Masque, DrH+15, DrV+15, SetAccu+4, Masque, Origine, DrV+15, DrH+15, Delai,\n  Origine, SetAccu+4, Masque, DrH+15, DrV+15, SetAccu+3, Masque, Origine, DrV+15, DrH+15, Delai,\n  Origine, SetAccu+5, Masque, DrH+15, DrV+15, SetAccu+5, Masque, Origine, DrV+15, DrH+15, Delai,\n  SetAccu+0, Masque,\n  Ret,\n\n  Label+CadreTourneVite,\n  Repete+15, Call+CadreTrait3,\n  Ret,\n\n  // programme principal :\n  Vide,\n  Repete+4, Call+CroixGrandit, // Croix grandit\n  Vide, Repete+4, Call+Croix7x7Tourne, Vide, // 4 croix tournent\n  Repete+3, Call+CadreEtCroix, Vide, Delai+7, SetAccu+0, SetDelai, // Cadre et croix\n  Origine, Repete+5, Call+Croix7x7passeX, // Croix passe\n  // Call+CadreCroix23, SetAccu+2, SetDelaiDef, Repete+8, Call+CadreTourneVite, Vide, Delai+7,\n  Origine, Repete+3, Call+DroitesArrivent, Delai+7, Vide, Delai+6, // Droites qui arrivent\n  Repete+3, Call+Caducee,  Vide, Delai+6,  // caducée\n  // Call+CadreCroix23, Repete+15, Call+CadreTraitX4, Vide, Delai+6, SetAccu+0, Masque,\n  // Vide, Origine, PlusX+8, Repete+7, Call+TeteFleche, Delai+7, Vide, Delai+8,\n  Fin\n};\n\nconst uint16_t TableDelais[] = {\n  1, 2, 3, 5, 9, 15, 25, 40, 70, 120, 180, 255\n};\n\n// Accès par les coordonnées X et Y :\n// Variables globales, pour gagner de la place...\nint DelaiPoint; // attente entre chaque point dessiné\nunsigned int MasquePoints; // masque de dessin\nunsigned int PointeurMasque;\nunsigned int X, Y;\n\nvoid SetXyMasque () {\n  AllumePoint(X*2, Y*2); AllumePoint(X*2+1, Y*2);\n  AllumePoint(X*2, Y*2+1); AllumePoint(X*2+1, Y*2+1);\n}\n\n\nint Pile [10]; // stack pour l'adresse de retour et le comptage courant\n\nvoid Interprete () { // version avec plusieurs switch, selon la longueur de l'op-code\n  int pc; // compteur de programme\n  int sp; // pointeur de pile (qui monte)\n  pc=0; sp=0;\n  unsigned int Accu = 0; // accumulateur, pour le passage des valeurs\n  unsigned int DelaiDef = 0; //délai par défaut (valeur 0)\n  unsigned char instr; // instruction en cours\n  unsigned char instr04, instr05; // paramètres (4 et 5 bits à droite)\n  int nb = 1; // compteur des répétitions\n  int i; // pour les droites\n  MasquePoints = 0xFFFF; // pas de masque actif\n  while (Prog[pc]!=Fin) {\n    instr = Prog[pc]; // lecture de l'instruction\n    PointeurMasque = 1; // (pour les droites seulement, mais ne gène pas ici)\n    instr05 = instr & 0x1F; // paramètre sur 5 bits\n    instr04 = instr & 0x0F; // paramètres sur 4 bits\n    switch (instr) { // décodage des instructions sans paramètres\n      case Vide : EffaceMatrice(); break;\n      case Ret : pc = Pile[--sp];  nb = Pile[--sp]; break;\n      case Origine : Y = 0;  // X = 0; break; astuce : pas de break\n      case ZeroX : X = 0; break;\n      case Couleur : couleur = Accu & 7; break; // Couleur sur 3 bits\n      case Masque :\n        if (Accu==0) { MasquePoints = 0xFFFF; }\n        if (Accu==1) { MasquePoints = 0x5555; }\n        if (Accu==2) { MasquePoints = 0xAAAA; }\n        if (Accu==3) { MasquePoints = 0xB6DB; } // 1011 0110 1101 1011\n        if (Accu==4) { MasquePoints = 0xDB6D; } // 1101 1011 0110 1101\n        if (Accu==5) { MasquePoints = 0x6DB6; } // 0110 1101 1011 0110\n        if (Accu==6) { MasquePoints = 0x0000; }\n        break;\n      case InvMasque : MasquePoints = ~MasquePoints; break; // 0xB6DB; break; // 101\n      case SetDelai : DelaiPoint = (1 &lt;&lt; Accu) & (~1); break;\n      case SetDelaiDef : DelaiDef = Accu; break;\n      case Effet : break; // pas implémenté\n      default : break;\n    }\n\n    // Décodage des  instructions avec des paramètres de 4 bits\n    // et 5 bits (double \"case\") (gagne 4 octets...)\n    switch (instr & 0xF0) { // 4 bits de poids fort\n      case Label :\n      case Label + 0x10 :\n        do {\n          pc++;\n        } while ((Prog[pc]!=Fin) && (Prog[pc]!=Ret));\n        break;\n      case Call :\n      case Call + 0x10 :\n        Pile [sp++] = nb;\n        Pile [sp++] = pc;\n        pc = 0; // recherche depuis le début\n        while (Prog[pc] != (Label | instr05)) {\n          pc++;\n        }\n        nb = 1;\n        break;\n      case DrH :  // PointeurMasque = 1; // au début\n            for(i=0; i&lt;(instr04+1); i++){ // droite horizontale\n              SetXyMasque(); X++;\n            }\n            X--; break;\n      case DrV :  // PointeurMasque = 1;\n            for(i=0; i&lt;(instr04+1); i++){ // droite verticale\n              SetXyMasque(); Y++;\n            }\n            Y--; break;\n      case PlusX : X+=instr04; break;\n      case PlusY : Y+=instr04; break;\n      case MoinsX : X-=instr04; break;\n      case MoinsY : Y-=instr04; break;\n      case Repete : nb=instr04+1; pc++; break;\n      case Delai :\n        if (instr04==0) { instr04 = DelaiDef; } // valeur par défaut\n        BalayeMatrice(TableDelais[instr04]); break;\n      case SetAccu : Accu = instr04; break;\n      default : break;\n    }\n    if (nb==1) { pc++; } else { nb--; }\n  }\n}\n\n// Programme principal :\n//======================\n\nvoid setup() { // Initialisations :\n  P1DIR = 0xFF; P2DIR = 0xFF; // tous les ports en sortie\n  P1OUT = 0; P2OUT = 0; // toutes les sorties à 0\n  EffaceMatrice(); // met tous les points à 0\n  couleur = VERT;\n}\n\nvoid loop() { // Boucle de l'animation\n  Interprete();\n}"
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html",
    "title": "Tests de modules nRF24L01+",
    "section": "",
    "text": "Les modules présentés sur les photos de cet article ont l’antenne intégrée au PCB. C’est bien pour faire des tests à moindre coût ou si les modules doivent communiquer dans la même pièce. Pour des applications plus robustes, je conseille de choisir un modèle avec antenne.\nModèle avec antenne PCB\n\nhttps://www.banggood.com/10Pcs-NRF24L01-SI24R1-2_4G-Wireless-Power-Enhanced-Communication-Receiver-Module-p-1059602.html?p=0431091025639201412F\n\nModèle avec antenne externe\n\nhttps://fr.aliexpress.com/item/2pcs-lot-Special-promotions-1100-meter-long-distance-NRF24L01-PA-LNA-wireless-modules-with-antenna/32246689488.html\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#matériel",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#matériel",
    "title": "Tests de modules nRF24L01+",
    "section": "",
    "text": "Les modules présentés sur les photos de cet article ont l’antenne intégrée au PCB. C’est bien pour faire des tests à moindre coût ou si les modules doivent communiquer dans la même pièce. Pour des applications plus robustes, je conseille de choisir un modèle avec antenne.\nModèle avec antenne PCB\n\nhttps://www.banggood.com/10Pcs-NRF24L01-SI24R1-2_4G-Wireless-Power-Enhanced-Communication-Receiver-Module-p-1059602.html?p=0431091025639201412F\n\nModèle avec antenne externe\n\nhttps://fr.aliexpress.com/item/2pcs-lot-Special-promotions-1100-meter-long-distance-NRF24L01-PA-LNA-wireless-modules-with-antenna/32246689488.html"
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#caractéristiques-techniques",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#caractéristiques-techniques",
    "title": "Tests de modules nRF24L01+",
    "section": "Caractéristiques techniques",
    "text": "Caractéristiques techniques\nLe module nRF24L01+ est un émetteur-récepteur (= transceiver) RF 2.4 GHz à très basse consommation et très faible coût qui convient particulièrement bien pour les applications DIY. Il fonctionne avec une tension d’alimentation de 3.3 V, mais ses signaux sont tolérants au 5 V et il peut donc être utilisé avec un Arduino Uno par exemple.\nComparé au ZigBee, le nRF24L01+ est moins performant, propose moins de fonctionnalités, mais il est beaucoup moins cher. Il permet de créer des réseaux en étoile et en arbre.\n\nhttps://tmrh20.github.io/RF24Network/Zigbee.html\n\n\nRésumé des caractéristiques\n\nFréquence : 2.4 GHz ISM (Industrial, Scientific and Medical) band\nTension d’alimentation : 1.9 à 3.6 V\nInterface SPI jusqu’à 10 Mb/s (tolérant 5 V)\nVitesses de transmission : 250 kb/s¹, 1 Mb/s et 2 Mb/s\nTrès basse consommation (plusieurs mois, voire années avec une pile bouton ou des piles AA/AAA). 900 nA deep sleep mode. 13.3 mA Radio RX at 2 Mb/s on-air data-rate.\nPeut être utilisé avec des microcontrôleurs très basiques comme l’ATtiny\nPrix inférieur à 1$\nPortée : quelques mètres avec une antenne PCB (modèle présenté ici) et jusqu’à un kilomètre avec une antenne externe (et beaucoup de chance).\nProtocole propriétaire Enhanced ShockBurst™ qui permet la communication bidirectionnelle avec mise en mémoire tampon des paquets de données, confirmation des paquets reçus et retransmission automatique des paquets perdus.\n\n¹ Modèle nRF24L01+ uniquement\n\n\nSpécifications techniques de Nordic Semiconductor\n\nnRF24L01\nnRF24L01+\n\n\n\nNote\nPréférer le modèle nRF24L01+ au modèle nRF24L01 (sans le +). Pour savoir quel est le type d’un module, utiliser le programme d’exemple pingpair_ack.ino, ou le programme printDetails.ino ci-dessous. Une des différences notables est la possibilité de descendre à 250 kb/s pour le modèle +. En plus de ça, Nordic indique dans la spec du nRF24L01+ : Intermodulation and wideband blocking values in nRF24L01+ are much improved in comparison to the nRF24L01 and the addition of internal filtering to nRF24L01+ has improved the margins for meeting RF regulatory standards.\n// printDetails.ino\n// Permet de différencier un nRF24L01 d’un nRF24L01+\n\n#include &lt;SPI.h&gt;\n#include \"nRF24L01.h\"\n#include \"RF24.h\"\n#include \"printf.h\"\n\nRF24 radio( 9, 10 );\n\nvoid setup()\n{\n  Serial.begin( 115200 );\n  printf_begin();\n  radio.begin();\n  radio.printDetails();\n}\n\nvoid loop(){}\n\n\n\nModule nRF24L01+ avec antenne PCB\n\n\nD’après le programme printDetails.ino, ce module acheté chez AliExpress est un nRF24L01+.\n\n\n\nModule nRF24L01+ sur Arduino UNO\n\n\nLe bouton sur les shields est connecté à la broche A0. Le brochage du nRF24 est disponible dans le tableau ci-dessous. Il faut connecter un condensateur électrolytique de 3.3 µF à 10 µF en parallèle sur l’alim (pas visible sur l’image).\n\n\n\nModule nRF24L01+ brochage"
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#brochage",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#brochage",
    "title": "Tests de modules nRF24L01+",
    "section": "Brochage",
    "text": "Brochage\nPour les brochages de l’ATtiny et du RPi, voir https://tmrh20.github.io/RF24/.\n\n\n\nBroche\nnRF24L01+\nArduino UNO\nLaunchpad MSP430\n\n\n\n\n1\nGND\nGND ¹\nGND\n\n\n2\nVCC\n3.3V ¹\nVCC\n\n\n3\nCE\n9 ²\nP2.0\n\n\n4\nCSN\n10 ²\nP2.1\n\n\n5\nSCK\n13\nP1.5\n\n\n6\nMOSI\n11\nP1.7\n\n\n7\nMISO\n12\nP1.6\n\n\n8\nIRQ\n-\nP2.2\n\n\n\n¹ Ajouter un condensateur électrolytique de 3.3 µF à 10 µF en parallèle sur l’alim. ² Les broches pour CE et CSN, peuvent être configurée logiciellement lors de l’initialisation du RF24 avec l’instruction RF24 radio(9,10);. Par défaut, TMRh20 utilise les broches 7 et 8 (RF24 radio(7,8);). Il faut donc modifier les exemples en fonction du choix de brochage."
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#description-des-signaux",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#description-des-signaux",
    "title": "Tests de modules nRF24L01+",
    "section": "Description des signaux",
    "text": "Description des signaux\n\nVoir les pages 11 et 50 de la spec nRF24L01\n\n\n\n\n\n\n\n\n\nSignal\nDirection\nDescription\n\n\n\n\nCE\ninput\nChip EnableCe signal est actif à 1 et sert à configurer le module en mode de réception (RX) ou de transmission (TX)\n\n\nCSN\ninput\nSPI Chip Select\n\n\nSCK\ninput\nSPI Clock\n\n\nMOSI\ninput\nSPI Slave Data Input\n\n\nMISO\noutput\nSPI Slave Data Output, with tri-state option\n\n\nIRQ\noutput\nMaskable interrupt pinCe signal est actif à 0 et contrôlé par trois sources d’interruption masquables"
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#nrf24l01-dans-lide-arduino",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#nrf24l01-dans-lide-arduino",
    "title": "Tests de modules nRF24L01+",
    "section": "nRF24L01+ dans l’IDE Arduino",
    "text": "nRF24L01+ dans l’IDE Arduino\nL’IDE Arduino v.1.6.9 propose d’installer 4 bibliothèques nRF24 écrites par TMRh20. Pour les installer avec l’IDE, aller dans Croquis/Inclure une bibliothèque/Gérer les bibliothèques, chercher nRF24 et installer les 4 bibliothèques de TMRh20.\nJ’indique également les liens directs vers ces bibliothèques ci-dessous. Elles comprennent de nombreux exemples et c’est par là qu’il faut commencer. Elles sont optimisées pour Arduino et pour Raspberry Pi.\nÀ noter que TMRh20 propose d’autres bibliothèques pour le nRF24L01+ sur son compte GitHub.\nÇa vaut aussi la peine de lire cette page sur le blog de TMRh20\n\nGitHub — RF24\nGitHub — RF24Network\nGitHub — RF24Mesh\nGitHub — RF24Ethernet"
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#liens",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#liens",
    "title": "Tests de modules nRF24L01+",
    "section": "Liens",
    "text": "Liens\n\nManiacbug\nManiacbug a un très bon tuto sur le nRF24. Les bibliothèques de TMRh20 sont un fork de celles de Maniacbug.\n\nManiacbug — Tuto nRF24\nManiacbug — Bibliothèque nRF24\n\n\n\nRadiohead\nLa bibliothèque Radiohead de Mike McCauley permet de communiquer via une quantité impressionnante de protocoles différents, y compris le nRF24.\n\nPage d’accueil de la bibliothèque Radiohead\nRadiohead — nRF24\n\n\n\nAutres\nmysensors.org propose plein de recettes pour utiliser le RF24\n\nhttps://www.mysensors.org\n\nEt sur cet autre blog, l’auteur décrit tous les problèmes qu’il a rencontrés. Il insiste beaucoup sur le condensateur à connecter à l’alimentation.\n\narduino-info.wikispaces.com/Nrf24L01-2.4GHz-HowTo"
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#nrf24l01-sur-launchpad-msp430",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#nrf24l01-sur-launchpad-msp430",
    "title": "Tests de modules nRF24L01+",
    "section": "nRF24L01+ sur Launchpad MSP430",
    "text": "nRF24L01+ sur Launchpad MSP430\nJ’ai fait un test rapide sur Launchpad MSP430 et ça fonctionne.\n\nLaunchpad MSP430 — Bibliothèque nRF24\nLaunchpad MSP430 — Tuto nRF24\n\n\n\n\nModule nRF24L01+ sur Launchpad MSP430\n\n\nOn ne voit qu’un Launchpad sur la photo, mais pour les tests, j’en ai préparé deux identiques."
  },
  {
    "objectID": "posts/2016-06-27-tests_nRF24L01+/index.html#nrf24l01-sur-esp8266",
    "href": "posts/2016-06-27-tests_nRF24L01+/index.html#nrf24l01-sur-esp8266",
    "title": "Tests de modules nRF24L01+",
    "section": "nRF24L01+ sur ESP8266",
    "text": "nRF24L01+ sur ESP8266\nÇa marche aussi sur l’ESP8266 12-E et sur le WEMOS V2.\nJ’ai testé avec deux configurations différentes pour le brochage de CSN. Ça fonctionne dans les deux cas, il suffit d’adapter le code en conséquence :\nRF24 radio( CE, CSN ); par exemple : RF24 radio( 0, 2 ); ou RF24 radio( 0, 15 );\n\n\n\nnRF24L01+\nESP8266 12-E\n\n\n\n\nVCC\nVCC\n\n\nGND\nGND\n\n\nCSN\nGPIO 2 (D4) ou GPIO 15 (D8)\n\n\nCE\nGPIO 0 (D3)\n\n\nMOSI\nHMOSI (D7)\n\n\nSCK\nHSCLK (D5)\n\n\nIRQ\n—\n\n\nMISO\nHMISO (D6)\n\n\n\nVoir aussi le brochage de l’ESP8266 12-E\n\nLiens pour l’ESP8266\n\nhttps://www.mysensors.org/build/esp8266_gateway\nhttps://github.com/TMRh20/RF24/issues/125"
  },
  {
    "objectID": "posts/2016-06-07-horloge_cycles_ultradiens/index.html",
    "href": "posts/2016-06-07-horloge_cycles_ultradiens/index.html",
    "title": "Horloge à cycles ultradiens",
    "section": "",
    "text": "Première version avec un bouton poussoir\n\n\n\nHorloge à cycles ultradiens — Arduino Nano\n\n\nDeuxième version avec un encodeur rotatif KY-040\n\nL’encodeur rotatif peut être remplacé par un simple bouton poussoir pour l’instant parce que je n’utilise que cette fonction. J’ai commencé à tester cet encodeur avec le traceur série de l’IDE Arduino et le programme de test se trouve sur mon GitHub. Je modifierai bientôt le programme de l’horloge pour y intégrer un menu que l’on pourra utiliser avec l’encodeur.\n\n\n\n\nHorloge à cycles ultradiens — Arduino Nano\n\n\n\n\nhorloge-cycles-ultradiens-arduino.ino + aTunes.h\n\n\n\nC’est une horloge qui affiche les pourcentages d’attention par cycles d’une heure et demie. On définit la valeur de la constante heureAttentionMax au nombre de secondes du pic d’attention du cycle. Par exemple, si votre cycle a un pic à 7 h 15 (= 26100 s), cela correspond à heureAttentionMax = 26100 % 5400 = 4500 où % est l’opérateur modulo et 5400 est le nombre de secondes dans 1 h 30. La constante heureAttentionMax doit être ajustée manuellement dans le programme.\nL’heure de horloge temps réel DS1307 peut être mise à jour via le port RS232. Comme le programme utilise beaucoup de RAM, j’ai désactivé cette fonctionnalité par défaut. Pour la réactiver, il suffit de changer la valeur de avecSerial false à avecSerial true à la ligne 46 et de recharger le programme sur le microcontrôleur.\n\n\n\n\nLes pullups ont une résistance de 4.7 kΩ.\nLe carillon sonne lorsque le cycle est à 100 %.\nLe bouton connecté à D2 permet d’activer ou de désactiver le carillon.\n\n\n\n\n\nTest d’une horloge temps réel DS1307 I²C\nTest d’un écran OLED 128×64 I²C\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-06-07-horloge_cycles_ultradiens/index.html#version-pour-arduino-nano",
    "href": "posts/2016-06-07-horloge_cycles_ultradiens/index.html#version-pour-arduino-nano",
    "title": "Horloge à cycles ultradiens",
    "section": "",
    "text": "Première version avec un bouton poussoir\n\n\n\nHorloge à cycles ultradiens — Arduino Nano\n\n\nDeuxième version avec un encodeur rotatif KY-040\n\nL’encodeur rotatif peut être remplacé par un simple bouton poussoir pour l’instant parce que je n’utilise que cette fonction. J’ai commencé à tester cet encodeur avec le traceur série de l’IDE Arduino et le programme de test se trouve sur mon GitHub. Je modifierai bientôt le programme de l’horloge pour y intégrer un menu que l’on pourra utiliser avec l’encodeur.\n\n\n\n\nHorloge à cycles ultradiens — Arduino Nano\n\n\n\n\nhorloge-cycles-ultradiens-arduino.ino + aTunes.h\n\n\n\nC’est une horloge qui affiche les pourcentages d’attention par cycles d’une heure et demie. On définit la valeur de la constante heureAttentionMax au nombre de secondes du pic d’attention du cycle. Par exemple, si votre cycle a un pic à 7 h 15 (= 26100 s), cela correspond à heureAttentionMax = 26100 % 5400 = 4500 où % est l’opérateur modulo et 5400 est le nombre de secondes dans 1 h 30. La constante heureAttentionMax doit être ajustée manuellement dans le programme.\nL’heure de horloge temps réel DS1307 peut être mise à jour via le port RS232. Comme le programme utilise beaucoup de RAM, j’ai désactivé cette fonctionnalité par défaut. Pour la réactiver, il suffit de changer la valeur de avecSerial false à avecSerial true à la ligne 46 et de recharger le programme sur le microcontrôleur.\n\n\n\n\nLes pullups ont une résistance de 4.7 kΩ.\nLe carillon sonne lorsque le cycle est à 100 %.\nLe bouton connecté à D2 permet d’activer ou de désactiver le carillon.\n\n\n\n\n\nTest d’une horloge temps réel DS1307 I²C\nTest d’un écran OLED 128×64 I²C"
  },
  {
    "objectID": "posts/2016-06-07-horloge_cycles_ultradiens/index.html#version-pour-esp8266",
    "href": "posts/2016-06-07-horloge_cycles_ultradiens/index.html#version-pour-esp8266",
    "title": "Horloge à cycles ultradiens",
    "section": "Version pour ESP8266",
    "text": "Version pour ESP8266\nLa version pour l’ESP8266 synchronise l’heure de horloge temps réel DS1307 avec un serveur NTP.\n\n\n\nHorloge à cycles ultradiens — ESP8266\n\n\n\nCode source\n\nhttps://github.com/NicHub/ouilogique-ESP8266-Arduino/tree/master/horloge-cycles-ultradiens-esp8266"
  },
  {
    "objectID": "posts/2015-06-12-analyseur_logique_Arduino/index.html",
    "href": "posts/2015-06-12-analyseur_logique_Arduino/index.html",
    "title": "Un analyseur logique Arduino",
    "section": "",
    "text": "Les informations ci-dessous viennent à l’origine d’un tuto qui n’est malheureusement plus en ligne (letsmakerobots.com/node/31422).\nEn résumé, cette solution nécessite deux programmes :\nIl y a un article sur le site de Mouser qui en parle aussi : https://www.mouser.com/blog/arduino-powerful-yet-overlooked-uses\nEt voilà ce que ça donne en action :\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-06-12-analyseur_logique_Arduino/index.html#logiciels-pour-la-visualisation-des-traces",
    "href": "posts/2015-06-12-analyseur_logique_Arduino/index.html#logiciels-pour-la-visualisation-des-traces",
    "title": "Un analyseur logique Arduino",
    "section": "Logiciels pour la visualisation des traces",
    "text": "Logiciels pour la visualisation des traces\nPour l’analyse post-mortem, il y a :\n\nGTKWave\nScansion — Logic Poet (www.logicpoet.com/scansion/)\nEt d’autres sur Wikipedia\n\nLe format d’enregistrement des traces que j’utilise est le VCD (Value Change Dump)"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "",
    "text": "Cet article montre comment configurer un Raspberry de A à Z à l’aide d’un ordinateur standard. Le Raspberry sera donc en mode headless, c’est-à-dire sans clavier, ni souris, ni écran.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#matériel-utilisé-pour-cette-procédure",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#matériel-utilisé-pour-cette-procédure",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Matériel utilisé pour cette procédure",
    "text": "Matériel utilisé pour cette procédure\n\nUn Raspberry Pi modèle 2 (ou plus)\nUne carte SD (32 GB recommandés)\nUn ordinateur standard\nUn routeur (optionnel, on peut connecter le Rpi directement sur le port Ethernet)\nUn câble Ethernet"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#préparation-15-min",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#préparation-15-min",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Préparation (~15 min)",
    "text": "Préparation (~15 min)\n\nN.B. Ce chapitre a été mis a jour en mars 2023"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#choix-de-los",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#choix-de-los",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Choix de l’OS",
    "text": "Choix de l’OS\nAnciennement, l’OS du Raspberry s’appelait Raspbian ce qui était logique puisqu’il est basé sur Debian. On devait le télécharger séparément et l’installer avec un programme qui s’appelait Etcher.\nAujourd’hui, les choses sont un peu différentes. Etcher a été remplacé par Raspberry Pi Imager et on a plus besoin de télécharger l’OS séparément, car c’est le programme qui s’en charge. Il peut être téléchargé ici :\n\nhttps://www.raspberrypi.com/software/\n\nOn a le choix entre plusieurs moutures de l’OS. Celle que je préfère est la version “Raspberry Pi OS (64-bit)”. La raison est que j’ai besoin d’un OS 64 bit pour faire tourner Prince (https://www.princexml.com/). En cas de doute, il vaut mieux choisir l’OS recommandé, c’est-à-dire “Raspberry Pi OS (32-bit)”."
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#choix-du-terminal",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#choix-du-terminal",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Choix du terminal",
    "text": "Choix du terminal\nSi vous êtes sur macOS ou n’importe quel système *nix, le choix est vite fait, il suffit d’utiliser le terminal par défaut. Ça ne veut pas dire qu’il n’y a qu’une possibilité, mais qu’il y a de fortes chances que vous sachiez déjà quel terminal choisir.\nPar contre si vous êtes sur Windows, il y a de fortes chances que vous ne sachiez pas quel terminal choisir. Donc voici quelques possibiltés.\n\nWindows PowerShell (intégré à Windows)\nCOMMAND.COM (cmd) (intégré à Windows)\nMinGW – Git Bash installé avec Git\nCygwin\nPuTTY"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#procédure-dinstallation-30-min",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#procédure-dinstallation-30-min",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Procédure d’installation (~30 min)",
    "text": "Procédure d’installation (~30 min)\n\nSur un ordinateur standard (pas le Raspeberry), télécharger Raspberry Pi Imager et l’installer.\nDans Raspberry Pi Imager, cliquer sur “Système d’exploitation” et sélectionner l’OS de votre choix.\nInsérer une carte SD, cliquer sur “Choisir le stockage” et choisir la carte SD.\nImportant : Cliquer sur la roue dentée et s’assurer que l’option “Activer SSH” est activée.\n\nAnciennement, l’activation de SSH se faisant en créant un fichier vide appelé sshdans le répertoire boot, par exemple avec la commande touch /Volumes/boot/ssh. Ce n’est plus nécessaire aujourd’hui.\n\nCliquer sur “ÉCRIRE”. Entrez votre mot de passe lorsque le dialogue le demande. L’écriture de l’image disque prend environ 10 min avec la vérification (si elle a été sélectionnée dans les préférences). Ces temps peuvent beaucoup varier en fonction de votre matériel.\nÉjecter la carte SD.\nInsérer la carte SD dans le Raspberry éteint.\nConnecter le câble Ethernet.\nBrancher le câble d’alimentation du Raspberry.\nAprès environ 30 secondes, ouvrir un terminal et se connecter au Raspberry avec la commande ssh pi@raspberrypi.local. Le mot de passe par défaut est raspberry. Si SSH renvoie l’erreur “WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!”, c’est parce qu’une entrée existe déjà pour raspberrypi.local dans le fichier ~/.ssh/known_hosts (ou sur Windows %HOMEPATH%\\.ssh\\known_hosts) de l’ordinateur hôte (pas le RPi). Donc pour aller plus loin, il faut supprimer les lignes qui commencent par raspberrypi.local dans le fichier known_hosts."
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#retrouver-un-appareil-sur-le-réseau-local",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#retrouver-un-appareil-sur-le-réseau-local",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Retrouver un appareil sur le réseau local",
    "text": "Retrouver un appareil sur le réseau local\nSi on doit retrouver un Raspberry sur le réseau, la première commande à essayer est ping -c1 raspberrypi.local. Mais si on ne connait pas le nom du Raspberry, alors il faut balayer toutes les adresses possibles (network scan). Il y a deux commandes utiles pour cela, arp et nmap. Sur la commande nmap doit être installée via Homebrew. Pour ceux qui préfèrent les GUI, il y a aussi Zenmap.\narp -a\nnmap -sP 192.168.1.0/24"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#mise-à-jour-de-raspbian",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#mise-à-jour-de-raspbian",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Mise à jour de Raspbian",
    "text": "Mise à jour de Raspbian\nsudo apt-get update --assume-yes\nsudo apt-get upgrade --assume-yes\nsudo apt-get dist-upgrade --assume-yes\nsudo apt-get autoremove --assume-yes\n\nExplications &gt; sources - https://www.lecoindunet.com/difference-apt-update-upgrade-full-upgrade &gt; - https://askubuntu.com/a/527421/949794 &gt; sudo apt-get update : Télécharge les informations des paquets à partir des sources configurées sudo apt-get upgrade : Mets à jour les paquets installés sans en supprimer. sudo apt-get dist-upgrade : Installe les versions candidates des paquets installés en installant ou en supprimant d’autres paquets si nécessaire. sudo apt-get autoremove : Supprime les dépendances qui ne sont plus utilisées."
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#configuration",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#configuration",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Configuration",
    "text": "Configuration\nnano ~/.bash_profile\nCopier-coller les commandes suivantes dans .bash_profile\nPS1=$'\\n\\n\\xf0\\x9f\\x98\\xBA'\"  \\t – \\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\W &gt; \"\nalias ll='ls -lGhF'\nalias la='ll -a'\nalias gs='git status'\nalias lsserial='python3 -m serial.tools.list_ports'\nIP=$(hostname -I | awk '{print $1}')\nalias pyserver='PORT=4000; echo -e \"\\nhttp://localhost:$PORT\"; echo -e \"http://$IP:$PORT\\n\"; /usr/bin/python3 -m http.server $PORT'\nTIMEFORMAT=$'\\nElapsed time: %E'\n\n###\n# Create virtual environment for python3 (once)\n# cd $HOME && python3 -m venv pyenv\n# and activate it (for each terminal)\n##\nVENVPATH=\"$HOME/pyenv/bin/activate\"\nif [[ -f \"$VENVPATH\" ]]; then source \"$VENVPATH\"; fi\n\n# If Byobu is installed, launch it at startup.\n[[ -f /usr/bin/byobu-launch ]] && _byobu_sourced=1 . /usr/bin/byobu-launch 2&gt;/dev/null || true\nsource ~/.bash_profile\nsudo raspi-config\n# Update\n# Advanced Options / Expand filesystem"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#ssh",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#ssh",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "SSH",
    "text": "SSH\nSur l’ordinateur hôte\n# Si le fichier ~/.ssh/id_rsa.pub n’existe pas,\n# il faut le créer avec `ssh-keygen`.\nssh-keygen # Accepter toutes les valeurs par défaut.\ncat ~/.ssh/id_rsa.pub # + Copier le résultat dans le presse-papier.\nSur le RPi\nmkdir -p ~/.ssh\nchmod 700 ~/.ssh\nnano ~/.ssh/authorized_keys # + Coller la clé de l’hôte à la fin du fichier.\nchmod 644 ~/.ssh/authorized_keys"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#permissions-de-fichiers-courants",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#permissions-de-fichiers-courants",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Permissions de fichiers courants",
    "text": "Permissions de fichiers courants\nchmod 700 ~/.ssh\nchmod 644 ~/.ssh/authorized_keys\nchmod 644 ~/.ssh/known_hosts\nchmod 644 ~/.ssh/config\nchmod 600 ~/.ssh/id_rsa\nchmod 644 ~/.ssh/id_rsa.pub\nchmod 600 ~/.ssh/github_rsa\nchmod 644 ~/.ssh/github_rsa.pub\nchmod 600 ~/.ssh/mozilla_rsa\nchmod 644 ~/.ssh/mozilla_rsa.pub"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#selection-des-interfaces-utilisateurs",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#selection-des-interfaces-utilisateurs",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Selection des interfaces utilisateurs",
    "text": "Selection des interfaces utilisateurs\nPar défaut, l’interface graphique est activée et elle consomme beaucoup de ressources. Donc si on ne l’utilise pas, il est conseillé de la désactiver. Malheureusement, lorsqu’elle est désactivée, les disques ne sont pas montés automatiquement lorsqu’on les connecte au RPi.\nsudo raspi-config\n# 1 System Options\n# S5 Boot / Auto Login\n# B2 Console Autologin ou B1 Console"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#vnc",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#vnc",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "VNC",
    "text": "VNC\n\nN.B. Il faut que l’interface graphique soit activée pour que VNC fonctionne (voir § précédent).\n\nsudo raspi-config\n# 3 Interfacing Options / I3 VNC &lt;Yes&gt;.\n\n# Si l’option n’est pas visible, il faut\n# installer VNC au préalable avec la commande :\nsudo apt-get install realvnc-vnc-server realvnc-vnc-viewer\nTélécharger un client VNC pour se connecter au serveur VNC du rPi. Par exemple RealVNC :\n\nhttps://www.realvnc.com/download/viewer/.\n\n\nN. B. Le client VNC installé par défaut sur macOS ne fonctionne pas pour se connecter au serveur VNC du rPI. L’erreur retournée estLe logiciel de l’ordinateur distant semble ne pas être compatible avec cette version de Partage d’écran.bash /System/Library/CoreServices/Applications/Screen\\ Sharing.app"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#enlever-les-programmes-inutiles",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#enlever-les-programmes-inutiles",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Enlever les programmes inutiles",
    "text": "Enlever les programmes inutiles\nEnfin, inutiles pour moi….\ndf -h # Pour voir la capacité de la carte SD\nsudo apt-get purge wolfram-engine\nsudo apt-get purge libreoffice*\nsudo apt-get clean\nsudo apt-get autoremove\ndf -h # Vous venez de libérer 1.1 GB !"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#réinstaller-un-programme-quon-croyait-inutile",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#réinstaller-un-programme-quon-croyait-inutile",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Réinstaller un programme qu’on croyait inutile",
    "text": "Réinstaller un programme qu’on croyait inutile\nsudo apt-get --assume-yes update\nsudo apt-get --assume-yes install wolfram-engine"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#ajouter-quelques-programmes-utiles",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#ajouter-quelques-programmes-utiles",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Ajouter quelques programmes utiles",
    "text": "Ajouter quelques programmes utiles\n\nBYOBU\nByobu (https://www.byobu.org/) est un gestionnaire de fenêtres et un multiplexeur de terminal en mode texte sous licence GPLv3. Il a été conçu à l’origine pour apporter des améliorations élégantes au gestionnaire de fenêtres GNU Screen, par ailleurs fonctionnel, simple et pratique, pour la distribution serveur Ubuntu. Byobu comprend maintenant des profils améliorés, des raccourcis clavier pratiques, des utilitaires de configuration et des notifications d’état du système commutables pour le gestionnaire de fenêtres GNU Screen et le multiplexeur de terminal plus moderne Tmux, et fonctionne sur la plupart des distributions Linux, BSD et Mac. Le code source se trouve sur GitHub : https://github.com/dustinkirkland/byobu\nDans la terminologie de Byobu, une session est une instance de Byobu en cours d’exécution. Une session se compose d’une collection de fenêtres (windows), qui sont essentiellement des sessions shell, et de volets (panes), qui sont des sous-sections de fenêtre.\nsudo apt-get install byobu --assume-yes\nbyobu\n\n# Configurer les options de base en pressant sur F1\n\n# Configurer le raccourci de “l’escape sequence”.\n# Conseil: utiliser la lettre “B”.\nChange escape sequence\n# Configurer le démarrage automatique de Byobu.\nByobu currently does not launch at login (toggle on)\n\n\nRaccourcis clavier\nLes raccourcis claviers sont définis dans le fichier f-keys.tmux (source).\n/usr/share/byobu/keybindings/f-keys.tmux\nSur macOS, la majorité des raccourcis n’est utilisable qu’à travers la touche F12. Donc quand l’aide indique la combinaison C-a, il faut la remplacer par F12.\nPar exemple,\n\nF12 % scinde le volet actuel en deux volets verticaux.\nF12 | scinde le volet actuel en deux volets horizontaux.\n\nLa liste de toutes les fonction F12 est disponible avec la commande F12 ?.\nCi-dessous, la liste des raccourcis autres que F12.\n\n\n\n\nKey\nAction\n\n\n\n\nF1\nconfiguration menu\n\n\nF2\nnew window\n\n\nF3\nprevious window\n\n\nF4\nnext window\n\n\nF5\nrefresh menu bar status notifications\n\n\nF6\ndetach\n\n\nF7\n—\n\n\nF8\nrename window\n\n\nF9\nconfiguration menu\n\n\nF10\n—\n\n\nF11\n—\n\n\nF12\n—\n\n\nctrl-D\nkill window\n\n\n\n\n\nÀ lire\n\nhttps://www.digitalocean.com/community/tutorials/how-to-install-and-use-byobu-for-terminal-management-on-ubuntu-16-04\nhttps://superuser.com/a/818753/508141\n\n\n\n\niPython\npython3 -m pip install ipython\n\n\nTMUX\n\nN.B. Ce chapitre est ici pour référence. Je n’utilise plus Tmux directement, mais à travers Byobu.\n\nsudo apt --assume-yes install tmux\n\ntmux # crée et démarre un nouveau shell\ntmux new -s session_name  # idem mais avec un nom de session\ntmux detach # pour se détacher du shell en cours\n\n# ctrl-B S # liste les shells tmux\n# ctrl-B D # revient au shell principal\n\ntmux ls # liste les shells tmux\ntmux a -t 0 # revient au shell tmux 0\ntmux a # revient au dernier shell utilisé\nexit # quitte et détruit le shell en cours\n\ntmux kill-session -t 0 # détruit une session détachée\n\n# Par défaut, la roulette de la souris fait défiler\n# l’historique des commandes. Pour que la roulette\n# fasse défiler l’écran, il faut éditer le fichier\n# ~/.tmux.conf\nnano ~/.tmux.conf\n# et ajouter le paramètre\nset-option -g mouse on\n# Il ne s’appliquera qu’aux nouveaux shells et pas\n# aux shells existants, mais on peut le faire dans\n# chaque shell individuel avec la commande\ntmux set-option -g mouse on\n# En mode mouse on, il n’est possible de sélectionner\n# du texte. Il faut donc revenir en mode off.\ntmux set-option -g mouse off\n\n\nGNU screen\n\nJe préfère ne pas utiliser GNU screen, mais parfois… on a pas le choix.\n\nsudo apt-get --assume-yes install screen\necho \"shell -$SHELL\" &gt; ~/.screenrc # Pour que screen lise .bash_profile\n\nscreen # Démarre un nouveau shell\n# ctrl-A ctrl-D # revient au shell principal\nscreen -ls # liste des shells\nscreen -r xxxx # xxxx = no du shell que l’on veut activer\n\n# ctrl-A K # arrête le shell en cours\nscreen -X -S xxxx quit # quitte le shell no xxxx\nscreen -X -S xxxx kill # arrête le shell no xxxx\n\n# RS232\npython3 -m serial.tools.list_ports\nscreen /dev/ttyACM0 115200\n# ctrl-A K # pour arrêter la transmission série"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#partager-un-espace-disque-avec-samba",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#partager-un-espace-disque-avec-samba",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Partager un espace disque avec samba",
    "text": "Partager un espace disque avec samba\n\nSource : https://raspberrypihq.com/how-to-share-a-folder-with-a-windows-computer-from-a-raspberry-pi/\n\n\nSur le Raspberry\nInstaller samba\nsudo apt-get --assume-yes install samba samba-common-bin\nÉditer la configuration\nsudo nano /etc/samba/smb.conf\nVérifier la présence des informations suivantes :\nworkgroup = WORKGROUP\nwins support = yes\nÀ la fin du fichier, ajouter les informations suivantes :\n# Source\n# https://raspberrypihq.com/how-to-share-a-folder-with-a-windows-computer-from-a-raspberry-pi/\n[PiShare]\ncomment = Raspberry Pi Share\npath = /home/pi\nbrowseable = yes\nwriteable = yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\npublic = no\nLe flag public = no indique que l’accès en temps qu’invité est désactivé. Si on le change en public = yes, le disque est partagé en lecture seule.\nsudo smbpasswd -a pi # Pour changer le mot de passe.\n\n\nMonter le disque partagé sur macOS\nDans le Finder :\n⌘ K\nsmb://pi@raspberrypi.local\n\n\nMonter le disque partagé sur Windows\nVoir\n\nhttps://support.microsoft.com/fr-ch/help/4026635/windows-map-a-network-drive\n\nOn peu aussi entrer le chemin d’accès au Raspberry au format UNC directement dans la barre d’adresse de l’explorateur Windows (raccourcis Win+E, Ctrl+L).\n\\\\raspberrypi.local\nSi la résolution du nom d’hôte ne fonctionne pas, on peut aussi utiliser l’adresse IP :\n\\\\192.168.1.240\n\n\nInstaller une autre version de Python 3\n\nLes informations de ce chapitre sont passablement obsolètes car les dernières versions de l’OS du rPi intègrent des versions de Python supérieures à 3.6. Donc avant d’installer une nouvelle version de Python 3, il est prudent de vérifier la version installée sur le Raspberry avec la commande\n\npython3 --version\n\nOn peut aussi vérifier la version de l’OS avec la commande\n\ncat /etc/os-release\n\nÉdit du 16 octobre 2019 : Raspbian Buster intègre la version 3.7.3 de Python. Édit du 11 février 2023 : Raspberry Pi OS Bullseye 64 bit intègre la version 3.9.2 de Python.\n\nRaspbian Stretch propose la version 3.5 de Python. Comme Python 3.6 apporte de nouvelles fonctionnalités comme les f-strings et que le module asyncio a été amélioré, je pense que c’est intéressant de l’installer aussi. L’idée est aussi de pouvoir tester le module quart.\nSource : https://liftcodeplay.com/2017/06/30/how-to-install-python-3-6-on-raspbian-linux-for-raspberry-pi/ Les versions de Python disponibles sont téléchargeables à : https://www.python.org/ftp/python/ Temps d’installation : environ 30 min. Cette procédure n’écrase pas les versions de Python existantes.\nCette procédure montre comment installer Python 3.6.7.\n\nJ’ai aussi essayé d’installer la version 3.7.1 et l’installation a réussi, mais malheureusement pip ne fonctionnait pas, donc il m’était impossible d’installer de nouveaux modules.\n\nsudo apt-get --assume-yes install build-essential checkinstall\nsudo apt-get --assume-yes install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\nmkdir ~/temp && cd ~/temp\nwget https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz\nsudo tar xzf Python-3.6.7.tgz\ncd Python-3.6.7\nsudo -s\nTIMEFORMAT='time : %E'\ntime (bash configure && make -j4 altinstall)\nexit\ncd ~ && sudo rm -rf temp\nCréer un lien pour que Python 3.6 soit la version de Python 3 par défaut. Ceci nous permettra d’indiquer le shebang #!/usr/bin/env python3 au début des scripts et de les exécuter avec la commande python3 &lt;nom_du_script.py&gt;.\nwhich python3.6 # /usr/local/bin/python3.6\npython3.6 -V # Python 3.6.7\nsudo ln -sf /usr/local/bin/python3.6 /usr/local/bin/python3\n/usr/bin/env python3 -V # Python 3.6.7\nwhich python3 # /usr/local/bin/python3\nPour installer des modules\n\nSi pip install &lt;module&gt; ne fonctionne pas, on peut utiliser les commandes suivantes :\n\nsudo python3.6 -m pip install --upgrade pip\nsudo python3.6 -m pip install quart\n\n\npicocom\nPicocom est un terminal série.\nsudo apt-get --assume-yes install picocom\n\npicocom -b 115200 -p 1 -c /dev/tty\nPour pouvoir l’utiliser sans être sudoer, il faut que l’utilisateur courant fasse partie du groupe dialout (et peut-être des groupes plugdev et input, je ne suis plus sûr). Il faut redémarrer le rPi pour que le changement soit pris en compte.\nsudo usermod -a -G dialout $USER\nsudo usermod -a -G plugdev $USER\nsudo usermod -a -G input $USER\nsudo reboot\n\n\ntorsocks\nTorsocks permet d’utiliser le réseau Tor en ligne de commande, autrement dit, il permet de “torifier” la ligne de commande.\nsudo apt-get install torsocks --assume-yes\nANS=$(torsocks wget -qO- https://check.torproject.org/api/ip)\necho $ANS\n# {\"IsTor\":true,\"IP\":\"××.××.××.××\"}"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#youtube-dl",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#youtube-dl",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "YouTube-DL",
    "text": "YouTube-DL\npython3 -m pip install --force-reinstall https://github.com/yt-dlp/yt-dlp/archive/master.tar.gz"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#arrêter-ou-redémarrer-un-raspberry",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#arrêter-ou-redémarrer-un-raspberry",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Arrêter ou redémarrer un Raspberry",
    "text": "Arrêter ou redémarrer un Raspberry\nCe n’est pas une bonne idée de juste tirer la prise quand on veut arrêter ou redémarrer son Raspberry. En effet, au bout de quelque temps, le système se retrouve avec un grand nombre de fichiers partiels et probablement illisibles. Si des fichiers importants sont touchés, le Raspberry peut devenir inutilisable.\nDonc pour éteindre un Raspberry, on utilisera une des commandes ci-dessous. La différence entre elles n’est pas aussi évidente qu’il y parait (voir https://unix.stackexchange.com/a/196471/199660). Seule la commande halt éteint la LED rouge d’alimentation, donc je suppose que c’est celle qu’il faut privilégier.\n\nN. B. Attention, aucune de ces commandes ne coupe l’alimentation de la carte ou l’alimentation des ports USB. Donc ce n’est pas une bonne option pour éjecter un disque externe par exemple.\n\nsudo halt\nsudo poweroff\nsudo shutdown -h now --poweroff\nEt pour redémarrer un Raspberry, on utilisera une des commandes suivantes\nsudo reboot\nsudo shutdown -r now"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#lire-un-disque-externe",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#lire-un-disque-externe",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Lire un disque externe",
    "text": "Lire un disque externe\nLorsqu’on connecte un disque externe, il est automatiquement accessible au chemin /media/pi/nom_du_disque. Ce chemin est ausi appelé point de montage. On peut le voir avec la commande ls et accéder aux répertoires avec la commande cd. Dans l’exemple ci-dessous, le disque externe s’appelle LaCie. Ce nom changera avec d’autres fabricants ou si plusieurs disques du même fabricant sont utilisés en même temps. Il faut tenir compte de ce fait lorsqu’on écrit des scripts et des programmes qui utilisent le chemin du point de montage.\nls -l /media/pi/\ncd /media/pi/LaCie"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#éjecter-un-disque-externe",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#éjecter-un-disque-externe",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Éjecter un disque externe",
    "text": "Éjecter un disque externe\n\nN.B. À proprement parler, seuls les médias comme les CD où les bandes peuvent être éjectés. Mais le terme est aussi utilisé pour les autres médias.\n\nÉjecter un média est un peu plus compliqué que de le connecter et l’utiliser. En effet, sur un Raspbery ou n’importe quel système *nix, il faut comprendre trois notions :\n\nLes disques\nLes partitions\nLes points de montage\n\nPour explorer ces concepts, utilisons la commande lsblk.\nlsblk --output NAME,PATH,RM,RO,ROTA,TYPE,SIZE,FSAVAIL,MOUNTPOINT\nNAME        PATH           RM RO ROTA TYPE  SIZE FSAVAIL MOUNTPOINT\nsda         /dev/sda        0  0    1 disk  4.5T\n├─sda1      /dev/sda1       0  0    1 part  200M\n└─sda2      /dev/sda2       0  0    1 part  4.5T      1T /media/pi/LaCie\nmmcblk0     /dev/mmcblk0    0  0    0 disk 29.7G\n├─mmcblk0p1 /dev/mmcblk0p1  0  0    0 part  256M  201.8M /boot\n└─mmcblk0p2 /dev/mmcblk0p2  0  0    0 part 29.5G     24G /\nLes résultats affichés par la commande lsblkci-dessus montrent deux disques appelés sdaet mmcblk0. Ils ont chacun deux partitions sda1, sda2, mmcblk0p1 et mmcblk0p2. Et ils ont chacun un ou deux points de montage /media/pi/LaCie, /boot et /. On peut différencier les disques des partitions dans le dessin de la structure hiérarchique de la première colonne NAME et aussi dans la colonne TYPE.\nL’éjection du disque se passe en deux étapes :\n\nDémonter ses points de montage. Dans le cas présenté, il n’en a qu’un qui est monté à /media/pi/LaCie, mais dont la référence se trouve à /dev/sda2.\nCouper l’alimentation du disque. La référence du disque lui-même se trouve à /dev/sda.\n\n\nN.B. Il faut s’assurer que le disque n’est plus utilisé, sinon le système refusera de le démonter avec l’erreur target is busy. C’est à ça que sert le changement de répertoire ci-dessous.\n\ncd\nudisksctl unmount --block-device /dev/sda2\nsudo udisksctl power-off --block-device /dev/sda\n\n\nPour aller plus loin\n\nWhat you need to know about disks and disk partitions in Linux.\nWhat is NVMe SSD technology?\nWhat Is an MMC Card - Full Guide"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#à-voir-aussi",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#à-voir-aussi",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "À voir aussi",
    "text": "À voir aussi\n\nhttps://www.raspberrypi.com/news/raspberry-pi-bullseye-update-april-2022/\nhttps://learnxinyminutes.com/docs/bash/\nhttps://devhints.io/bash\nhttps://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html\n\n\n\nhttps://funprojects.blog/2021/04/26/control-usb-powered-devices/\nhttps://raspberrypi.stackexchange.com/questions/118656/raspberry-pi4-uhubctl-bash-script-wont-run\nhttps://github.com/codazoda/hub-ctrl.c/issues/17"
  },
  {
    "objectID": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#quelques-commandes-utiles",
    "href": "posts/2023-03-09-installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/index.html#quelques-commandes-utiles",
    "title": "Installer Raspberry Pi OS sur Raspberry Pi sans clavier, ni souris, ni écran",
    "section": "Quelques commandes utiles",
    "text": "Quelques commandes utiles\n\nDéterminer le modèle de Raspberry\n\ncat /sys/firmware/devicetree/base/model\n# Raspberry Pi 4 Model B Rev 1.1\n\nDéterminer la version de l’OS\n\ncat /etc/os_release"
  },
  {
    "objectID": "posts/2015-05-24-tete-impression/index.html",
    "href": "posts/2015-05-24-tete-impression/index.html",
    "title": "Tête d’impression chinoise pour µDelta",
    "section": "",
    "text": "Ma µDelta a une nouvelle tête d’impression nettement plus longue que l’originale, mais elle fonctionne nettement mieux.\n\n\n\nouilogique.com\n\n\nPetit souci cependant, l’étalonnage de Reprap-France ne fonctionne plus… Il faut donc ruser en modifiant directement le réglage Z max length [mm] du Firmware enregistré sur l’EEPROM de la carte Teensylu.\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left; clear:right; margin-bottom:200px;”}\nVoronoi Klein Bottle — Thingiverse 910737\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-10-21-interruptions/index.html",
    "href": "posts/2016-10-21-interruptions/index.html",
    "title": "External interrupts on the ATmega168/328",
    "section": "",
    "text": "Original Source (doesn’t exists anymore) : EXTERNAL INTERRUPTS ON THE ATmega168/328\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-10-21-interruptions/index.html#introduction",
    "href": "posts/2016-10-21-interruptions/index.html#introduction",
    "title": "External interrupts on the ATmega168/328",
    "section": "INTRODUCTION",
    "text": "INTRODUCTION\nIn the previous section I talked about the basics of interrupts. In this section, we will talk about the first type of device interrupts called external interrupts. These interrupts are basically called on a given status change on the INTn pin. This is essentially an input interrupt and is great to use for applications when you might need to react quickly to an outside source, such as a bumper of your robot hitting the wall or to detect a blown fuse."
  },
  {
    "objectID": "posts/2016-10-21-interruptions/index.html#hardware",
    "href": "posts/2016-10-21-interruptions/index.html#hardware",
    "title": "External interrupts on the ATmega168/328",
    "section": "HARDWARE",
    "text": "HARDWARE\nHardware wise there is not difference between External Interrupts and Inputs so don’t be afraid to reread the Digital Input Tutorial if you need a refresher.\nIf you look at the AVR pinout diagram you will see the INTx which are used for External Interrupts and PCINTx pins that are used for Pin Change Interrupts.\n\n\n\nFigure 1: ATmega168/328 - External Interrupt Pins\n\n\nThe ATmega8 and the ATmega88/168/328 are backwards compatible when it comes to the pinouts however, they are programmed slightly different and while external interrupts work the same way on both types of micro controllers they do require different code to run.\nExternal interrupts are fairly powerful, they can be configured to trigger on one of 4 states. Low level will trigger whenever the pin senses a LOW (GND) signal. Any Logic Change trigger at the moment the pin changes from HIGH (Vcc) to LOW (GND) or from LOW (GND) to HIGH(Vcc). On Falling Edge will trigger at the moment the pin goes from HIGH (Vcc) to LOW (GND). On Rising Edge will trigger at the moment the pin goes from LOW (GND) to HIGH (Vcc). The best part is that you can configure each INTx independently.\nExternal interrupts use the below 3 registers. Which you could find under the “External Interrupts section of the datasheet.\n\nExternal Interrupt Control Register A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nEICRA\n-\n-\n-\n-\nISC11\nISC10\nISC01\nISC00\n\n\n\n\n\nISC Bit Settings\n\n\n\n\n\n\n\n\nISCx1\nISCx0\nDESCRIPTION\n\n\n\n\n0\n0\nLow level of INTx generates an interrupt request\n\n\n0\n1\nAny logic change on INTx generates an interrupt request\n\n\n1\n0\nThe falling edge of INTx generates an interrupt request\n\n\n1\n1\nThe rising edge of INTx generates an interrupt request\n\n\n\n\n\nExternal Interrupt Mask Register\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nEIMSK\n-\n-\n-\n-\n-\n-\nINT1\nINT0\n\n\n\n\n\nExternal Interrupt Flag Register\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nEIFR\n-\n-\n-\n-\n-\n-\nINTF1\nINTF0\n\n\n\n\n#include &lt;avr/io.h&gt;\n#include &lt;avr/interrupt.h&gt;\n\nint main(void)\n{\n  DDRD &= ~(1 &lt;&lt; DDD2);     // Clear the PD2 pin\n  // PD2 (PCINT0 pin) is now an input\n\n  PORTD |= (1 &lt;&lt; PORTD2);    // turn On the Pull-up\n  // PD2 is now an input with pull-up enabled\n\n  EICRA |= (1 &lt;&lt; ISC00);    // set INT0 to trigger on ANY logic change\n  EIMSK |= (1 &lt;&lt; INT0);     // Turns on INT0\n\n  sei();                    // turn on interrupts\n\n  while( 1 )\n  {\n    /*main program loop here */\n  }\n}\n\nISR( INT0_vect )\n{\n  /* interrupt code here */\n}"
  },
  {
    "objectID": "posts/2016-10-21-interruptions/index.html#pin-change-interrupts",
    "href": "posts/2016-10-21-interruptions/index.html#pin-change-interrupts",
    "title": "External interrupts on the ATmega168/328",
    "section": "PIN CHANGE INTERRUPTS",
    "text": "PIN CHANGE INTERRUPTS\n\n\n\nFigure 2: ATmega168/328 - Pin Change Interrupt Pins\n\n\nOne important thing to note, on the older ATmega8 does not have any PCINT pints, therefore, this section of the tutorial only applies to ATmega88 through ATmega328.\n\nPin Change Interrupt Control Register\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nPCICR\n-\n-\n-\n-\n-\nPCIE2\nPCIE1\nPCIE0\n\n\n\n\n\nPin Change Interrupt Flag Register\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nPCIFR\n-\n-\n-\n-\n-\nPCIF2\nPCIF1\nPCIF0\n\n\n\n\n\nPin Change Mask Register 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nPCMSK2\nPCINT23\nPCINT22\nPCINT21\nPCINT20\nPCINT19\nPCINT18\nPCINT17\nPCINT16\n\n\n\n\n\nPin Change Mask Register 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nPCMSK1\n-\nPCINT14\nPCINT13\nPCINT12\nPCINT11\nPCINT10\nPCINT9\nPCINT8\n\n\n\n\n\nPin Change Mask Register 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7 bit\n6 bit\n5 bit\n4 bit\n3 bit\n2 bit\n1 bit\n0 bit\n\n\n\n\nPCMSK0\nPCINT7\nPCINT6\nPCINT5\nPCINT4\nPCINT3\nPCINT2\nPCINT1\nPCINT0\n\n\n\nThe PCIEx bits in the PCICR registers enable External Interrupts and tells the MCU to check PCMSKx on a pin change state. When a pin changes states (HIGH to LOW, or LOW to HIGH) and the corresponding PCINTx bit in the PCMSKx register is HIGH the corresponding PCIFx bit in the PCIFR register is set to HIGH and the MCU jumps to the corresponding Interrupt vector.\n#include &lt;avr/io.h&gt;\n#include &lt;avr/interrupt.h&gt;\n\n\nint main(void)\n{\n    DDRB &= ~(1 &lt;&lt; DDB0);     // Clear the PB0 pin\n    // PB0 (PCINT0 pin) is now an input\n\n    PORTB |= (1 &lt;&lt; PORTB0);    // turn On the Pull-up\n    // PB0 is now an input with pull-up enabled\n\n\n    PCICR |= (1 &lt;&lt; PCIE0);    // set PCIE0 to enable PCMSK0 scan\n    PCMSK0 |= (1 &lt;&lt; PCINT0);  // set PCINT0 to trigger an interrupt on state change\n\n    sei();                    // turn on interrupts\n\n    while(1)\n    {\n        /*main program loop here */\n    }\n}\n\n\n\nISR (PCINT0_vect)\n{\n    /* interrupt code here */\n}\nNow there are 2 limits to the PCINTx interrupt. The first is that ANY change to the pin state will trigger in interrupt, if you remember you can control what state change triggers an INTx interrupt (rising pulse, falling pulse, Low level or any level change). Since a pin has to change states in order to trigger the interrupt we can read the state of the pin and if it’s currently HIGH(Vcc) we know that a rising edge event triggered the interrupt, like wise if the pin state is currently LOW(GND) we know that a falling edge interrupt triggered the interrupt.\n#include &lt;avr/io.h&gt;\n#include &lt;avr/interrupt.h&gt;    // Needed to use interrupts\n\nint main(void)\n{\n    DDRB &= ~(1 &lt;&lt; DDB0);         // Clear the PB0 pin\n    // PB0 (PCINT0 pin) is now an input\n\n    PORTB |= (1 &lt;&lt; PORTB0);        // turn On the Pull-up\n    // PB0 is now an input with pull-up enabled\n\n    PCICR |= (1 &lt;&lt; PCIE0);     // set PCIE0 to enable PCMSK0 scan\n    PCMSK0 |= (1 &lt;&lt; PCINT0);   // set PCINT0 to trigger an interrupt on state change\n\n    sei();                     // turn on interrupts\n\n    while(1)\n    {\n        /*main program loop here */\n    }\n}\n\n\n\nISR (PCINT0_vect)\n{\n    if( (PINB & (1 &lt;&lt; PINB0)) == 1 )\n    {\n        /* LOW to HIGH pin change */\n    }\n    else\n    {\n        /* HIGH to LOW pin change */\n    }\n}\nNow for the 2nd problem is that up to 8 pins share the same PCINTx vector. So when the interrupt fires you will have detect what event triggered the change. So what we might need to do is take a snapshot of the Input states and compare them to the state from the previous time the interrupt triggered. If you take a look at the datasheet pinouts PCMSK0 matches up with PORTB, PCMSK1 with PORTC and PCMSK2 with PORTD.\n#include &lt;avr/io.h&gt;\n#include &lt;stdint.h&gt;            // has to be added to use uint8_t\n\n#include &lt;avr/interrupt.h&gt;    // Needed to use interrupts\n\n\nvolatile uint8_t portbhistory = 0xFF;     // default is high because the pull-up\n\n\nint main(void)\n{\n    DDRB &= ~((1 &lt;&lt; DDB0) | (1 &lt;&lt; DDB1) | (1 &lt;&lt; DDB2)); // Clear the PB0, PB1, PB2 pin\n    // PB0,PB1,PB2 (PCINT0, PCINT1, PCINT2 pin) are now inputs\n\n    PORTB |= ((1 &lt;&lt; PORTB0) | (1 &lt;&lt; PORTB1) | (1 &lt;&lt; PORTB2)); // turn On the Pull-up\n    // PB0, PB1 and PB2 are now inputs with pull-up enabled\n\n    PCICR |= (1 &lt;&lt; PCIE0);     // set PCIE0 to enable PCMSK0 scan\n    PCMSK0 |= (1 &lt;&lt; PCINT0);   // set PCINT0 to trigger an interrupt on state change\n\n    sei();                     // turn on interrupts\n\n    while(1)\n    {\n        /*main program loop here */\n    }\n}\n\n\n\nISR (PCINT0_vect)\n{\n    uint8_t changedbits;\n\n\n    changedbits = PINB ^ portbhistory;\n    portbhistory = PINB;\n\n\n    if(changedbits & (1 &lt;&lt; PINB0))\n    {\n        /* PCINT0 changed */\n    }\n\n    if(changedbits & (1 &lt;&lt; PINB1))\n    {\n        /* PCINT1 changed */\n    }\n\n    if(changedbits & (1 &lt;&lt; PINB2))\n    {\n        /* PCINT2 changed */\n    }\n\n}\nOk ok, I know, the bit math is a bit funny. So I’ll be nice and explain it. When we XOR ( ^ ) the PORTB register with the portbhistory register we will get a 0’s on the bits that are the same, and 1’s in the bits that are different (yes a practical use for the XOR operation). In the IF statements we AND ( & ) the operation with a bitmask that we created using the bit shift register (1 &lt;&lt; PBx) in order to isolate specific bit. Lastly, notice how I defined porthistory as volatile? Like I said before, if you want to pass a global variable to an Interrupt make it volatile so that it doesn’t cause obsolete data due to compiler optimization.\nNow finally, what if you wanted to put both together? Well I got to leave a bit of fun for you guys.\nCheers Q"
  },
  {
    "objectID": "posts/2016-11-14-arduino-pro-mini/index.html",
    "href": "posts/2016-11-14-arduino-pro-mini/index.html",
    "title": "Mise en route d’un Arduino Pro Mini 3.3 V",
    "section": "",
    "text": "L’Arduino Pro Mini n’a pas d’UART visible sur le port USB de l’ordinateur qui va le programmer. On doit donc utiliser un programmateur externe. Dans cet article, je présente deux solutions :\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-11-14-arduino-pro-mini/index.html#matériel",
    "href": "posts/2016-11-14-arduino-pro-mini/index.html#matériel",
    "title": "Mise en route d’un Arduino Pro Mini 3.3 V",
    "section": "Matériel",
    "text": "Matériel\n\nATmega328P-AU Pro Mini 3.3V 8MHz, acheté chez Banggood pour 13 $ les 5 pièces\nProgrammateur FTDI"
  },
  {
    "objectID": "posts/2016-11-14-arduino-pro-mini/index.html#programmation-de-larduino-pro-mini-avec-un-arduino-uno-mode-arduino-as-isp",
    "href": "posts/2016-11-14-arduino-pro-mini/index.html#programmation-de-larduino-pro-mini-avec-un-arduino-uno-mode-arduino-as-isp",
    "title": "Mise en route d’un Arduino Pro Mini 3.3 V",
    "section": "Programmation de l’Arduino Pro Mini avec un Arduino UNO (mode Arduino as ISP)",
    "text": "Programmation de l’Arduino Pro Mini avec un Arduino UNO (mode Arduino as ISP)\nLa définition des fusibles dans l’IDE 1.6.12 pour Arduino Pro or Pro Mini a un problème et l’IDE renvoie l’erreur suivante quand on veut graver un nouveau bootloader :\n ***failed;\navrdude: WARNING: invalid value for unused bits in fuse \"efuse\", should be set to 1 according to datasheet\nThis behaviour is deprecated and will result in an error in future version\nYou probably want to use 0xfd instead of 0x05 (double check with your datasheet first).\nDonc, je mes suis rabattu sur MiniCore : https://github.com/MCUdude/MiniCore, d’après la suggestion trouvée à http://arduino.stackexchange.com/a/31199/13995.\nLa procédure d’utilisation est très bien détaillée sur la page GitHub de MiniCore, donc je ne la répète pas ici.\nLa configuration que j’ai utilisée est la suivante :\n\n\n\nConfiguration MiniCore programmation d’Arduino Pro Mini\n\n\n\n\n\nProgrammation d’Arduino Pro Mini\n\n\nL6_a programmation ISP fonctionne nickel, mais je n’arrive pas à utiliser l’ESP8266 comme bridge USB‑RS232.\n⚠ Comme j’ai Arduino Pro Mini 3.3 V, j’ai connecté le 5 V du UNO sur l’entrée RAW du Pro Mini, car cette entrée est connectée à un régulateur de tension qui accepte de 3.3 à 12 V. Si on a du 3.3 V déjà régulé, on peut utiliser la broche VCC. Voir le brochage.\n\nBrochage\n\n\n\nUNO\nPro Mini\n\n\n\n\n5V\nRAW ⚠\n\n\nGND\nGND\n\n\n10\nRST\n\n\n11\n11\n\n\n12\n12\n\n\n13\n13\n\n\n\n\n\nProgrammation ISP avec un autre Arduino Pro Mini\nJ’ai testé cette solution 6 mois plus tard que celle avec l’Arduino UNO, mais c’est le même principe dans les deux cas. Donc voici la photo du montage :\n\n\n\nArduino Pro Mini programmation ISP\n\n\nAvec ce montage, l’IDE Arduino version 1.8.2 accepte de graver le bootloader qui permet ensuite d’utiliser l’option “Arduino Pro or Pro Mini” standard de l’IDE. Cependant, les fusibles sont toujours à 0.\n⚠ Sur la photo, le convertisseur USB-série est branché sur l’Arduino cible. Lors de la programmation, il doit être branché sur l’autre Arduino. On voit aussi que j’ai dû ajouter un régulateur de tension 3.3 V (voir ci-dessous)."
  },
  {
    "objectID": "posts/2016-11-14-arduino-pro-mini/index.html#programmation-de-larduino-pro-mini-avec-un-convertisseur-usb-série-miniinthebox",
    "href": "posts/2016-11-14-arduino-pro-mini/index.html#programmation-de-larduino-pro-mini-avec-un-convertisseur-usb-série-miniinthebox",
    "title": "Mise en route d’un Arduino Pro Mini 3.3 V",
    "section": "Programmation de l’Arduino Pro Mini avec un convertisseur USB-série MiniInTheBox",
    "text": "Programmation de l’Arduino Pro Mini avec un convertisseur USB-série MiniInTheBox\nJ’ai également fait un test de programmation avec un convertisseur USB-série. Là aussi, j’ai dû utiliser MiniCore avec les paramètres détaillés dans le chapitre précédent. La seule chose qui change, c’est qu’il faut téléverser le programme avec la commande Croquis/Téléverser ⌘+U, alors qu’avec le UNO comme programmateur, il fallait utiliser la commande Croquis/Téléverser avec un programmateur ⇧+⌘+U.\n⚠ Ce convertisseur envoie toujours du 5 V sur VCC, même en mode 3.3 V. Il faut donc lui ajouter un régulateur de tension. Je m’en suis fait un que l’on voit sur la photo du chapitre précédent.\n⚠ Les broches CTS et GND sont permutées sur l’Arduino Pro Mini et sur le convertisseur. Curieusement, il semble que CTS soit en fait connecté à GND, parce que ça marche quand même avec la permutation.\n\n\n\nconvertisseur USB-série\n\n\n\n\n\nArduino Pro Mini\n\n\n\n\n\nArduino Pro Mini Back\n\n\n\n\n\nArduino Pro Mini + convertisseur USB-série"
  },
  {
    "objectID": "posts/2016-05-21-test_capteur_temp_DS18B20/index.html",
    "href": "posts/2016-05-21-test_capteur_temp_DS18B20/index.html",
    "title": "Test du capteur de température DS18B20 avec le protocole OneWire",
    "section": "",
    "text": "ouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n/*\n\nPROGRAMME BASIQUE POUR LIRE UN CAPTEUR DE TEMPÉRATURE DS18B20\nAVEC LE PROTOCOLE OneWire (= Dallas)\n\nRÉFÉRENCE AliExpress DU CAPTEUR\nhttp://fr.aliexpress.com/item/Stainless-steel-package-Waterproof-DS18b20-temperature-probe-temperature-sensor-18B20-For-Arduino/32236998050.html\n\nVERSION ORIGINALE DU PROGRAMME\nhttp://www.milesburton.com/?title=Dallas_Temperature_Control_Library\n\nLIBRAIRIE OneWire\nhttps://github.com/PaulStoffregen/OneWire.git\n\nLIBRAIRIE DallasTemperature\nhttps://github.com/milesburton/Arduino-Temperature-Control-Library\n\nCONNEXIONS\nfil rouge    +5V\nfil noir     GND\nfil jaune    données OneWire PORTD2 (pin 2)\nRésistance pull-up de 4.7 kΩ entre le signal (fil jaune) et +5V (fil rouge)\n\nMICROCONTRÔLEUR\nClone Arduino Nano\n\nREMARQUES\n- Le protocole OneWire est lent, il faut environ 780 ms pour une lecture.\n- Le capteur DS18B20 n’est pas très réactif, il faut environ 5 min\n  pour qu’il se stabilise.\n\nmai 2016, ouilogique.com\n\n*/\n\n#include &lt;OneWire.h&gt;\n#include &lt;DallasTemperature.h&gt;\n\n// Le fil des données est connectés à la broche 2\n#define ONE_WIRE_BUS 2\n\n// Initialisation d’une instance pour communiquer avec le protocole OneWire\nOneWire oneWire( ONE_WIRE_BUS );\n\n// Initialise DallasTemperature avec la référence à OneWire.\nDallasTemperature sensors( &oneWire );\n\nvoid setup()\n{\n  Serial.begin( 115200 );\n  Serial.print( \"Demo capteur de temperature DS18B20\\n\" );\n\n  // Démarre le processus de lecture.\n  // IC Default 9 bit. If you have troubles consider upping it 12.\n  // Ups the delay giving the IC more time to process the temperature\n  // measurement\n  sensors.begin();\n}\n\nvoid loop()\n{\n  long t1 = millis();\n\n  // Requête de toutes les températures disponibles sur le bus\n  sensors.requestTemperatures();\n  // On ne garde que la première température (index = 0)\n  float Temp = sensors.getTempCByIndex( 0 );\n\n  long t2 = millis();\n  long dt = t2 - t1;\n\n  Serial.print( \"t = \" );\n  Serial.print( t2 );\n  Serial.print( \" ms\\t\" );\n\n  Serial.print( \"dt = \" );\n  Serial.print( dt );\n  Serial.print( \" ms\\t\" );\n\n  Serial.print( \"T = \" );\n  Serial.print( Temp, 1 );\n  Serial.print( \" degC\\n\" );\n}\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html",
    "href": "posts/2015-09-05-sites_web_statiques/index.html",
    "title": "Générateurs de sites web statiques",
    "section": "",
    "text": "Ouilogique.com est généré avec Jekyll.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#simon-wood-future-insights",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#simon-wood-future-insights",
    "title": "Générateurs de sites web statiques",
    "section": "Simon Wood — Future Insights",
    "text": "Simon Wood — Future Insights\n\n\n\nhttps://www.youtube.com/watch?v=jeQCoiZT5gg&feature=em-subs_digest-vrecs"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#advantages-of-static-sites",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#advantages-of-static-sites",
    "title": "Générateurs de sites web statiques",
    "section": "ADVANTAGES OF STATIC SITES",
    "text": "ADVANTAGES OF STATIC SITES\n\nspeed\nsimplicity\nsecurity\nversion control\ncheap\nportability (Convenient hosting)"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#sites-annuaires",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#sites-annuaires",
    "title": "Générateurs de sites web statiques",
    "section": "SITES ANNUAIRES",
    "text": "SITES ANNUAIRES\n\nhttps://staticsitegenerators.net\nhttps://www.staticgen.com"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#generators-i",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#generators-i",
    "title": "Générateurs de sites web statiques",
    "section": "GENERATORS I",
    "text": "GENERATORS I\n\nmoveable type\nnanoc (ruby)\njekyll (ruby) ⇒\nassemble ⇒ zurb\nstacey ⇒ mozilla WebFWD"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#generators-ii",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#generators-ii",
    "title": "Générateurs de sites web statiques",
    "section": "GENERATORS II",
    "text": "GENERATORS II\n\nassemble ⇒ À regarder, basé sur Yeoman et Grunt\nCactus (cactusformac.com)\ndocpad\nDropplets\nhexo\nhugo\nhyde\njekyll\nmetalsmith\nmiddleman\noctopress\npelican\nstacey\nwintersmith"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#markdown-tools",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#markdown-tools",
    "title": "Générateurs de sites web statiques",
    "section": "MARKDOWN TOOLS",
    "text": "MARKDOWN TOOLS\n\nWeb editor https://dillinger.io\nmouapp\ngitbook"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#templates",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#templates",
    "title": "Générateurs de sites web statiques",
    "section": "TEMPLATES",
    "text": "TEMPLATES\n\nhandlebars\nmustache\neco\nhaml\njade\ntwig"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#hosting",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#hosting",
    "title": "Générateurs de sites web statiques",
    "section": "HOSTING",
    "text": "HOSTING\n\ngit pages\nAWS S3\nBitBalloon\n\n37:25"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#cms-for-flatfile-gen",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#cms-for-flatfile-gen",
    "title": "Générateurs de sites web statiques",
    "section": "CMS for flatfile gen",
    "text": "CMS for flatfile gen\n\nKirby\nStatamic ⇒ ♡\npico\nstacey\ncockpit ⇒ SQLite\nmonstra\nrazorCMS\n\n\nexamples\n\nStatamic ⇒ ASANA\nKirby ⇒ World Backup Day"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#discussion",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#discussion",
    "title": "Générateurs de sites web statiques",
    "section": "DISCUSSION",
    "text": "DISCUSSION\n\ndisqus\nlivefyre\nintensedebate"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#surveys",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#surveys",
    "title": "Générateurs de sites web statiques",
    "section": "SURVEYS",
    "text": "SURVEYS\ngoogle docs survey monkeys"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#videos",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#videos",
    "title": "Générateurs de sites web statiques",
    "section": "VIDEOS",
    "text": "VIDEOS\ndon’t want to pay for bandwidth ⇒ YouTube, Vimeo"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#charts",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#charts",
    "title": "Générateurs de sites web statiques",
    "section": "CHARTS",
    "text": "CHARTS\nd3js highchart\n\nhttps://caniuse.com/"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#generator-for-cms",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#generator-for-cms",
    "title": "Générateurs de sites web statiques",
    "section": "Generator for CMS",
    "text": "Generator for CMS\nDrupal ⇒ Boost WP ⇒ Wp-Super Cache\n\nhttps://ghost.org ⇒ Buster"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#alternatives",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#alternatives",
    "title": "Générateurs de sites web statiques",
    "section": "Alternatives",
    "text": "Alternatives\n\nHammer\nMixture ⇒ Stopped, use Gulp or Grunt\nCactus (cactusformac.com)\n\n\nÀ voir aussi\n\ncodekit\nwufoo\nParse"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#comparing-static-site-engines-with-brian-rinaldi",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#comparing-static-site-engines-with-brian-rinaldi",
    "title": "Générateurs de sites web statiques",
    "section": "Comparing Static Site Engines with Brian Rinaldi",
    "text": "Comparing Static Site Engines with Brian Rinaldi\n\nhttps://www.youtube.com/watch?v=R-fJWOO1bjE\n\n\nJekyll\n\nLiquid templates ⇒ ♡\n\n\n\nMiddleman\n\nhttps://middlemanapp.com\n\n\n\nHarp\n\nhttps://harpjs.com\n\n\n\nroots (voir article)"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#bootstrap",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#bootstrap",
    "title": "Générateurs de sites web statiques",
    "section": "Bootstrap",
    "text": "Bootstrap\n18 Essential Bootstrap UI Editors"
  },
  {
    "objectID": "posts/2015-09-05-sites_web_statiques/index.html#aaspir",
    "href": "posts/2015-09-05-sites_web_statiques/index.html#aaspir",
    "title": "Générateurs de sites web statiques",
    "section": "AASPIR",
    "text": "AASPIR\n\nhttp://www.mauricezundel.ch\nhttps://maishademo.wordpress.com/\nhttps://organizationdemo.wordpress.com/\nhttps://ampersanddemo.wordpress.com/\nhttps://motifdemo.wordpress.com/"
  },
  {
    "objectID": "posts/2022-06-19-humour-there-is-no-place-like-127_0_0_1/index.html",
    "href": "posts/2022-06-19-humour-there-is-no-place-like-127_0_0_1/index.html",
    "title": "Humour There is no place like 127.0.0.1",
    "section": "",
    "text": "Trop bien la pub init7\n\n\n\nThere is no place like 127.0.0.1\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-06-27-Scanalogic-2_Logic_Analyzer/index.html",
    "href": "posts/2015-06-27-Scanalogic-2_Logic_Analyzer/index.html",
    "title": "Analyseur logique Scanalogic-2",
    "section": "",
    "text": "Mise en route de l’analyseur logique Scanalogic-2 (www.ikalogic.com/ikalogic-products/scanalogic-2/) que Didel m’a envoyé cette semaine.\nÇa fonctionne bien, même sur Mac.\n\n\n\nouilogique.com – Scanalogic-2_Logic_Analyzer\n\n\n\n\n\nouilogique.com – Scanalogic-2_Logic_Analyzer\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-07-02-usb_hub_test/index.html",
    "href": "posts/2015-07-02-usb_hub_test/index.html",
    "title": "Test de hubs USB",
    "section": "",
    "text": "Test du hub Anne LXL4072201A\nTest du hub Delock 61857\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-07-02-usb_hub_test/index.html#test-du-hub-anne-lxl4072201a",
    "href": "posts/2015-07-02-usb_hub_test/index.html#test-du-hub-anne-lxl4072201a",
    "title": "Test de hubs USB",
    "section": "Test du hub Anne LXL4072201A",
    "text": "Test du hub Anne LXL4072201A\nTest du hub USB de la marque Anne, modèle LXL4072201A, acheté sur AliExpress (fr.aliexpress.com/item/2014-newest-7-Port-USB-3-0-HUB-High-Speed-With-Power-Adapter-For-Laptop-Notebook/1997348166.html).\nLe test consiste à placer une diode entre les pattes d’alimentation de la fiche USB qui est normalement connectée à l’ordinateur. Une résistance de 100 Ω peut être ajoutée en parallèle pour s’assurer que le hub détecte une charge et éviter ainsi l’enclenchement de la sécurité de haute impédance du hub. Le hub testé n’a visiblement pas cette protection puisque la LED s’est allumée sans la résistance de 100 Ω. On peut remplacer la résistance de 220 Ω par une résistance plus élevée pour diminuer l’intensité lumineuse. Avec une résistance d’1 kΩ par exemple, ça marche bien aussi.\nLe hub doit être alimenté pendant le test.\n{:style=“width:50%;”}\n{:style=“width:50%;”}\n{:style=“width:50%;”}\n\nConclusion\n\nVu que la LED s’allume, je ne recommande pas le hub Anne LXL4072201A !"
  },
  {
    "objectID": "posts/2015-07-02-usb_hub_test/index.html#test-du-hub-delock-61857",
    "href": "posts/2015-07-02-usb_hub_test/index.html#test-du-hub-delock-61857",
    "title": "Test de hubs USB",
    "section": "Test du hub Delock 61857",
    "text": "Test du hub Delock 61857\n20 nov. 2015. Test du hub Delock 61857 acheté chez NewConcept Informatique.\n\nConclusion\n\nVu que la LED ne s’allume pas, je recommande le hub Delock 61857 !\n\n\n\nRemarques\nLe Delock 61857 coûte environ 60 CHF, ce qui est nettement plus cher que les 14 CHF que m’ont coûtés le hub Anne LXL4072201A. Mais vu le résultat du test, je pense que c’est de l’argent bien investi.\nCe hub a 10 ports USB (6 devant, 2 derrière et 2 qui peuvent pivoter). Il serait parfait s’il y avait des interrupteurs pour activer et désactiver les ports sans avoir besoin de débrancher les cordons comme sur le hub Anne LXL4072201A.\nIl a quand même deux défauts agaçants :\n\nOn entend clairement le sifflement de l’alim à découpage quand il n’y a pas assez de charge. Il y a peut-être aussi une influence de mon MacBook Pro qui a un problème d’alimentation électrique. Je me reçois des châtaignes de temps à autre quand il connecté au 240 V.\nCe hub est un véritable sapin de Noël avec sa gigantesque LED bleue qui illumine tout. Le patron de NewConcept Informatique utilise d’ailleurs de l’adhésif noir pour la cacher.\n\nUn autre souci de ma config, c’est mon écran Apple Thunderbolt 27”. Il a un hub USB intégré sur lequel je branche mon clavier et ma souris. Lorsque j’ai branché le hub Delock sur le hub de l’écran pour la première fois, ça a fait planter l’ordi. Ça m’était déjà arrivé en connectant des cartes Arduino et c’est d’ailleurs pour ça que je préfère les connecter à un hub plutôt que directement sur le Mac ou sur le hub de l’écran. Résultat des courses, il me semble que mon Mac et mon écran ont quelques soucis électriques…\nSur cette image, on voit que la LED ne s’allume pas ⇒ donc c’est bon.\n{:style=“width:50%;”}\nSur cette image, on voit que le montage de test fonctionne et que si la LED ne s’est pas allumée dans le test ci-dessus, c’est vraiment parce qu’il n’y avait pas de jus.\n{:style=“width:50%;”}\nPour info, le hub vu de dessous\n{:style=“width:50%;”}"
  },
  {
    "objectID": "posts/2015-07-02-usb_hub_test/index.html#référence-du-matériel-de-test",
    "href": "posts/2015-07-02-usb_hub_test/index.html#référence-du-matériel-de-test",
    "title": "Test de hubs USB",
    "section": "Référence du matériel de test",
    "text": "Référence du matériel de test\n\nConnecteur Jack-rapide (https://www.banggood.com/DC-Power-Male-Female-5_5X-2_1mm-Connector-Adapter-Plug-Cable-Pressed-connected-for-LED-Strips-12V-p-998683.html?p=0431091025639201412F)\nCâble Jack-USB ⇒ ⚠ ce câble a une grande résistance de ligne qui fait chuter considérablement la tension !\nUSB Femelle-Femelle (https://fr.aliexpress.com/item/laptop-High-Speed-blue-USB-3-0-cable-A-Female-TO-A-Female-Adapter-cables-converter/1855157465.html)"
  },
  {
    "objectID": "posts/2014-12-03-manipulation_des_ports/index.html",
    "href": "posts/2014-12-03-manipulation_des_ports/index.html",
    "title": "La manipulation des entrées-sorties à l’aide des registres de port",
    "section": "",
    "text": "R/W\nMSP\nAVR\nUSAGE\n\n\n\n\nr/w\nPxDIR\nDDRx\nDIRECTION DES E/S : 0 = input / 1 = output\n\n\nr\nPxIN\nPINx\nLECTURE DES E/S\n\n\nr/w\nPxOUT\nPORTx\nÉCRITURE DES E/S OU SÉLECTION DES RÉSISTANCES DE TIRAGE : 1 = pullup / 0 = pulldown\n\n\nr/w\nPxREN\n\nPullup / Pulldown : 0 = disabled / 1 = enabled\n\n\nr/w\nPxSEL\n\nSélection des fonctions\n\n\n\n\nAVR n’a que les pullups doc AVR, voir datasheet chap. 14 p.75 doc MSP, voir slau144j.pdf p.329, 333\n© ouilogique.com"
  },
  {
    "objectID": "posts/2014-12-03-manipulation_des_ports/index.html#description-des-registres-avr-msp",
    "href": "posts/2014-12-03-manipulation_des_ports/index.html#description-des-registres-avr-msp",
    "title": "La manipulation des entrées-sorties à l’aide des registres de port",
    "section": "",
    "text": "R/W\nMSP\nAVR\nUSAGE\n\n\n\n\nr/w\nPxDIR\nDDRx\nDIRECTION DES E/S : 0 = input / 1 = output\n\n\nr\nPxIN\nPINx\nLECTURE DES E/S\n\n\nr/w\nPxOUT\nPORTx\nÉCRITURE DES E/S OU SÉLECTION DES RÉSISTANCES DE TIRAGE : 1 = pullup / 0 = pulldown\n\n\nr/w\nPxREN\n\nPullup / Pulldown : 0 = disabled / 1 = enabled\n\n\nr/w\nPxSEL\n\nSélection des fonctions\n\n\n\n\nAVR n’a que les pullups doc AVR, voir datasheet chap. 14 p.75 doc MSP, voir slau144j.pdf p.329, 333"
  },
  {
    "objectID": "posts/2014-12-03-manipulation_des_ports/index.html#exemple-de-programme",
    "href": "posts/2014-12-03-manipulation_des_ports/index.html#exemple-de-programme",
    "title": "La manipulation des entrées-sorties à l’aide des registres de port",
    "section": "Exemple de programme",
    "text": "Exemple de programme\n/*\n  BLINK pin 2 to 9\n*/\nvoid setup()\n{\n  DDRD |= B11111100; // Pin 2 to 7 as outputs\n  DDRB |= B00000011; // Pin 8 to 9 as outputs\n}\n\nvoid loop()\n{\n  // Pin 2 to 7 HIGH\n  PORTD |= ( 1&lt;&lt;2 ) | ( 1&lt;&lt;3 ) | ( 1&lt;&lt;4 ) | ( 1&lt;&lt;5 ) | ( 1&lt;&lt;6 ) | ( 1&lt;&lt;7 );\n  // Pin 8 to 9 HIGH\n  PORTB |= ( 1&lt;&lt;0 ) | ( 1&lt;&lt;1 );\n\n  _delay_ms( 500 );\n\n  // Pin 2 to 7 LOW\n  PORTD &= ~( 1&lt;&lt;2 ) & ~( 1&lt;&lt;3 ) & ~( 1&lt;&lt;4 ) & ~( 1&lt;&lt;5 ) & ~( 1&lt;&lt;6 ) & ~( 1&lt;&lt;7 );\n  // Pin 8 to 9 LOW\n  PORTB &= ~( 1&lt;&lt;0 ) & ~( 1&lt;&lt;1 );\n\n  _delay_ms( 500 );\n}"
  },
  {
    "objectID": "posts/2014-12-03-manipulation_des_ports/index.html#liens",
    "href": "posts/2014-12-03-manipulation_des_ports/index.html#liens",
    "title": "La manipulation des entrées-sorties à l’aide des registres de port",
    "section": "Liens",
    "text": "Liens\n\nhttps://www.mon-club-elec.fr/pmwiki_reference_arduino/pmwiki.php?n=Main.PortManipulation"
  },
  {
    "objectID": "posts/2014-12-03-manipulation_des_ports/index.html#manipulation-des-registres-de-lesp8266",
    "href": "posts/2014-12-03-manipulation_des_ports/index.html#manipulation-des-registres-de-lesp8266",
    "title": "La manipulation des entrées-sorties à l’aide des registres de port",
    "section": "Manipulation des registres de l’ESP8266",
    "text": "Manipulation des registres de l’ESP8266\nJe n’ai pas trouvé de page qui décrit comment manipuler les registres de l’ESP, mais en fouillant dans les librairie, j’ai réussi à trouver comment réaliser un programme Blink.\n/*\n  Blink ESP8266 avec manipulation directe du registre GPO.\n\n~/Library/Arduino15/packages/esp8266/hardware/esp8266/2.3.0/cores/esp8266/core_esp8266_wiring_digital.c\n~/Library/Arduino15/packages/esp8266/hardware/esp8266/2.3.0/cores/esp8266/esp8266_peri.h\n\n#define ESP8266_REG(addr) *((volatile uint32_t *)(0x60000000+(addr)))\n#define GPOS   ESP8266_REG(0x304) //GPIO_OUT_SET WO\n#define GPOC   ESP8266_REG(0x308) //GPIO_OUT_CLR WO\n#define GP16O  ESP8266_REG(0x768)\n\nGPIO disponibles\n0, 1, 2, 3, 4, 5,\n9, 10,\n12, 13, 14, 15, 16\n\n\n!! 1 et 3 sont pour l’UART\n!! 6, 7, 8 et 11 n’existent pas\n\n*/\n\n#define LED_PIN LED_BUILTIN\n\nvoid setup()\n{\n  pinMode( LED_PIN, OUTPUT );\n  Serial.begin( 115200 );\n  Serial.print( \"\\n\\nLED_PIN = \" );\n  Serial.println( LED_PIN );\n}\n\nvoid loop()\n{\n  GPO &= ~(1&lt;&lt;LED_PIN);\n  delay( 100 );\n  GPO |= (1&lt;&lt;LED_PIN);\n  delay( 1000 );\n}"
  },
  {
    "objectID": "posts/2020-05-25-humour-magic-word/index.html",
    "href": "posts/2020-05-25-humour-magic-word/index.html",
    "title": "Humour Magic Word",
    "section": "",
    "text": "sudo is the magic word\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html",
    "href": "posts/2018-02-17-introduction-javascript/index.html",
    "title": "Introduction au langage JavaScript",
    "section": "",
    "text": "Ce document fait partie du cours sur le HTML embarqué que j’ai donné au Microclub en janvier et février 2018 à l’EPFL.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#les-documents-du-cours",
    "href": "posts/2018-02-17-introduction-javascript/index.html#les-documents-du-cours",
    "title": "Introduction au langage JavaScript",
    "section": "LES DOCUMENTS DU COURS",
    "text": "LES DOCUMENTS DU COURS\n\nIntroduction au langage HTML\nIntroduction au langage CSS\nIntroduction au langage JavaScript\nCours complet au format PDF"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#introduction",
    "href": "posts/2018-02-17-introduction-javascript/index.html#introduction",
    "title": "Introduction au langage JavaScript",
    "section": "INTRODUCTION",
    "text": "INTRODUCTION\nNous avons vu que le langage HTML permet de définir la structure du contenu d’un document et que le langage CSS permet de mettre en forme ce contenu. Nous allons maintenant voir comment utiliser le langage JavaScript pour rendre ce contenu interactif."
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#lorigine-du-nom-javascript",
    "href": "posts/2018-02-17-introduction-javascript/index.html#lorigine-du-nom-javascript",
    "title": "Introduction au langage JavaScript",
    "section": "L’ORIGINE DU NOM JAVASCRIPT",
    "text": "L’ORIGINE DU NOM JAVASCRIPT\nJavaScript aurait dû s’appeler LiveScript, mais a été renommé par une décision marketing dans le but de capitaliser sur la popularité du langage Java de Sun Microsystems, malgré le fait qu’ils n’aient que très peu en commun. Cela a toujours été une grande source de confusion.\nJavaScript est normalisé par l’Ecma International (curieusement en Europe) sous la norme ECMA-262 et sous le nom de langage ECMAScript. Les noms ECMAScript et JavaScript sont donc souvent considérés comme interchangeables. Cependant, il faut noter que d’autres langages suivent aussi la norme ECMA-262, comme Flash 5 ActionScript d’Adobe ou JScript de Microsoft.\n\nPour en savoir plus\n\nDifferences from ECMA-262 and JavaScript"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#utilisation-de-javascript",
    "href": "posts/2018-02-17-introduction-javascript/index.html#utilisation-de-javascript",
    "title": "Introduction au langage JavaScript",
    "section": "UTILISATION DE JAVASCRIPT",
    "text": "UTILISATION DE JAVASCRIPT\nJavaScript est principalement utilisé dans les navigateurs web, mais on le trouve aussi dans d’autres environnements tels que Node.js, Apache CouchDB voire Adobe Acrobat.\nJavaScript permet d’automatiser certaines tâches qui rendront les pages web interactives. Dans le contexte de ce cours, l’utilisation de JavaScript sera limitée aux applications dans des navigateurs web utilisés par des humains.\nExemples d’utilisation :\n\nEffets visuels animés.\nVérification des données entrées par un utilisateur.\nCommunication automatique avec des appareils IoT.\n…\n\n\nPour en savoir plus\n\nJavaScript sur MDN\nUne réintroduction à JavaScript sur MDN"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#versions",
    "href": "posts/2018-02-17-introduction-javascript/index.html#versions",
    "title": "Introduction au langage JavaScript",
    "section": "VERSIONS",
    "text": "VERSIONS\nCurieusement, il est difficile de déterminer la version JavaScript utilisée par les navigateurs web. Chose incroyable, le langage n’offre pas de moyen d’obtenir cette information par programmation. On trouve des hacks sur internet, mais aucune solution officielle.\nEn utilisant un de ces hacks, j’ai trouvé les résultats suivants (6 janvier 2018) :\n\n\n\nJS\nNavigateur\nOS\n\n\n\n\n1.3\nInternet Explorer 11.125.16299.0\nWin10\n\n\n1.5\nMicrosoft Edge 41.16299.15.0\nWin10\n\n\n1.5\nFirefox 57.0.4 (64 bits)\nWin10\n\n\n1.5\nFirefox 57.0.4 (64 bits)\nmacOS\n\n\n1.7\nChrome 63.0.3239.132 (64 bits)\nWin10\n\n\n1.7\nChrome 63.0.3239.132 (64 bits)\nmacOS\n\n\n1.7\nOpera 50.0.2762.45\nmacOS\n\n\n1.7\nOpera Neon 1.0.2531.0 (64-bit)\nmacOS\n\n\n1.7\nSafari 11.0.2\nmacOS\n\n\n\nOn voit dans la table ci-dessus que la majorité des navigateurs modernes utilisent la version 1.7 de JavaScript. Firefox et Edge utilisent la version 1.5 et Internet Explorer est à la traîne avec la version 1.3. Ces résultats sont surprenants, parce que si on en croit la table de correspondance du site W3Schools (au bas de la page), ces versions sont très vieilles (informatiquement parlant) :\n\n\n\nJS\nECMA\nAnnée\n\n\n\n\n1.3\n1\n1998\n\n\n1.5\n3\n2000\n\n\n1.7\n3\n2006"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#position-des-scripts",
    "href": "posts/2018-02-17-introduction-javascript/index.html#position-des-scripts",
    "title": "Introduction au langage JavaScript",
    "section": "POSITION DES SCRIPTS",
    "text": "POSITION DES SCRIPTS\nÀ l’instar des feuilles de style CSS, le code JavaScript peut être défini dans 3 endroits différents :\n\nDans un ou plusieurs fichiers externes.\nDans une ou plusieurs balises &lt;script&gt; qui peuvent se trouver dans la balise &lt;head&gt; ou dans la balise &lt;body&gt;.\nDans certains attributs de certains éléments HTML, comme &lt;body onload&gt; ou &lt;img onerror&gt;.\n\n\nJS externe au fichier HTML\nLes avantages de placer le code JS dans un ou plusieurs fichiers externes sont les mêmes que pour les fichiers CSS, c’est-à-dire que les informations ne seront téléchargées qu’une fois et mises en cache par les agents utilisateurs. De plus, plusieurs fichiers peuvent être regroupés en un seul pour minimiser le nombre de requêtes HTTP.\nVoici un exemple de fichier JS :\n\"use strict\";\nfunction main(source)\n{\n    var now = new Date();\n    console.log(\"Début du script \" + now.getTime() +\n                \"\\nsource = \" + source);\n}\nmain(\"index.js\");\nPour faire appel à ce script, il faut inclure la balise &lt;script&gt; ci-dessous dans le fichier HTML :\n&lt;script src=\"index.js\"&gt;&lt;/script&gt;\nLe plus souvent, on l’inclura juste avant la fermeture de la balise &lt;/body&gt; car ceci a l’avantage de nous assurer que l’agent utilisateur a connaissance de toute la structure du fichier avant d’exécuter le script. Cependant, il est possible d’intégrer la balise &lt;script&gt; presque n’importe où dans le fichier et on la trouve souvent dans la balise &lt;head&gt;.\n\n\nJS interne au fichier HTML, dans la balise &lt;script&gt;\nLes avantages de placer le code JS dans un fichier qui contient les instructions JS et HTML sont les mêmes que pour le CSS (s’y référer pour plus de détails).\nVoici un exemple de balises &lt;script&gt; intégrées au fichier HTML. On peut observer que ces balises peuvent être placées indifféremment dans la section head ou body et que la variable now et la fonction main définies dans le premier script sont globales et peuvent donc être réutilisées dans les scripts suivants.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=utf-8 /&gt;\n        &lt;title&gt;JS dans balise script&lt;/title&gt;\n        &lt;script&gt;\n            \"use strict\";\n            var now = new Date();\n            function main(source)\n            {\n                console.log(\"fonction main \" + now.getTime() +\n                \"\\nsource = \" + source);\n            }\n            main(\"head script\");\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script&gt;\n            \"use strict\";\n            main(\"body script\");\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\nDe la même manière si une fonction ou une variable sont définies dans un fichier externe, on peut y accéder dans un script de la page HTML.\n\nOn remarque également que c’est la même balise &lt;script&gt; qui est utilisée que le code JS soit externe ou interne à la page HTML. Par contraste, CSS utilise la balise &lt;style&gt; pour le code interne et la balise &lt;link&gt; pour le code externe.\n\n\n\nJS interne au fichier HTML, dans les attributs d’un élément HTML\nCertains éléments HTML possèdent des attributs qui acceptent du code JavaScript. Par exemple, dans le code ci-dessous, on voit que les éléments &lt;html&gt; et &lt;body&gt; ont respectivement leurs attributs onclick et onload qui contiennent du code JavaScript.\n\nhtml onclick ⇒ est exécuté lorsque l’élément &lt;html&gt; est cliqué.\nbody onload ⇒ est exécuté lorsque l’élément &lt;body&gt; est chargé.\n\nOn voit aussi qu’un script externe est appelé (&lt;script src=\"index.js\"&gt;&lt;/script&gt;) et que la fonction main() qui y est définie est utilisée par l’attribut onload.\nDe la même manière, la variable cpt définie dans le script à la fin de l’élément &lt;head&gt; peut être utilisée par le JS de l’attribut onclick car elle est globale. À priori, c’est une mauvaise idée de déclarer une variable globale après qu’elle soit utilisée comme dans cet exemple, mais l’évènement onclick ne sera disponible qu’une fois la page complètement chargée, donc dans ce cas, ça n’a pas d’incidence.\n\nÀ noter que le préfixe javascript: est optionnel, sauf lorsqu’on utilise du JavaScript dans un attribut href.\n\n&lt;!DOCTYPE html&gt;\n&lt;html onclick=\"javascript:\n               'use strict';\n               cpt += 1;\n               console.log('html onclick ' + cpt);\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;JS dans les attributs HTML&lt;/title&gt;\n    &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        \"use strict\";\n        var cpt = 0;\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"javascript:\n              'use strict';\n              main('body onload');\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#les-bases-du-langage",
    "href": "posts/2018-02-17-introduction-javascript/index.html#les-bases-du-langage",
    "title": "Introduction au langage JavaScript",
    "section": "LES BASES DU LANGAGE",
    "text": "LES BASES DU LANGAGE\n\nCasse\nLe langage JavaScript est sensible à la casse, ce qui veut dire que les majuscules et les minuscules ne sont pas équivalentes.\nPar exemple :\nelement = document.getElementById(id); // correct\nELEMENT = DOCUMENT.GETELEMENTBYID(ID); // incorrect\n\n\nFin d’instructions\nLes instructions sont terminées par le caractère ;. Les navigateurs sont souvent assez souples et tolèrent son ommission. Attendez-vous à de méchants bugs cependant, donc mieux vaut indiquer systématiquement le caractère ;.\n\n\nLa directive use strict\n\"use strict\";\nLa directive \"use strict\"; se place au début d’un script et indique qu’il doit être exécuté en mode “strict” qui permet au navigateur d’exécuter le script plus rapidement. Avec \"use strict\";, la déclaration des variables est obligatoire comme nous allons le voir ci-dessous.\nPour les détails voir : le mode scrict (MDN, fr).\n\n\nDéclaration des variables\nLorsqu’on utilise le mode strict, les variables doivent être déclarées et ceci ce fait généralement avec le mot clé var.\nconsole.log( a ); // Uncaught ReferenceError: a is not defined\nvar a;            // Déclaration de la variable a\nconsole.log( a ); // a = Undefined\na = 3.14;\nconsole.log( a ); // a = 3.14\nOn peut aussi déclarer les variables avec let et const. La portée de let est plus réduite que celle de var. const n’est pas supporté par tous les agents utilisateurs, pour l’instant je vous conseille d’éviter de l’utiliser. La plupart du temps, c’est le mot clé var que l’on utilisera.\nInstruction let (MDN, fr)\n\n\nPortée d’une variable\nvar x = 1;        // x est global\nconsole.log( \"1. x = \" + x ); // x est disponible à l’extérieur de la fonction\n\nfunction portée() {\n    console.log( \"3. x = \" + x ); // x est disponible à l’intérieur de la fonction\n    x = 1111;\n    var y = 10;\n    console.log( \"4. y = \" + y );\n}\n\nconsole.log( \"2. x = \" + x ); // x est disponible à l’intérieur de la fonction\nportée();\nconsole.log( \"5. x = \" + x ); // x est disponible à l’intérieur de la fonction\nconsole.log( \"6. y = \" + y ); // x est disponible à l’intérieur de la fonction\n\n// Les variables définies dans la fonction ne sont plus accessibles à l’extérieur.\n\n\nModification d’une variable avec des opérateurs arithmétiques\nvar i = 0;\ni += 2;\nconsole.log( i ); // 2\ni -= 20;\nconsole.log( i ); // -18\ni *= 2;\nconsole.log( i ); // -36\ni /= 5;\nconsole.log( i ); // -7.2\ni %= 5;\nconsole.log( i ); // -2.2\ni++\nconsole.log( i ); // -1.2\n++i\nconsole.log( i ); // -0.2\ni--\nconsole.log( i ); // -1.2\n--i\nconsole.log( i ); // -2.2\nPour la division entière, voir http://stackoverflow.com/a/17218003/3057377\n\n\nTest if-then-else\n/*\nLa structure “if-then-else” emprunte la syntaxe du C.\nSi une condition ne comporte qu’une expression, les accolades sont optionnelles.\n*/\n\nif( true )\n    console.log( \"C’est vrai\" );\nelse\n    console.log( \"C’est faux\" );\n\n/*\nSi une condition comporte plusieurs expressions, les accolades sont obligatoires.\n*/\nif( false )\n    console.log( \"C’est vrai\" );\nelse\n{\n    console.log( \"C’est...\" );\n    console.log( \"..faux\" );\n}\n\n\nComparaison faible vs stricte\n/*\nComparaison faible vs stricte\n== ⇒ Comparaison “faible” ⇒ pas de vérification du type\n=== ⇒ Comparaison “stricte” ⇒ avec vérification du type\nhttps://developer.mozilla.org/fr/docs/Web/JavaScript/Les_diff%C3%A9rents_tests_d_%C3%A9galit%C3%A9\n*/\n\nvar a = 6;\nvar b = '6';\n\n// la variable “a” contient le nombre 6 sous forme d’un nombre.\n// La variable “b” contient le nombre 6 sous forme d’une chaîne de caractères (string).\n// avec l’opérateur ==, les deux variables sont égales.\nif( a == b )\n    console.log( \"== OK\" );\nelse\n    console.log( \"== NOT OK\" );\n\n// ===\n// avec l’opérateur ===, les deux variables ne sont pas égales car\n// elles n’ont pas le même type.\nif( a === b )\n    console.log( \"=== OK\" );\nelse\n    console.log( \"=== NOT OK\" );\n\n\nBoucle while\n\n// La structure “while” emprunte la syntaxe du C.\n// Si elle ne comporte qu’une expression, les accolades sont optionnelles.\nvar compteur = 0;\nwhile( compteur &lt; 10 )\n    console.log( \"compteur = \", compteur++ );\n\n// Attention, la variable “compteur” est définie en dehors de la boucle,\n// donc la boucle suivante ne sera jamais exécutée, car “compteur == 10”\n// à cet endroit du code.\nwhile( compteur &lt; 10 )\n    console.log( \"compteur = \", compteur++ );\n\n// Si on veut isoler la variable compteur, on peut créer un bloc\n{\n    let compteur = 0;\n    while( compteur &lt; 5 )\n        console.log( \"compteur = \", compteur++ );\n};\n\n// Ici “compteur” vaut 10. Les modifications apportées à la variables déclarée\n// avec “let” dans le bloc ne sont pas visbles à l’extérieur du bloc.\nconsole.log( \"compteur (après bloc) = \", compteur );\n\n\nQuitter une boucle avec break\n// On peut quitter une boucle “while” avec un “break”\ncompteur = 0;\nwhile( compteur &lt; 10 )\n{\n    console.log( \"compteur = \", compteur++ );\n    if( compteur &gt; 5 ) break;\n}\n\n\nLa boucle do...while\ncompteur = 0;\ndo\n    console.log( \"compteur = \", compteur++ );\nwhile( compteur &lt; 10 )\n\n\nIncrémentation\n// POST INCRÉMENTATION “X++”\n// Si l’opérateur est utilisé en suffixe (par exemple : x++),\n// il renvoie la valeur avant l’incrémentation.\ncompteur = 0;\nwhile( compteur &lt; 10 )\n    console.log( \"compteur = \", compteur++ );\n\n// PRÉ INCRÉMENTATION “++X”\n// Si l’opérateur est utilisé en préfixe (par exemple : ++x),\n// il renvoie la valeur après l’incrémentation.\ncompteur = 0;\nwhile( compteur &lt; 10 )\n    console.log( \"compteur = \", ++compteur );\n\n// Ça marche aussi pour la décrémentation “--”\n// plus de détails ici :\n// https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques\n\n\nLa boucle for\n// BOUCLE “FOR” AVEC VAR\nfor( var cpt=1; cpt&lt;=5; cpt++ ) // “++cpt” ou “cpt++” sont équivalents ici.\n    console.log( \"cpt = \", cpt );\n\n// ATTENTION LA VARIABLE “CPT” EST AUSSI DÉFINIE EN DEHORS DE LA BOUCLE “FOR”\nconsole.log( \"cpt = \", cpt );\n\n// Si on ne veut pas que la varible de compteur soit définie en dehors\n// de la boucle “for”, il faut la déclarer avec “let”.\nconsole.log( \"\\n\\n\\n# BOUCLE “FOR” AVEC LET\" );\nfor( let cptLet=1; cptLet&lt;=5; cptLet++ )\n    console.log( \"cptLet = \", cptLet );\n// Ici, “cptLet” n’est plus défini.\n\nconsole.log( \"\\n\\n\\n# BOUCLE “FOR” INFINIE\" );\nfor( ;; )\n{\n    break;\n}\n\n\nLes fonctions\nconsole.log( \"\\n\\n\\n# APPEL DE FONCTIONS\" );\n\n// On peut appeler une fonction avant qu’elle ne soit définie dans le fichier.\ndireBonjour();\nfunction direBonjour()\n{\n    console.log( \"Bonjour 1 !\" );\n}\ndireBonjour();\n\n\nValeur de sortie des fonctions et portée des variables\n// Une fonction ne peut retourner qu’une seule valeur\n// les variables définies dans les fonctions ne sont pas visibles à l’extérieur\nfunction direBonjour2()\n{\n    var message = \"Bonjour 2 !\" // “message” n’est défini que dans la fonction et pas à l’extérieur.\n    return message;\n}\nvar resultat = direBonjour2();\nconsole.log( resultat );\nconsole.log( typeof( message ) ); // typeof( message ) = undefined\n\n\nParamètres des fonctions\nfunction direBonjour( prenom1, prenom2 )\n{\n    var message = \"Bonjour, \" + prenom1 + \" et \" + prenom2 + \" !\";\n    return message;\n}\nconsole.log( direBonjour( \"Baptiste\" ) );\nconsole.log( direBonjour( \"Baptiste\", \"Sophie\" ) );\nconsole.log( direBonjour( \"Baptiste\", \"Sophie\", \"Toto\" ) );\n\n\nLes chaînes de caractères (string)\nconsole.log( \"\\n\\n\\n# LES CHAÎNES DE CARACTÈRES (STRING)\" );\n\n/*\nEn Javascript il n’y a pas de différence entre\nles guillemets simples et les guillemets doubles\n*/\nconsole.log( 'guillemets simples ' );\nconsole.log( \"guillemets doubles \" );\nconsole.log( '\"guillemets\" \\'simples\\' ' );\nconsole.log( \"'guillemets' \\\"doubles\\\" \" );\n\nAttention en JSON, seuls les guillemets doubles sont valables !\n\n\nIl existe une nouvelle fonctionnalité appelée “Littéraux de gabarits” qui utilise le caractère “`” (backticks ou accent grave) comme délimiteur. Cette fonctionnalité est récente et n’est pas acceptée universellement.\n\n\n\nConcaténation de chaînes de caractères\nconsole.log( \"Bonjour \" + \"à vous !\" );\nconsole.log( \"Le chiffre vaut \" + 7 );"
  },
  {
    "objectID": "posts/2018-02-17-introduction-javascript/index.html#les-librairies",
    "href": "posts/2018-02-17-introduction-javascript/index.html#les-librairies",
    "title": "Introduction au langage JavaScript",
    "section": "LES LIBRAIRIES",
    "text": "LES LIBRAIRIES\n\nhttps://www.jqwidgets.com/\nhttp://dashing.io/"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "",
    "text": "Voir aussi l’article sur l’ESP8266 Amica\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#firmware-nodemcu",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#firmware-nodemcu",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Firmware NodeMCU",
    "text": "Firmware NodeMCU\n\nhttp://nodemcu.com/index_en.html"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#référence-de-la-carte-chez-banggood",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#référence-de-la-carte-chez-banggood",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Référence de la carte chez Banggood",
    "text": "Référence de la carte chez Banggood\n\nhttp://www.banggood.com/V3-NodeMcu-Lua-WIFI-Development-Board-p-992733.html?p=0431091025639201412F\n\n\nAliExpress propose des versions moins chères avec un chip silabs cp2102 au lieu du CH340G pour la communication USB.\nCette carte utilise un ESP8266 ESP-12E (d’après l’apparence). Voir les différentes versions de l’ESP8266."
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#référence-fabricant",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#référence-fabricant",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Référence fabricant",
    "text": "Référence fabricant\n\n\n\nouilogique.com\n\n\nLa carte est donc une LoLin du fabricant WeMos\nLa page de la carte en question : www.wemos.cc/wiki/\n\nL’ESP8266 a été développé par Espressif. D’après cet article, il semblerait que l’ESP8266 a d’abord été vendu comme une passerelle UART pour les microcontrôleurs, mais qu’en fait il contient un processeur 32-bit Tensilica Xtensa LX106 à 80 MHz avec un “full WiFi stack”."
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#communication-usb",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#communication-usb",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Communication USB",
    "text": "Communication USB\n⚠ Cette carte utilise une puce CH340G pour la communication USB. Pour l’installation du pilote sur OSX, voir l’article Utiliser un chip CH340G au lieu d’un FTDI.\nSur le site du fabricant, il y a deux drivers pour Mac :\nMac (old) ⇒ MD5 = 505487fe1033a9485f2e3fb0520718e8\nMac (new) ⇒ MD5 = f2c61b093909d6d54f6a466e7e367a39\nLa version “old” a le même MD5 que celle disponible à http://www.wch.cn/download/CH341SER_MAC_ZIP.html.\nIl me semble que la version “new” ne nécessite pas d’enlever la protection d’OSX contre les pilotes non signés ⇒ à vérifier.\n\nAdresse de la carte\nSur mon MacBook Pro, l’adresse de la carte est /dev/tty.wchusbserial1410 sur le port USB de gauche ou /dev/tty.wchusbserial1420 sur le port USB de droite.\n\nÀ noter que je ne branche jamais de cartes de développement sur mon clavier externe, car ce clavier est un hub sans alimentation qui consomme donc du courant sur le port USB. Quand on connecte une carte, il y a le risque que le Mac fasse un reboot comme si on lui avait enlevé l’alimentation et comme ça m’est déjà arrivé, je ne recommence plus.\nD’ailleurs, les ports USB sous-alimentés du Raspberry Π ne supportent pas ce clavier pour la même raison : il consomme trop (50 mA mesuré).\n\nls /dev | grep tty.wchusbserial # retourne par ex : tty.wchusbserial1410\nls /dev/tty.wchusbserial1410 # adresse OK si cette commande retourne quelque chose"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#mise-à-jour-du-firmware",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#mise-à-jour-du-firmware",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Mise à jour du firmware",
    "text": "Mise à jour du firmware\n\nInstaller esptool\ngit clone https://github.com/themadinventor/esptool.git\ncd esptool\npython setup.py install\nwhich esptool.py # ⇒ /usr/local/bin/esptool.py\n\n\nTélécharger le dernier firmware\n\nPar défaut la carte est livrée avec le firmware floating point La dernière version (nodemcu_float_0.9.6-dev_20150704.bin) fonctionne pour moi.\n\n\nhttp://www.wemos.cc/wiki/Tutorial/Downloads#firmware\n\n\n\nFlasher le firmware\nUSBPORT=/dev/tty.wchusbserial1410\nFIRMWARE=nodemcu_float_0.9.6-dev_20150704.bin\nesptool.py           \\\n    --port $USBPORT  \\\n    --baud 230400    \\\n    write_flash      \\\n    --flash_mode qio \\\n    --flash_size 32m \\\n    --flash_freq 40m \\\n    0x00000 $FIRMWARE"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#pinout",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#pinout",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Pinout",
    "text": "Pinout\n\n\n\nouilogique.com"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#programmation-de-lesp8266",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#programmation-de-lesp8266",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Programmation de l’ESP8266",
    "text": "Programmation de l’ESP8266\nL’ESP8266 peut être programmé de plusieurs façons :\n\nEn Arduino C (voir ci-dessous)\nEn C, avec le SDK d’Espressif\nEn C, avec Sming\nEn Lua (voir ci-dessous)\nEn JavaScript, avec le firmware Espruino\nEn MicroPython\nEn BASIC\n\n{: #programmation-en-arduino-c }"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#programmation-de-lesp8266-en-arduino-c",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#programmation-de-lesp8266-en-arduino-c",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Programmation de l’ESP8266 en Arduino C",
    "text": "Programmation de l’ESP8266 en Arduino C\nLes informations d’origine se trouvent ici : https://github.com/esp8266/Arduino/\n\nConfiguration de l’IDE Arduino\n\nÀ faire une fois\n\n\nTélécharger et installer, l’IDE Arduino\nOuvrir les préférences de l’IDE Arduino\nCliquer sur “URL de gestionnaire de cartes supplémentaires” et coller le lien suivant :\n\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\n\nInstaller la bibliothèque “esp8266 by ESP8266 Community” (Outils/Type de carte/Gestionnaire de carte)\n\nLa bibliothèque est installée au chemin suivant :\n~/Library/Arduino15/packages/esp8266/hardware/esp8266/\n\nNote : Adafruit et LoLin proposent d’autres gestionnaires. J’ai choisi la version de la communauté qui maintient le site esp8266.com. La version d’Adafruit est un fork de celle d’esp8266.com.\n\n\n\nConfiguration de la carte dans l’IDE\n\nÀ faire pour chaque ESP différent. Exemple pour le LoLin (ESP-12E).\n\nDans le menu Outils\n\n\n\nouilogique.com\n\n\n\nL’ESP8266 peut être overclocké à 160 MHz. J’ai observé que la librairie Tone.h n’aime pas ça…\n\n{: #compilation-et-telechargement }\n\n\nCompilation et téléchargement des programmes\nLa compilation et le téléchargement se font exactement comme pour une carte Arduino. Pour la programmation, il peut y avoir quelques différences de fonctionnalité liées aux différences du hardware et à l’implémentation des bibliothèques. Il y a quelques informations sur le GitHub d’ESP8266 et Adafruit a aussi documenté quelques différences sur leur fork.\n\n\nGestionnaire de téléchargement esp8266fs\nL’ESP8266 dispose d’un système de fichiers SPIFFS et on peut donc télécharger des fichiers depuis un ordinateur sur l’ESP8266 via l’IDE Arduino. Pour ce faire, il faut installer un gestionnaire de téléchargements appelé esp8266fs. Les instructions se trouvent ici :\n\nhttps://github.com/esp8266/arduino-esp8266fs-plugin/\n\nIl y a également quelques informations sur cette page :\n\nhttp://esp8266.github.io/Arduino/versions/2.0.0/doc/filesystem.html#uploading-files-to-file-system\n\n\nCe gestionnaire de téléchargement ne sert pas à programmer l’ESP8266 (voir Compilation et téléchargement pour cette fonctionnalité), mais à télécharger des fichiers annexes, typiquement des fichiers qui seront servis par une interface web (HTML, images…) ou des fichiers de configuration.\n\nL’utilisation est très simple :\n\nCréer un répertoire data dans le dossier du croquis.\nY copier les fichiers.\nUtiliser la fonction ESP8266 Sketch Data Upload dans le menu Outils (voir image du menu Outils ci-dessus).\n\nLe gros problème de cette façon de faire, c’est que le téléchargement prend beaucoup de temps quelle que soit la taille du répertoire data, car l’entier de la mémoire disponible est flashé.\nÀ 115’200 bauds, il faut environ 2 min pour une Flash Size SPIFFS d’1 Mo et 6 min pour une Flash Size SPIFFS de 3 Mo (réglage Flash Size dans le menu Outils, voir image ci-dessus). On peut diminuer ces temps d’un facteur 2 en utilisant une vitesse de transmission de 230’400 bauds. Au delà l’IDE génère une erreur. À noter que même à 115’200 bauds, l’IDE plante de temps en temps et qu’il est nécessaire de le redémarrer et de débrancher et rebrancher l’ESP8266 également.\n\n\nExemples de programme\nBlink ESP8266\nAffiche quelques caractéristiques de l’ESP8266 dans la console série\n\n\nNotes\n\nSur OSX, les bibliothèques sont installées dans le répertoire ~/Library/Arduino15/packages/.\nQuelques variables utiles sont définies dans le fichier ~/Library/Arduino15/packages/esp8266/hardware/esp8266/2.2.0/variants/nodemcu/pins_arduino.h.\n\n{: #programmation-en-lua }"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#programmation-de-lesp8266-en-lua",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#programmation-de-lesp8266-en-lua",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Programmation de l’ESP8266 en Lua",
    "text": "Programmation de l’ESP8266 en Lua\nLes scripts Lua peuvent être interprétés ou compilés avec le firmware NodeMCU.\nOn trouve quantité de programmes sur le web pour charger les scripts Lua sur l’ESP8266. J’ai testé les suivants :\n\nesplorer\nesp8266 (Node.js)\nluatool\nnodemcu-uploader\nupload à la main\n\n\nEsplorer\nEsplorer est un programme java avec une interface graphique assez moche. Au-delà de son aspect, il est rapide et stable et c’est celui que j’utilise en ce moment.\n\nhttp://esp8266.ru/esplorer/\nhttp://esp8266.ru/esplorer-latest/?f=ESPlorer.zip\n\n\n\nesp8266 (Node.js)\nIl faut avoir installé Node.js au préalable. Ne fonctionne pas avec la version 4.2.1 de Node.js, mais fonctionne avec la version 0.12.7.\n\nhttps://www.npmjs.com/package/esp8266\n\nLa vitesse de transmission est fixée à 9600 bits/s et ne peut pas être changée.\n# Installation\nnpm install esp8266 -g\n\n# Définition du port\nesp port set /dev/tty.wchusbserial1410\n\n# Liste des fichiers\nesp file list\n\n# Chargement d’une version compressée des scripts\nesp file push init.lua\n\n\nluatool\n\nhttps://github.com/4refr0nt/luatool\n\ngit clone https://github.com/4refr0nt/luatool.git\n#!/bin/bash\n\n# upload.sh ⇒ upload les scripts Lua avec luatool\n# https://github.com/4refr0nt/luatool\n\nUSBPORT=/dev/tty.wchusbserial1420\n\n./luatool/luatool/luatool.py  \\\n    --port $USBPORT           \\\n    --src  init_1.lua         \\\n    --dest init.lua           \\\n    --verbose                 \\\n    --restart\n\n\nnodemcu-uploader\n\nhttps://github.com/kmpm/nodemcu-uploader\n\ngit clone https://github.com/kmpm/nodemcu-uploader.git\n#!/bin/bash\n\n# upload.sh ⇒ upload les scripts Lua avec nodemcu-uploader\n# https://github.com/kmpm/nodemcu-uploader\n\nUSBPORT=/dev/tty.wchusbserial1420\nBAUD=115200\n\n./nodemcu-uploader/nodemcu-uploader.py \\\n    --port $USBPORT                    \\\n    --baud $BAUD                       \\\n    upload                             \\\n    init1.lua:init.lua                 \\\n    --restart\n\n\nÀ la main\n\nOn peut aussi envoyer le fichier ligne par ligne à la main avec des logiciels comme screen ou CoolTerm\n\n\nPar défaut la vitesse de communication est de 9600 bits/s. Avec luatool, on ne peut aller qu’à cette vitesse. Avec nodemcu-uploader on peut aller plus haut. J’ai testé à 115200 bits/s et ça fonctionne, mais la commnunication se bloque de temps en temps. Il me semble qu’il est plus sage de travailler uniquement à 9600 bits/s."
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#hello-world",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#hello-world",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Hello World",
    "text": "Hello World\nCréer un fichier init_1.lua\n-- init_1.lua\n-- Fait clignoter la LED de l’ESP8266\nled1 = 4\ngpio.mode( led1, gpio.OUTPUT )\nfor i=1,10 do\n    gpio.write( led1, gpio.HIGH )\n    tmr.delay( 0.1E6 )\n    gpio.write( led1, gpio.LOW )\n    tmr.delay( 1E6 )\nend\nprint( \"Coucou, c'est moi !\" )\nPour l’upload, créer un fichier upload.sh (voir ci-dessus).\nAlternativement, il est possible d’envoyer le fichier ligne par ligne avec screen ou CoolTerm.\nfile.open( \"init.lua\", \"w\" )\nfile.writeline([[ led1 = 4                          ]])\nfile.writeline([[ gpio.mode( led1, gpio.OUTPUT )    ]])\nfile.writeline([[ for i=1,10 do                     ]])\nfile.writeline([[     gpio.write( led1, gpio.HIGH ) ]])\nfile.writeline([[     tmr.delay( 0.1E6 )            ]])\nfile.writeline([[     gpio.write( led1, gpio.LOW )  ]])\nfile.writeline([[     tmr.delay( 1E6 )              ]])\nfile.writeline([[ end                               ]])\nfile.writeline([[ print( \"Coucou, c'est moi !\" )    ]])\nfile.close()"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#exemple-avec-un-mini-serveur-web",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#exemple-avec-un-mini-serveur-web",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Exemple avec un mini serveur web",
    "text": "Exemple avec un mini serveur web\n\nhttp://randomnerdtutorials.com/esp8266-web-server/"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#iot",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#iot",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "IOT",
    "text": "IOT\n\ndweet.io\ndweet + NodeMCU\nFreeboard\nhttps://www.openhomeautomation.net/internet-of-things-dashboard/"
  },
  {
    "objectID": "posts/2015-09-27-NodeMCU_esp8266/index.html#liens",
    "href": "posts/2015-09-27-NodeMCU_esp8266/index.html#liens",
    "title": "Mise en route d’une carte WeMos-LoLin avec le firmware NodeMCU et un module WiFi ESP8266",
    "section": "Liens",
    "text": "Liens\n\nNodeMCU API sur GitHub\nNodeMCU API sur nodemcu.com\nhttps://learn.adafruit.com/adafruit-huzzah-esp8266-breakout?view=all\nhttp://neilkolban.com/tech/esp8266/\nhttp://randomnerdtutorials.com/home-automation-using-esp8266/\nhttps://www.hackster.io/rayburne/esp8266-01-using-arduino-ide\nhttp://www.esp8266.com\nhttp://frightanic.com\nComparison of ESP8266 NodeMCU development boards\neLua project\nhttp://blog.nyl.io/esp8266-motor/\nhttp://hackaday.com/2015/03/18/how-to-directly-program-an-inexpensive-esp8266-wifi-module/\nhttp://benlo.com/esp8266/esp8266QuickStart.html\nBuilding NodeMCU from Source for the ESP8266\nIntroduction to the MQTT Protocol on NodeMCU\nESP8266 WiFi File Management\nCommandes AT\n4 reasons I abandoned NodeMCU/Lua for ESP8266, (24th April 2015)\n4 ways to eliminate ESP8266 resets\nHow To: Pick the right pins on the NodeMCU ESP8266 and ESP32 - https://github.com/thehookup/ESP32_Ceiling_Light/blob/master/GPIO_Limitations_ESP32_NodeMCU.jpg - https://github.com/thehookup/Wireless_MQTT_Doorbell/blob/master/GPIO_Limitations_ESP8266_NodeMCU.jpg"
  },
  {
    "objectID": "posts/2016-10-22-esp8266-dht22-oled/index.html",
    "href": "posts/2016-10-22-esp8266-dht22-oled/index.html",
    "title": "Température et humidité avec un capteur DHT22 sur ESP8266",
    "section": "",
    "text": "Un petit programme pour voir si la bibliothèque d’Adafruit pour lire la température et l’humidité de l’air à l’aide d’un capteur DHT22 fontionne sur l’ESP8266. Résultat des courses : ça fonctionne nickel !\nLes mesures sont envoyées sur le port série, sur un écran OLED et sur dweet.io.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-10-22-esp8266-dht22-oled/index.html#code-source",
    "href": "posts/2016-10-22-esp8266-dht22-oled/index.html#code-source",
    "title": "Température et humidité avec un capteur DHT22 sur ESP8266",
    "section": "Code source",
    "text": "Code source\n\nhttps://github.com/NicHub/ouilogique-ESP8266-Arduino/tree/master/esp8266-dht22-oled"
  },
  {
    "objectID": "posts/2016-10-22-esp8266-dht22-oled/index.html#câblage",
    "href": "posts/2016-10-22-esp8266-dht22-oled/index.html#câblage",
    "title": "Température et humidité avec un capteur DHT22 sur ESP8266",
    "section": "Câblage",
    "text": "Câblage\n\n\n\nESP8266 — DHT22 — Écran OLED"
  },
  {
    "objectID": "posts/2016-10-22-esp8266-dht22-oled/index.html#matériel",
    "href": "posts/2016-10-22-esp8266-dht22-oled/index.html#matériel",
    "title": "Température et humidité avec un capteur DHT22 sur ESP8266",
    "section": "Matériel",
    "text": "Matériel\n\nPullups I²C : 4.7 kΩ\nPullup DHT22 : 10 kΩ\nESP8266\nCapteur de température et d’humidité DHT22\nÉcran OLED 128×64\n\nhttps://portals.aliexpress.com/adcenter/generate_url.htm"
  },
  {
    "objectID": "posts/2015-06-11-mooc_initiation_aux_microcontroleurs/index.html",
    "href": "posts/2015-06-11-mooc_initiation_aux_microcontroleurs/index.html",
    "title": "MOOC — Initiation aux microcontrôleurs",
    "section": "",
    "text": "Un peu de pub pour le cours de microcontrôleurs en ligne de l’EPFL :\n\nhttps://www.coursera.org/learn/microcontroleurs\n\nEt voici le cours au format GitBook :\nwww.gitbook.com/book/nichub/initiation-aux-microcontroleurs/details\n\n\n\nMOOC Microcontrôleurs EPFL\n\n\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-06-18-mppt/index.html",
    "href": "posts/2017-06-18-mppt/index.html",
    "title": "MPPT — Maximum Power Point Tracking",
    "section": "",
    "text": "© ouilogique.com"
  },
  {
    "objectID": "posts/2016-05-25-test_ecran_oled_i2c_128x64/index.html",
    "href": "posts/2016-05-25-test_ecran_oled_i2c_128x64/index.html",
    "title": "Test d’un écran OLED 128×64 I²C",
    "section": "",
    "text": "ouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n/*\n\nPROGRAMME BASIQUE POUR TESTER L’ÉCRAN OLED 128×64 I²C\n\nRÉFÉRENCE AliExpress DE L’ÉCRAN\nhttp://fr.aliexpress.com/item/1Pcs-Yellow-blue-double-color-128X64-OLED-LCD-LED-Display-Module-For-Arduino-0-96/32305641669.html\n\nVERSION ORIGINALE DU PROGRAMME\nhttp://www.projetsdiy.fr/ssd1306-mini-ecran-oled-i2c-128x64-arduino/\n\nLIBRAIRIE Adafruit_SSD1306\nhttps://github.com/adafruit/Adafruit_SSD1306.git\n\nCONNEXIONS\nGND    GND\nVDD    +5V\nSCK    pin A5\nSDA    pin A4\n\nMICROCONTRÔLEUR\nClone Arduino Nano\n\nREMARQUES\nIl faut éditer le fichier Adafruit_SSD1306.h de la manière suivante :\n- À la ligne 69, décommenter le code `#define SSD1306_128_64`\n- À la ligne 70, commenter le code `#define SSD1306_128_32`\n\nCet écran est séparé en deux zones verticales\n- Une zone de 16 px de haut avec des pixels jaunes\n- Une zone de 48 px de haut avec des pixels bleus\nLes deux zones sont séparées d’une largeur d’environ\n1 pixel qui apparaît donc toujours noire.\n\nLa communication I²C fonctionne sans les résistances de pull-up.\nCela dit, il est sans doute préférable d’ajouter deux résistances\nde 4.7 kΩ entre SCK et VDD ainsi qu’entre SDA et VDD.\n\n\nmai 2016, ouilogique.com\n\n*/\n\n#include &lt;Wire.h&gt;\n#include &lt;Adafruit_SSD1306.h&gt;\n\n#define OLED_RESET 4\nAdafruit_SSD1306 display( OLED_RESET );\n\n#if( SSD1306_LCDHEIGHT != 64 )\n#error( \"Height incorrect, please fix Adafruit_SSD1306.h!\" );\n#endif\n\nvoid setup()\n{\n  // Initialise la communication I²C à l’adresse 0x3C.\n  display.begin( SSD1306_SWITCHCAPVCC, 0x3C );\n  display.clearDisplay();\n\n  // Affiche des textes\n  afficheTextes();\n}\n\nvoid loop()\n{\n\n}\n\nvoid afficheTextes( void )\n{\n  display.setTextSize( 2 );\n  display.setTextColor( WHITE );\n  display.clearDisplay();\n\n  display.setCursor( 4, 0 );\n  display.println( \"ouilogique\" );\n\n  display.setCursor( 4, 16 );\n  display.println( \"ouilogique\" );\n\n  display.setTextSize( 1 );\n\n  display.setCursor( 35, 32 );\n  display.println( \"ouilogique\" );\n\n  display.setCursor( 35, 40 );\n  display.println( \"ouilogique\" );\n\n  display.setCursor( 35, 48 );\n  display.println( \"ouilogique\" );\n\n  cadreEcran();\n  display.display();\n}\n\nvoid cadreEcran( void )\n{\n  display.drawRect( 0, 0, display.width()-2, display.height()-2, WHITE );\n}\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "",
    "text": "Voici comment configurer un Raspberry Pi pour l’utiliser avec des LED NeoPixel WS281x. Je présente la version Python, mais d’autres langages sont supportés.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#sources",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#sources",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Sources",
    "text": "Sources\nLes informations de cet article proviennent des sources suivantes :\n\nAdafruit NeoPixels On Raspberry Pi\nrpi_ws281x from jgarff on GitHub"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#câblage",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#câblage",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Câblage",
    "text": "Câblage\nLe Rpi fonctionne en 3.3 V et les NeoPixels en 5 V. Il est donc nécessaire d’utiliser un logic level converter. Les données sont transmises aux LED depuis la broche 18 du Rpi.\nL’anneau de LED a 4 connexions :\n\nDI (signal)\n5 V\nGND\nDO (pas connecté)"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#matériel",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#matériel",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Matériel",
    "text": "Matériel\n\nAnneau de 24 LED WS2812 — NeoPixel\nLogic Level Converter\nRaspberry Pi 2 Model B / Raspbian Stretch\nRaspberry Pi 3 Model B / Raspbian Jessie"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#compilation-et-installation-de-la-librairie-rpi_ws281x",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#compilation-et-installation-de-la-librairie-rpi_ws281x",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Compilation et installation de la librairie rpi_ws281x",
    "text": "Compilation et installation de la librairie rpi_ws281x\nsudo apt-get update\nsudo apt-get install build-essential python-dev git scons swig\ngit clone https://github.com/jgarff/rpi_ws281x.git\ncd rpi_ws281x\nscons\ncd python\nsudo python setup.py install"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#édition-du-fichier-strandtest.py",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#édition-du-fichier-strandtest.py",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Édition du fichier strandtest.py",
    "text": "Édition du fichier strandtest.py\nnano strandtest.py\nModifier la variable LED_COUNT\nLED_COUNT   = 24"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#utilisation-du-pwm",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#utilisation-du-pwm",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Utilisation du PWM",
    "text": "Utilisation du PWM\nComme la bibliothèque rpi_ws281x et l’audio du board du Raspberry utilisent tous les deux le PWM, elles ne peuvent pas être utilisées ensemble. Pour désactiver l’audio, il faut mettre le module du kernel audio de Broadcom dans une liste noire. Pour cela, il faut créer le fichier snd-blacklist.conf :\nsudo nano /etc/modprobe.d/snd-blacklist.conf\nEt lui ajouter la commande suivante :\nblacklist snd_bcm2835\n\nIl faut se rappeler de commenter cette ligne si on veut utiliser l’audio dans d’autres projets !\n\nEt finalement, il faut redémarrer le Rpi :\nsudo reboot"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#test",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#test",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Test",
    "text": "Test\nMaintenant que le Rpi est redémarré, on va dans le répertoire des exemples :\ncd ~/rpi_ws281x/python/examples\nEt on exécute l’exemple strandtest.py. L’instruction sudo est requise car la bibliothèque rpi_ws281x utilise des fonctions de bas niveau et doit donc être exécutée avec les droits de root :\nsudo python strandtest.py"
  },
  {
    "objectID": "posts/2018-04-22-neopixel-raspberry-pi/index.html#utilisation-du-cpu",
    "href": "posts/2018-04-22-neopixel-raspberry-pi/index.html#utilisation-du-cpu",
    "title": "NeoPixel sur Raspberry Pi",
    "section": "Utilisation du CPU",
    "text": "Utilisation du CPU\nVoici ce que me retourne la commande top. On voit que le processus python consomme 1.6% des ressources CPU sur un Raspberry Pi 3 modèle B. Pour pouvoir lancer cette commande, il faut faire tourner strandtest.py dans un autre shell avec la commande screen.\ntop - 13:30:48 up 14 min,  3 users,  load average: 0.19, 0.09, 0.02\nTasks: 155 total,   1 running, 154 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.7 us,  0.2 sy,  0.0 ni, 99.2 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:    945512 total,   327704 used,   617808 free,    25008 buffers\nKiB Swap:   102396 total,        0 used,   102396 free.   207116 cached Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 3438 root      20   0   14236  10712   5960 S   1.6  1.1   0:02.39 python\n 3439 pi        20   0    5276   2520   2020 R   0.7  0.3   0:00.60 top\n    1 root      20   0   22780   3952   2788 S   0.0  0.4   0:02.85 systemd\n    2 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kthreadd"
  },
  {
    "objectID": "posts/2016-08-13-esp8266-01/index.html",
    "href": "posts/2016-08-13-esp8266-01/index.html",
    "title": "Mise en route d’un ESP8266-01",
    "section": "",
    "text": "L’ESP-01 présenté ici, m’a été transmis par Didel. Donc merci à Jean-Daniel Nicoud.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-08-13-esp8266-01/index.html#lesp8266-01",
    "href": "posts/2016-08-13-esp8266-01/index.html#lesp8266-01",
    "title": "Mise en route d’un ESP8266-01",
    "section": "L’ESP8266-01",
    "text": "L’ESP8266-01\nL’ESP8266-01 est un SoC (System on Chip) qui contient un microcontrôleur et un système WiFi. Il ne fonctionne qu’en 3.3 V et n’est pas tolérant au 5 V. Il a deux GPIO (0 & 2) qui peuvent être utilisés pour la communication I²C. Il est pourvu d’un port RS232 qu’on peut utiliser pour lui envoyer des commandes AT. Dans ce tuto, je présente deux façons différentes d’utiliser cet ESP :\n\nEn lui envoyant des commandes AT sur son port RS232 avec un ordinateur ou un microcontrôleur.\nEn programmant directement son microcontrôleur interne en Arduino C.\n\nPour la première partie sur les commandes AT, le firmware NodeMCU doit être installé sur l’ESP. C’est en général le cas pour les ESP neufs.\nLorsque l’ESP est programmé en Arduino C, cela écrase le firmware NodeMCU, mais rien n’est perdu, on peut le flasher à nouveau.\nÀ noter encore que NodeMCU ne permet pas seulement d’utiliser les commandes AT, mais permet également de programmer l’ESP dans le langage Lua, mais ce n’est pas l’objet de ce tuto."
  },
  {
    "objectID": "posts/2016-08-13-esp8266-01/index.html#programmation-avec-des-commandes-at",
    "href": "posts/2016-08-13-esp8266-01/index.html#programmation-avec-des-commandes-at",
    "title": "Mise en route d’un ESP8266-01",
    "section": "Programmation avec des commandes AT",
    "text": "Programmation avec des commandes AT\nSur le web, on trouve surtout des tutos qui décrivent la solution utilisant les commandes AT. À mon avis c’est du gâchis, car ces commandes ne donnent accès qu’à une petite partie des fonctionnalités de ce SoC et nécessitent d’utiliser un microcontrôleur externe alors même que l’ESP en contient déjà un de très bonne facture. Cependant, les commandes AT peuvent être utiles pour des premiers tests.\n\nLes commandes AT peuvent vite être très limitantes car il faudra prévoir toutes les réponses possibles et le programme deviendra donc vite très complexe. En plus ces commandes évoluent avec les versions des firmwares. Donc la compatibilité n’est pas assurée.\n\nL’idée est d’utiliser un ordi avec CoolTerm pour envoyer quelques commandes AT à l’ESP-01. Comme je n’ai pas de bridge USB-RS232, j’utilise un module ESP-12E Amica sur lequel j’ai connecté la broche RST au GND pour que l’ESP-12E ne démarre pas. Ainsi les commandes envoyées de l’ordi se retrouvent directement sur les broches TX et RX de l’ESP-12E. Ce montage peut être schématiquement représenté de la façon suivante :\nordi TX -------   - ESP8266-12E TX ------- ESP8266-01 TX\n               \\/\n               /\\\nordi RX -------   - ESP8266-12E RX ------- ESP8266-01 RX\nOn voit que le TX de l’ESP-12E doit être connecté au TX de l’ESP-01 et inversement pour le RX.\nIl est important de comprendre que l’ESP-12E est utilisé comme un bridge USB-RS232 et pas pour ses fonctionnalités WiFi. J’aurais pu utiliser un Arduino, mais je n’ai que des modules 5 V. Donc j’ai préféré l’ESP-12E qui lui fonctionne en 3.3 V.\n\nCâblage de l’ESP-01\n\nPour VCC et GND, il est nécessaire d’utiliser une alimentation 3.3 V externe, car l’ESP-01 peut être très gourmant (~300 mA), particulièrement lorsque le WiFi se met en route.\nLa broche CHPD (_chip power-down) doit être obligatoirement mise à VCC pour que le module soit actif.\nOptionnellement, on peut aussi mettre RST à VCC pour s’assurer qu’il n’y a pas de reset intempestifs. Ou connecter RST avec une pull-up de 10 kΩ à VCC et un bouton poussoir à GND.\nConnecter TX au TX de l’ESP-12E\nConnecter RX au RX de l’ESP-12E\n\n\n\nCâblage de l’ESP-12E(utilisé comme bridge USB-RS232)\n\nMettre RST à GND pour que l’ESP-12E ne démarre pas.\nConnecter TX au TX de l’ESP-01\nConnecter RX au RX de l’ESP-01\n\n\n\nCâblage sur breadboard\n{:style=“width:400px;}\nNote : Les LED rouge et verte ne sont pas connectées.\n\n\n\nESP8266-01 brochage\n\n\n\n\nUtilisation de CoolTerm\nDans les options de CoolTerm, choisir une vitesse de transmission (9600 ou 115200 bauds). Si les commandes ci-dessous ne passent pas, modifier la vitesse. Dans mon cas, ça marche à 115200 bauds. Les commandes doivent être terminées avec CR + LF. Dans CoolTerm, il n’y a rien à configurer, par contre si on utilise le moniteur série de l’IDE Arduino au lieu de CoolTerm, il faut sélectionner l’option Les deux, NL et CR.\nLa première commande à tester est\nAT\nEt l’ESP doit répondre\nOK\nEnsuite on peut envoyer un reset\nAT+RST\net l’ESP répond\n\n\n\nESP8266-01 réponse commande AT+RST\n\n\nEnfin, il peut être utile de savoir quelle version du firmware est installée avec la commande\nAT+GMR\nSur mon ESP, la réponse est\nAT version:0.40.0.0(Aug  8 2015 14:45:58)\nSDK version:1.3.0\nAi-Thinker Technology Co.,Ltd.\nBuild:1.3.0.2 Sep 11 2015 11:48:04\nOK\n\n\nUtilisation d’autres moniteurs série\nÀ la place de CoolTerm, on peut utiliser n’importe quel autre logiciel, comme le moniteur série de l’IDE Arduino ou ESPlorer\n\n\n\nMoniteur série de l’IDE Arduino\n\n\n\n\n\nESPlorer\n\n\n\n\nÀ lire aussi\nSparkfun a un PDF avec toutes les commandes AT possibles.\nPour continuer avec les commandes AT, lire les pages suivantes :\n\nalselectro — WiFi Module ESP8266 – 1. Getting started with AT commands\nalselectro — WiFi Module ESP8266 – 2. TCP CLIENT /Server mode\n\nJ’ai compilé les informations de ces deux pages télégraphiquement ici :\n../2016-08-13-esp_commandes_at_utiles/\nIl y a également des informations intéressantes sur ces pages :\n\nNicolas C. Blog — ESP8266 première partie : Généralités\nNicolas C. Blog — ESP8266 seconde partie : Le mode Standalone"
  },
  {
    "objectID": "posts/2016-08-13-esp8266-01/index.html#programmation-du-microcontrôleur-de-lesp-01-en-arduino-c",
    "href": "posts/2016-08-13-esp8266-01/index.html#programmation-du-microcontrôleur-de-lesp-01-en-arduino-c",
    "title": "Mise en route d’un ESP8266-01",
    "section": "Programmation du microcontrôleur de l’ESP-01 en Arduino C",
    "text": "Programmation du microcontrôleur de l’ESP-01 en Arduino C\n\nPréalable\nComme la programmation avec l’IDE Arduino va écraser le firmware NodeMCU préinstallé sur l’ESP, il peut être utile de noter la réponse de la commande AT+GMR quelque part. Ceci permettra de retrouver la configuration d’origine si nécessaire.\n\n\nPréparation de l’IDE Arduino\nLa procédure pour préparer l’IDE Arduino à la programmation d’un ESP-01 est la même que pour un ESP-12E :\nouilogique.com — Programmation de l’ESP8266 en Arduino C\nJ’ai utilisé la version 1.6.9 de l’IDE Arduino pour ces tests.\nLes réglages de l’IDE sont les suivants :\n\n\n\nParamètres de l’IDE Arduino pour la programmation de l’ESP8266-01\n\n\nDeux paramètres sont spécialement importants :\n\nLe paramètre “Type de carte” doit être réglé à “Generic ESP8266 Module”.\nLe paramètre “Flash size” doit être réglé en fonction de l’ESP utilisé. Le programme de test get-esp8266-info.ino permettra de lire les informations de l’ESP.\n\n\n\nCâblage\nLors de la programmation, GPIO 0 doit être tiré à la masse. Par mesure de précaution, il est préférable de mettre une résistance de 330 Ω en série qui évitera des dégâts si d’aventure GPIO 0 venait à prendre un état logique haut lors de la programmation. Sur l’image ci-dessous, on voit que le fil bleu peut être déplacé en mode programmation vers la résistance de 330 Ω (colonne 39 du breadboard) ou en mode utilisation vers la LED rouge (colonne 41). La broche RST peut être mise à la masse à l’aide du fil blanc, ce qui permet de redémarrer l’ESP. Toutes les autres connexions sont identiques que pour la programmation AT.\n\n\n\nMontage programmation ESP8266-01\n\n\n\n\nProcédure de programmation\n\nDéconnecter les alimentations\nMettre GPIO 0 à la masse\nReconnecter les alimentations\nCompiler et téléverser le programme get-esp8266-info.ino\nDéconnecter les alimentations\nConnecter GPIO 0 à la LED rouge\nReconnecter les alimentations\n\nVoici les résultats de get-esp8266-info.ino pour mon ESP-01. On voit que ESP.getFlashChipRealSize() retourne 1 Mo (1048576 octets). C’est donc la valeur maximum que l’on peut utiliser pour le paramètre “Flash Size” de l’IDE Arduino.\nESP8266 INFORMATION\n===================\nESP.getFreeHeap()              : 46000\nESP.getChipId()                : 0xD48ED5\nESP.getSdkVersion()            : 1073644416\nESP.getBootVersion()           : 4\nESP.getBootMode()              : 1\nESP.getCpuFreqMHz()            : 80\nESP.getFlashChipId()           : 0x1440E0\nESP.getFlashChipRealSize()     : 1048576\nESP.getFlashChipSize()         : 1048576\nESP.getFlashChipSpeed()        : 40000000\nESP.getFlashChipMode()         : 2\nESP.getFlashChipSizeByChipId() : 0x100000\nESP.getSketchSize()            : 231264\nESP.getFreeSketchSpace()       : 270336\nESP.getCycleCount()            : 23327555\nESP.getResetInfoPtr()\n6\n0\n0\n0\n0\n0\n0\n\n\nProgramme simple-websocket.ino\nSi le programme get-esp8266-info.ino a fonctionné, on peut maintenant jouer avec le WiFi grâce au programme simple-websocket.ino.\nLa procédure de mise en route est indiquée dans le README du programme. Il y a deux lignes à modifier suivant le type d’ESP utilisé :\nligne 26 de ws_functions.h, indiquer #define ESP_MODULE_TYPE 'ESP-01'\nligne 7 de websocket.js, indiquer var ESP_MODULE_TYPE = 'ESP-01'\nEt si tout à fonctionné, voici ce que le navigateur doit montrer :\n\n\n\nCapture d’écran simple-websocket.ino\n\n\n\n\nÀ lire aussi\n\nhackster.io — Ray Burnette — ESP8266-01 using Arduino IDE\nallaboutcircuits.com — Charles R. Hampton — Breadboard and Program an ESP-01 Circuit with the Arduino IDE\nplayground.boxtec.ch — ESP8266 WiFi Module"
  },
  {
    "objectID": "posts/2016-08-13-esp8266-01/index.html#revenir-à-nodemcu",
    "href": "posts/2016-08-13-esp8266-01/index.html#revenir-à-nodemcu",
    "title": "Mise en route d’un ESP8266-01",
    "section": "Revenir à NodeMCU",
    "text": "Revenir à NodeMCU\nVoir ouilogique.com — Mise à jour du firmware"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "",
    "text": "{:style=“width:50%;”}\nPremiers prototypes d’une plateforme de Stewart que je construis dans le cadre du projet 2019 (P19) du Microclub.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#code-source",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#code-source",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Code source",
    "text": "Code source\nLe code source et quelques détails sur GitHub\n\nhttps://github.com/NicHub/stewart-platform-esp32"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#quatrième-version",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#quatrième-version",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Quatrième version",
    "text": "Quatrième version\nPour la quatrième version, je ne génère plus le PWM des servos avec l’ESP32, mais avec un driver I²C PCA9685.\n{:style=“width:100%;”}\n{:style=“width:100%;”}\n\n\n\n\n\nChangement de bande adhésive pour tenir le câble du Nunshunk. Le fil rouge à gauche du breadboard ne sert à rien.\n\n{:style=“width:100%;”}\n{:style=“width:100%;”}\n\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left; clear:right; margin-bottom:200px;”}"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#troisième-version",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#troisième-version",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Troisième version",
    "text": "Troisième version\nAvec un clone de Nunchuck (joystick I²C de la console Wii), des vraie biellettes et des clones de servos Tower Pro MG90s. J’ai abandonné les clones de servos Tower Pro MG996R qui ne fonctionnent vraiment pas bien, car ils sont beaucoup trop lents et consomment trop de courant.\n\n\n\n\n{:style=“width:50%; margin-bottom:100px”}"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#deuxième-version",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#deuxième-version",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Deuxième version",
    "text": "Deuxième version\nAvec un clone de Nunchuck (joystick I²C de la console Wii), des vraie biellettes et des clones de servos Tower Pro MG996R.\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left; clear:right; margin-bottom:200px;”}"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#première-version",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#première-version",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Première version",
    "text": "Première version\nAvec un joystick analogique, des biellettes en fil de fer et des clones de servos Tower Pro MG90s.\n\n\n\n\n{:style=“width:50%; float:left”}\n{:style=“width:50%; float:left; clear:right; margin-bottom:100px”}"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#aide-mémoire",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#aide-mémoire",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "AIDE-MÉMOIRE",
    "text": "AIDE-MÉMOIRE\nArticle Wikipedia\n\nhttps://en.wikipedia.org/wiki/Stewart_platform\n\nVidéo qui m’a donné envie de réaliser une plateforme de Stewart San-José State University\n\nhttps://www.youtube.com/watch?v=j4OmVLc_oDw\n\nMalheureusement, ils ont fermé leur site fullmotiondynamics.com.\nCalifornia Polytechnic University of Pomona — Mechanical Engineering Department — Controls Class Final Project\n\nhttps://www.youtube.com/watch?v=7Jw8m4pbTYI\n\nMIPT, Department of Radio Engineering and Cybernetics 2 degrés de liberté + code Arduino\n\nhttps://www.youtube.com/watch?v=p65XPP53rLo\n\nVidéo où l’on voit bien les imperfections métrologiques\n\nhttps://www.youtube.com/watch?v=QdKo9PYwGaU\nIls utilisent ce controleur de servos https://www.phidgets.com/?tier=3&catid=21&pcid=18&prodid=1032\n\nAthus Vieira\n\nhttps://www.linkedin.com/pulse/ball-plate-system-robotic-pid-control-athus-vieira/\nhttps://www.youtube.com/watch?v=9XhcSSrA4Yc\nPID tuning http://emanual.robotis.com/docs/en/platform/openmanipulator/\n\nInstructables by moosenee (avec gros plan sur le touch screen) 😃 Avec du code Arduino !\n\nhttps://www.instructables.com/id/PID-Controlled-Ball-Balancing-Stewart-Platform/\nhttps://github.com/a6guerre/Ball-balanced-on-Stewart-Platform\nhttps://github.com/a6guerre/Ball-balanced-on-Stewart-Platform/blob/master/Readme.pdf\n\nInstructables by ThomasKNR 😃 Avec du code Arduino !\n\nhttps://www.instructables.com/id/Arduino-controlled-Rotary-Stewart-Platform/\nhttps://github.com/ThomasKNR/RotaryStewartPlatform\n\nxoxota99/stewy GitHub 😃 Avec du code Arduino !\n\nhttps://github.com/xoxota99/stewy\n\nChaine YouTube avec une collection d’une vingtaine de vidéos\n\nhttps://www.youtube.com/playlist?list=PLVNyl3oDY7lsYDQMKvguyPkpJ0Eaqb9z_\n\nBlender\n\nhttps://www.youtube.com/watch?v=uNKHX5B011E\n\nWebots\n\nhttps://cyberbotics.com/\nhttps://www.youtube.com/watch?v=ddrtiwjKAaY\n\nProjet memememememememe 😃 Avec un simulateur fonctionnel en Processing et le code pour RPi !\n\nhttps://memememememememe.me/post/stewart-platform-math/\nhttps://github.com/thiagohersan/memememe\n\n😃 Autres codes Arduino !\n\nhttps://www.marginallyclever.com/product/rotary-stewart-platform-v2/\nhttps://github.com/MarginallyClever/RotaryStewartPlatform/blob/master/RSPv1/RSPv1.ino\n\nRobots à chaînes exotiques, Jean-Pierre Merlet, INRIA Sophia-Antipolis\n\nhttps://www-sop.inria.fr/members/Jean-Pierre.Merlet/Archi/node17.html"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#plateforme-de-stewart-avec-3-degrés-de-liberté",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#plateforme-de-stewart-avec-3-degrés-de-liberté",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "PLATEFORME DE STEWART AVEC 3 DEGRÉS DE LIBERTÉ",
    "text": "PLATEFORME DE STEWART AVEC 3 DEGRÉS DE LIBERTÉ\n\n\n\nhttps://www.instructables.com/id/3DOF-Ball-on-Plate-Using-Closed-Loop-Stepper-Motor/\nhttps://people.ece.cornell.edu/land/courses/ece4760/FinalProjects/f2017/psl58_aw698_eb645/psl58_aw698_eb645/index.html#HLD\nhttps://youtu.be/2i5qN2XWZLk"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#meccad-ball-and-plate",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#meccad-ball-and-plate",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "MECCAD Ball and plate",
    "text": "MECCAD Ball and plate\nhttps://youtu.be/bEM5AywnzKg"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#sprk-a-low-cost-stewart-platform-for-motion-study-in-surgical-robotics",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#sprk-a-low-cost-stewart-platform-for-motion-study-in-surgical-robotics",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "SPRK: A Low-Cost Stewart Platform For Motion Study In Surgical Robotics",
    "text": "SPRK: A Low-Cost Stewart Platform For Motion Study In Surgical Robotics\n\nhttps://goldberg.berkeley.edu/pubs/2018_ISMR_stewart_design.pdf\nhttps://github.com/BerkeleyAutomation/sprk"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#plateforme-de-stewart-avec-retour-de-force",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#plateforme-de-stewart-avec-retour-de-force",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "PLATEFORME DE STEWART AVEC RETOUR DE FORCE",
    "text": "PLATEFORME DE STEWART AVEC RETOUR DE FORCE\nDynamixel motor\n\nhttp://www.robotis.us/dynamixel/\n\nAvec GUI Processing [Arun Dayal Udai]\n\nhttps://youtu.be/LFpyIZx2QGU?t=221\nhttps://www.youtube.com/watch?v=rD4kTW_khXQ\nhttps://www.youtube.com/watch?v=RqUcHulonHk\n\nFelix Ros 😃 Avec du code Processing et Arduino !\n\nhttp://www.felixros.com/\nhttps://github.com/felixros2401/Stewart-Platform\nhttps://www.instructables.com/id/Controlling-a-Stewart-Platform/"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#plateforme-de-stewart-à-base-circulaire-rotopod",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#plateforme-de-stewart-à-base-circulaire-rotopod",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "PLATEFORME DE STEWART À BASE CIRCULAIRE (ROTOPOD)",
    "text": "PLATEFORME DE STEWART À BASE CIRCULAIRE (ROTOPOD)\nUn rotopod permet de faire une rotation complète sans ajouter un 7e moteur.\nVersion de Circular-Base-Stewart-Platform\n😃 Il montre un logiciel de tunning des PID dans le 2e lien\n\nhttps://www.youtube.com/channel/UCgm1PM2V9BgfP7Qaze1teAw\nhttps://youtu.be/zna9Hw_Ei58?t=482\n\nVersion commerciale de Mikrolar\n\nhttp://mikrolar.com/r3000.html"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#versions-commerciales",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#versions-commerciales",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Versions commerciales",
    "text": "Versions commerciales\n\nhttps://motionsystems.eu/products/"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#modelling-and-simulation-of-a-6dof-motion-platform-with-permanent-magnet-linear-actuators-for-testing-in-wind-tunnel",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#modelling-and-simulation-of-a-6dof-motion-platform-with-permanent-magnet-linear-actuators-for-testing-in-wind-tunnel",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Modelling and Simulation of a 6DOF Motion Platform with Permanent Magnet Linear Actuators for Testing in Wind Tunnel",
    "text": "Modelling and Simulation of a 6DOF Motion Platform with Permanent Magnet Linear Actuators for Testing in Wind Tunnel\n\nhttps://www.youtube.com/watch?v=AZjgcrV642c"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#simulateur-sur-mathematica",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#simulateur-sur-mathematica",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "SIMULATEUR SUR MATHEMATICA",
    "text": "SIMULATEUR SUR MATHEMATICA\n\nhttps://www.wolfram.com/training/videos/ENG032/"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#matlab-forward-kinematics-solver",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#matlab-forward-kinematics-solver",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "MATLAB FORWARD KINEMATICS SOLVER",
    "text": "MATLAB FORWARD KINEMATICS SOLVER\n😃 Avec du code Matlab !\n\nhttps://github.com/jotux/Steward-Platform-Forward-Kinematics-Solver\n\nPDF à trouver :\n\nForward kinematics of the general 6-6 Stewart platform using algebraic elimination. Authors: Tae-Young Lee, Jae-Kyung Shim Department of Mechanical Engineering, Korea University, 5-Ka Anam-Dong Sungbuk-Ku, Seoul, 136-701, South Korea. 36th issue of Mechanism and Machine Theory magazine (2001, 1073-1085)."
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#applications-microclub",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#applications-microclub",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "APPLICATIONS MICROCLUB",
    "text": "APPLICATIONS MICROCLUB\n\nApplication 1 : Labyrinthe\n\nConcours de vitesse de sortie du labyrinthe\n\nplusieurs robots s’affrontent en mode auto\nplusieurs utilisateurs s’affrontent en mode manuel\n\n\n\n\nApplication 2 : Système de stabilisation pour appareil photo\n\nBesoin d’un 7e axe pour augmenter l’angle de rotation autour de l’axe Z.\n\n\n\nApplication 3 : Ball bouncing\n\npoe.olin.edu/2017/Bounce/\nhttps://github.com/TShapinsky/Bounce"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#implémentation",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#implémentation",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "IMPLÉMENTATION",
    "text": "IMPLÉMENTATION\n\ninputs\n\nMesure de la position de la bille par tapis résistif\nCommande depuis navigateur web\nCommande depuis Blender\nBLE via smartphone\nJoystick cablé (Wii Nunchuck)\n\n\n\noutputs\n\nMouvements du robot (6 ou 7 axes)\nRetour visuel sur navigateur web\nRetour visuel sur Blender"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#matériel",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#matériel",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "MATÉRIEL",
    "text": "MATÉRIEL\n\nServomoteurs\n\nTower Pro MG90s Servos\n\nhttps://www.banggood.com/6X-Towerpro-MG90S-Metal-Gear-RC-Micro-Servo-p-1072260.html\nhttps://www.towerpro.com.tw/product/mg90s-3/\nhttps://www.youtube.com/watch?v=iHPGoKHgzHo\n\nhttps://servodatabase.com/\nKST DS115MG servos\nGWS Micro 2BBMG servo (https://www.youtube.com/watch?v=TgqJbneXZI8)\nHS5485HB (https://github.com/a6guerre/Ball-balanced-on-Stewart-Platform/blob/master/Readme.pdf)\nhttp://www.robotis.us/dynamixel-mx-64t/ (Utilisé par Arun Dayal Udai)\nMG995 (https://www.banggood.com/MG995-High-Torgue-Mental-Gear-Analog-Servo-p-73885.html) (Rolf)\nTower Pro SG-5010 servos (01.org/developerjourney/recipe/building-stewart-platform)\nHitec HS-5625MG (utilisé par https://github.com/xoxota99/stewy)\nMG996R https://fr.aliexpress.com/item//32636102294.html\nParallax 900-00005 (utilisé par fullmotiondynamics) https://www.parallax.com/product/900-00005\n\n\n\nFonctionnement des servos\n\nAnalogiques https://www.youtube.com/watch?v=LXURLvga8bQ\nhttps://learn.sparkfun.com/tutorials/hobby-servo-tutorial/all\n\n\n\nDriver de servos\n\nPCA9685 (16 servos, I²C) https://aliexpress.com/af/32718274859.html\n\n\n\nRotules + tiges\n\nM3x100mm https://aliexpress.com/af/32775630549.html\nEn M2 https://aliexpress.com/af/32704692789.html\nrotule https://aliexpress.com/af/32887391192.html\ntige https://aliexpress.com/af/32468820900.html\ntige + rotule https://aliexpress.com/af/32904104171.html\nmagnétique https://aliexpress.com/af/32818135577.html\ncomplète https://aliexpress.com/af/32894390128.html\n\n\n\nAlim 5V\n\nCourant 10A https://aliexpress.com/af/32810906485.html\n\n\n\nLevier de servo (Servo horn arm)\n\ncouleur tritanium https://aliexpress.com/af/32843432977.html\nhttps://aliexpress.com/af/32811563669.html\n\n\n\nListe complète de matériel\n\n01.org/developerjourney/recipe/building-stewart-platform\n\n\n\nTouch screen\n\nDigikey 360-3520-ND www.digikey.ch/short/pj85db (utilisé par https://github.com/xoxota99/stewy)\nhttps://aliexpress.com/af/32809597549.html\n\n\n\nESP32\n\nWeMos ESP32 WROOM\n\nhttps://www.banggood.com/fr/WeMos-ESP32-WiFi-Bluetooth-Development-Board-Ultra-Low-Power-Consumption-Dual-Core-ESP-32-ESP-32S-p-1175488.html\n\n\n\n\nJoystick\n\nWii Nunchuck https://aliexpress.com/af/32827461737.html\n\n\n\nCalculs\n\nhttps://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-points-and-vectors\n\n\n\nPCB\n\nhttps://jlcpcb.com\n\n\n\nSystème complet avec caméra Swiftflying Store\n\nLe lien ne fonctionne plus : fr.aliexpress.com/item/32957141466.html"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#pinout",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#pinout",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "PINOUT",
    "text": "PINOUT\n31 DIRA GPIO14 34 TC5 GPIO13 TC4 GPIO15 STPA STPB 28 DIRB GPIO25"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#delta-robot-one-robot-delta-arduino",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#delta-robot-one-robot-delta-arduino",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "DELTA-ROBOT ONE — Robot Delta Arduino",
    "text": "DELTA-ROBOT ONE — Robot Delta Arduino\n\nhttps://www.hackster.io/deltarobotone/delta-robot-one-8386a1?utm_campaign=new_projects&utm_content=2&utm_medium=email&utm_source=hackster&utm_term=project_name"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#calcul-de-la-cinématique-inverse",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#calcul-de-la-cinématique-inverse",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Calcul de la cinématique inverse",
    "text": "Calcul de la cinématique inverse\nCinématique inverse avec servomoteurs 😃 Meilleure source pour les calculs pour l’instant !\n\nMéthode de calcul de la cinématique inverse utilisée par le projet memememememememe. C’est la seule méthode qui inclu des servomoteurs en rotation. Les autres proposent systématiquement des actuateurs linéaires.\n\n\nhttps://memememememememe.me/assets/posts/stewart-platform-math/MathsOfStewartPlatformV5.pdf\n\nAnalyse vectorielle des lieux de singularité de la plate-forme de Gough-Stewart\n\ncorpus.ulaval.ca/jspui/bitstream/20.500.11794/23444/1/28962.pdf\nhttps://stringfixer.com/fr/Stewart_platform\nhttps://fr.lambdageeks.com/parallel-robot-kinematics/\nhttps://fr.wikipedia.org/wiki/Reymond_Clavel\nhttps://fr.wikipedia.org/wiki/Robot_Delta\nhttps://vimeo.com/129643275\nhttps://www.ni.com/fr-ch/shop/software/products/6-dof-stewart-platform-control-library.html\nhttps://www.ni.com/fr-ch/shop/software/products/stewart-platform-trainer-toolkit.html\nhttps://www.xarg.org/paper/inverse-kinematics-of-a-stewart-platform/\nhttps://youtu.be/1jrP3_1ML9M"
  },
  {
    "objectID": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#divers",
    "href": "posts/2019-03-27-plateforme-de-stewart-esp32/index.html#divers",
    "title": "Plateforme de Stewart pilotée avec un ESP32",
    "section": "Divers",
    "text": "Divers\n\nhttps://youtu.be/S-_VvNg_4cE\nhttps://youtu.be/N1g_KwHqew8\n\nStewart’s Platform. Microcontrollers: ATMega 1284PA, ATMega 8. Servos: TowerPro MG995\n\nhttps://grabcad.com/oleksandr.stepanenko-1/models\nhttps://youtu.be/eXULfD94gho\nhttps://youtu.be/Bf_1pUyjNiM\nhttps://youtu.be/c1oxyk2IIOQ\nhttps://youtu.be/vlCH4zhIqmM\nhttps://acrome.net/product/stewart-platform\nhttps://youtu.be/5wCK6XGC3ig\nhttps://motionsystems.eu/product-category/motion-platforms/\nhttps://youtu.be/VeD4_FghKhQ\nhttps://youtu.be/PzOGIeGEyHY\nhttps://upcommons.upc.edu/bitstream/handle/2117/101560/Memoria_TFG_Aitor_Ramirez.pdf?sequence=1&isAllowed=y\n\nFast Programming of 6-DOF Hexapod 6-Axis Motion Stewart Platform: Software, Mechanics, Controller\nStewart Platform Joystick\nI Built a Ball Balancing Robot"
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html",
    "title": "Hacker une clé RF433",
    "section": "",
    "text": "Cet article montre comment lire les signaux d’une clé RF433 à l’aide d’un adaptateur SDR (Software Defined Radio). De les copier à l’aide du logiciel URH sur un Raspberry Pi et de programmer un Arduino pour envoyer ces signaux à l’identique.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#but",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#but",
    "title": "Hacker une clé RF433",
    "section": "",
    "text": "Cet article montre comment lire les signaux d’une clé RF433 à l’aide d’un adaptateur SDR (Software Defined Radio). De les copier à l’aide du logiciel URH sur un Raspberry Pi et de programmer un Arduino pour envoyer ces signaux à l’identique."
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#limitation",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#limitation",
    "title": "Hacker une clé RF433",
    "section": "Limitation",
    "text": "Limitation\nCette technique ne fonctionne qu’avec des émetteurs RF433 non sécurisés. Ces émetteurs envoient toujours le même signal que l’on peut copier et programmer sur un Arduino.\nÀ contrario, les émetteurs sécurisés, comme ceux qui sont utilisés pour verrouiller les véhicules, émettent un code différent à chaque utilisation (rolling code), ce qui implique qu’il ne sert à (presque) rien de copier le signal puisqu’il ne pourra être utilisé au mieux qu’une seule fois."
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#sources",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#sources",
    "title": "Hacker une clé RF433",
    "section": "Sources",
    "text": "Sources\nCet article m’a été inspiré par la vidéo d’Andreas Spiess “How to Hack your 433 MHz Devices with a Raspberry and a RTL-SDR Dongle (Weather Station)”."
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#matériel",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#matériel",
    "title": "Hacker une clé RF433",
    "section": "Matériel",
    "text": "Matériel\n\nSDR-Dongle: http://s.click.aliexpress.com/e/bQ91w8QM ou http://bit.ly/2NcRMT2\nRaspberry Pi modèle 2 ou 3. On peut aussi utiliser URH sur Windows, Linux et sur Mac, donc le RPi est optionnel. À noter que l’adaptateur SDR que j’ai n’est pas reconnu par URH sur mon Mac et j’ai donc opté pour la solution RPi.\nUn Arduino UNO ou équivalent\nUn bouton\nUn breadboard\nUn émetteur RF433\nUne clé RF433 à copier (mais normalement vous devriez déjà avoir cet article)"
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#installation-durh",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#installation-durh",
    "title": "Hacker une clé RF433",
    "section": "Installation d’URH",
    "text": "Installation d’URH\nPour lire le signal d’origine, nous allons utiliser le logiciel URH.\n\nSi nécessaire, installez Raspbian Stretch\n\nsudo apt-get --assume-yes update\nsudo apt-get --assume-yes dist-upgrade\nsudo apt-get --assume-yes dist install python3-numpy python3-psutil python3-zmq python3-pyqt5 g++ libpython3-dev python3-pip cython3\nsudo pip3 install urh\nSi la dernière commande ne fonctionne pas, il faut ruser un peu en utilisant les commandes suivantes :\ngit clone https://github.com/jopohl/urh\ncd urh\nsudo pip3 install ."
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#utilisation-durh",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#utilisation-durh",
    "title": "Hacker une clé RF433",
    "section": "Utilisation d’URH",
    "text": "Utilisation d’URH\n\nConnecter l’adaptateur SDR.\n\n\n\n\nRaspberry Pi avec dongle SDR\n\n\n\nDans l’interface graphique de Raspbian, ouvrir un terminal et taper la commande urh.\nDans la fenêtre qui s’ouvre, aller dans le menu File/Record Signal....\nDans la nouvelle fenêtre, choisir l’adaptateur : Device : RTL-SDR.\nCliquer sur la flèche arrondie en regard de Device Identifier. L’identifiant de l’adaptateur doit d’afficher, par exemple : Realtek RTL2838UHIDIR (SN: 00000001).\nLaisser les autres options par défaut.\n\n\n\n\nEnregistrement d’un signal RF433 avec URH\n\n\n\nCliquer sur le bouton Start.\nAppuyer sur le bouton de la clé RF433.\nCliquer sur le bouton Stop. Il faut arrêter l’acquisition le plus rapidement possible car le fichier de résultats grandit à une vitesse vertigineuse. En plus, le buffer est rapidement saturé.\nCliquer sur Save et enregistrer le fichier pour une utilisation ultérieure.\nFermer la fenêtre d’acquisition. La fenêtre de traitement des données s’ouvre. Cette fenêtre peut être rappelée en ouvrant le fichier enregistré précédemment.\nCliquer sur Modulation: ASK. ASK = Amplitude Shift Keying.\nDans la partie sous le graphique, double-cliquer de façon à sélectionner une ligne. La partie correspondante du graphique est sélectionnée. Inversement, on peut sélectionner une partie du graphique et les chiffres correspondants seront automatiquement sélectionnés également.\nOn peut zoomer le graphique avec la roulette de la souris. La position du curseur de la souris modifie également le point central du zoom.\nÉvaluer quelle ligne de chiffres se répète le plus souvent et la copier avec le raccourci clavier CTRL-C.\n1110111011101000100010001000100011101110111010001000111010001000100010001110111010001000111010001\nIl faut aussi noter la valeur Bit Length. Sur l’image ci-dessous, elle est de 276 µs. À d’autres endroits du signal cette valeur peut être légèrement différente. J’ai opté pour une valeur de 280 µs qui convient très bien.\nMaintenant, on a les bits du signal (97 bits dans mon cas). Mais il faut encore évaluer combien de bits sont dans l’intervalle sans signal. Dans mon cas, il y en a 31, donc une période complète comprend 97 + 31 = 128 bits.\nIl faut également ajouter les zéros au code copié. Dans mon cas, il y en a 31.\n\n\n\n\nEnregistrement d’un signal RF433 avec URH"
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#tester-le-code-copié",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#tester-le-code-copié",
    "title": "Hacker une clé RF433",
    "section": "Tester le code copié",
    "text": "Tester le code copié\nPour tester le code que nous venons de copier avec URH, il faut tout d’abord réaliser le montage de la photo ci-dessous. À noter que le récepteur RF433 à gauche de la photo n’est pas utilisé dans le cadre de cet article.\nL’émetteur RF433 est connecté à la broche 7.\nLes boutons sont connectés aux broches 8, 9 et 10. Pour un premier test, un seul bouton suffit.\n\n\n\nEnregistrement d’un signal RF433 avec URH\n\n\nLe code de test se trouve ici : rf433-spoof sur GitHub.\nOn peut aussi télécharger tous les exemples de ce blog d’un coup avec la commande git :\ngit clone https://github.com/NicHub/ouilogique-Arduino.git\nEnsuite il faut modifier le code du signal, la durée d’un bit et le nombre de bits dans le fichier rf433-messages.h.\nEt il ne reste plus qu’à flasher l’Arduino et faire un test."
  },
  {
    "objectID": "posts/2018-07-15-hacker-une-cle-rf433/index.html#à-voir-aussi",
    "href": "posts/2018-07-15-hacker-une-cle-rf433/index.html#à-voir-aussi",
    "title": "Hacker une clé RF433",
    "section": "À voir aussi",
    "text": "À voir aussi\n\nhttps://github.com/merbanan/rtl_433\nRTL-SDR Blog V3 R820T2 RTL2832U 1PPM TCXO SMA Software Defined Radio (Dongle Only)\nhttp://gqrx.dk/\nhttps://airspy.com"
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "",
    "text": "La version originale de ce document a été écrite par Johannes du Microclub. Il m’a aimablement autorisé à la retranscrire à ma sauce dans cet article.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#source",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#source",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "",
    "text": "La version originale de ce document a été écrite par Johannes du Microclub. Il m’a aimablement autorisé à la retranscrire à ma sauce dans cet article."
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#introduction",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#introduction",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "Introduction",
    "text": "Introduction\nPi-hole est un système de blocage d’accès aux contenus Internet adventices, c’est-à-dire non sollicités directement par l’utilisateur et qu’il préfèrerait ne pas télécharger s’il en avait le choix et la possibilité.\nCet article explique comment installer et configurer Pi-hole sur un Raspberry avec Raspberry Pi OS Buster. À noter que Pi-hole peut aussi être déployé sur d’autres OS ainsi que dans une image Docker.\nNote : Si vous voulez juste tester le système avec un Pi-hole existant, vous pouvez utiliser celui de Digitec à l’adresse IP 40.114.239.83. Ils ont aussi écrit un article sur leur solution : Article Pi-hole Digitec. Bien évidemment, il faut être à l’aise avec le fait que Digitec aura connaissance de toutes les URL que votre ordinateur interroge."
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#ressources",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#ressources",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "Ressources",
    "text": "Ressources\n\nSite officiel de Pi-hole\nDocumentation de Pi-hole\nListe des modèles de Raspberry compatibles\nListe des OS compatibles"
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#installation-de-pi-hole-sur-le-raspberry",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#installation-de-pi-hole-sur-le-raspberry",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "Installation de Pi-hole sur le Raspberry",
    "text": "Installation de Pi-hole sur le Raspberry\n\nFlasher Raspberry Pi OS sur une carte SD. (Voir la procédure détaillée.)\nConnecter le Raspberry au réseau.\nOuvrir un terminal sur le Raspberry et installer Pi-hole avec la commande suivante :\n\ncurl -sSL https://install.pi-hole.net | bash\n\nAccepter les options par défaut de l’installateur.\nÀ la fin de l’installation, relever l’adresse IP locale du Rasperry affichée par l’installateur. On peut aussi l’obtenir avec la commande :\n\nhostname -I\n\nRelever également le mot de passe de l’interface d’administration de Pi-hole.\nRedémarrer le Raspberry avec la commande\n\nsudo reboot"
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#configuration-du-routeur",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#configuration-du-routeur",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "Configuration du routeur",
    "text": "Configuration du routeur\n\nLes explications sont basées sur un modèle de routeur “Sunrise Internet Box”. Les liens proposés ci-dessous fonctionneront donc uniquement sur ce modèle de routeur, mais les principes restent les mêmes pour tous les autres routeurs.\nL’adresse IP locale de mon RPi est 192.168.1.28. Dans les explications si dessous, il faut remplacer cette IP par celle de votre RPi.\n\n\nSe connecter à l’interface d’administration du routeur http://192.168.1.1/.\nActiver le mode expert en cliquant sur le bouton en haut à droite.\n\nDéfinir le Raspberry comme serveur DNS local\n\nSur la page d’accueil du routeur, cliquer sur le bouton Ma Sunrise Internet Box en haut à gauche, puis sur l’onglet DNS http://192.168.1.1/0.2/gui/#/mybox/dns/server.\nLes valeurs par défaut du routeur sont :\n\nActiver : ON\nServeur DNS Primaire : 192.168.1.1\nServeur DNS Secondaire : (vide)\n\nIl faut modifier ces valeurs de la façon suivante :\n\nActiver : ON\nServeur DNS Primaire : 192.168.1.28\nServeur DNS Secondaire : 192.168.1.28\n\n\nRedirection des requêtes sortant sur le port 53 vers le port 53 du Raspberry\n\nSur la page d’accueil du routeur, cliquer sur Contrôle d’Accès, puis sur l’onglet Redirection de ports http://192.168.1.1/0.2/gui/#/access-control/port-forwarding/add-rule.\nDans la section Ajouter des règles manuellement :\n\nCliquer sur la liste déroulante Services et sélectionner DNS.\nHôte Interne : 192.168.1.28\nLaisser les autres valeurs par défaut.\nCliquer sur ajouter.\n\n\nDésactiver le mode DHCP\n\nSur la page d’accueil du routeur, cliquer sur le bouton Ma Sunrise Internet Box en haut à gauche, puis sur l’onglet DHCP http://192.168.1.1/0.2/gui/#/mybox/DHCP.\nDans la section DHCP, cliquer sur le bouton Activer pour le mettre sur OFF.\n\nRedémarrer le routeur\n\nSur la page d’accueil du routeur, cliquer sur le bouton Ma Sunrise Internet Box en haut à gauche, puis sur l’onglet Maintenance http://192.168.1.1/0.2/gui/#/mybox/maintenance/reset.\nCliquer sur Redémarrer."
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#configuration-de-pi-hole",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#configuration-de-pi-hole",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "Configuration de Pi-hole",
    "text": "Configuration de Pi-hole\nActiver le DHCP\n\nAccéder à la page d’accueil de Pi-hole en naviguant à l’adresse http://192.168.1.28/admin/.\nDans le menu de gauche, cliquer sur Settings, puis sur l’onglet DHCP http://192.168.1.28/admin/settings.php?tab=piholedhcp.\nActiver le DHCP en cliquant sur DHCP server enabled.\n\nAjout des listes de blocages (Adlists)\n\nDans le menu de gauche, cliquer sur Group Management, puis sur Adlists http://192.168.1.28/admin/groups-adlists.php.\nCopier les URL des listes de blocage (Adlists).\nColler ces URL dans le champ Address. Les retours à la ligne sont acceptés comme séparateur d’URL.\nCliquer sur le bouton Add.\n\nMettre à jour la base de données\n\nDans le menu de gauche, cliquer sur Tools, puis sur Update Gravity http://192.168.1.28/admin/gravity.php.\nCliquer sur le bouton Update.\n\nAjout des faux positifs (Whitelist)\n\nDans le menu de gauche, cliquer sur Whitelist http://192.168.1.28/admin/groups-domains.php?type=white.\nCopier les URL des faux positifs (Whitelist).\nColler ces URL dans le champ Domain. Les retours à la ligne sont acceptés comme séparateur d’URL.\nActiver l’option Add domain as wildcard.\nCliquer sur le bouton Add to Whitelist.\n\nAjout des vrais positifs (Blacklist)\n\nDans le menu de gauche, cliquer sur Blacklist http://192.168.1.28/admin/groups-domains.php?type=black\nAjouter des URL à votre convenance.\n\nVoilà, Pi-hole est installé et fonctionnel. Nous allons voir maintenant comment récupérer quelques informations."
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#récupération-des-url-indiquées-dans-les-adlists",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#récupération-des-url-indiquées-dans-les-adlists",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "Récupération des URL indiquées dans les Adlists",
    "text": "Récupération des URL indiquées dans les Adlists\nLes Adlists sont stockées dans des fichiers textes qu’il est possible de télécharger sur un autre ordinateur. Ces fichiers ont une extension .domains et contiennent beaucoup d’URL redondantes, il est donc utile de les filtrer. Voici les commandes bash qui permettent de récupérer ces URL. À noter qu’il est préférable de les exécuter l’une après l’autre.\n# Télécharge les fichiers *.domains.\nscp 'pi@192.168.1.28:/etc/pihole/*.domains' .\n\n# Concatène tous les fichiers,\n# classe les URL par ordre alphabétique\n# et supprime les doublons.\ncat *.domains | sort | uniq -u &gt; pihole_adlist_urls_sorted_unique.txt\n\n# Compte les URL.\nN1=$(cat *.domains | wc -l)\nN2=$(cat pihole_adlist_urls_sorted_unique.txt | wc -l)\nP1=$(python -c \"p = $N2 / $N1 * 100; print(p)\")\nprintf \"Nombre d’URL total        : %10d\\n\" $N1\nprintf \"Nombre d’URL uniques      : %10d\\n\" $N2\nprintf \"Pourcentage d’URL uniques : %8.1f %%\\n\" $P1\n\n# Cleanup.\nrm *.domains\nAvec ma configuration, les résultats retournés sont :\nNombre d’URL total        :    5281881\nNombre d’URL uniques      :    1605385\nPourcentage d’URL uniques :     30,4 %"
  },
  {
    "objectID": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#faire-des-requêtes-directement-dans-la-base-de-données-de-pi-hole",
    "href": "posts/2020-12-25-installer-pi-hole-sur-un-raspberry/index.html#faire-des-requêtes-directement-dans-la-base-de-données-de-pi-hole",
    "title": "Installer Pi-hole sur un Raspberry",
    "section": "Faire des requêtes directement dans la base de données de Pi-hole",
    "text": "Faire des requêtes directement dans la base de données de Pi-hole\nPi-hole enregistre les informations dans des bases de données SQLite3 :\n\n/etc/pihole/gravity.db.\n/etc/pihole/macvendor.db.\n/etc/pihole/pihole-FTL.db.\n\nIl est possible de faire des requêtes sur ces bases de données directement depuis Bash. Par exemple, la commande suivante renvoie les 3 domaines les plus demandés depuis l’installation de Pi-hole :\nsqlite3 \"/etc/pihole/pihole-FTL.db\" \"SELECT domain,count(domain) FROM queries WHERE (STATUS == 2 OR STATUS == 3) GROUP BY domain ORDER BY count(domain) DESC LIMIT 3;\"\nOn peut aussi entrer les commandes dans un shell SQLite3 :\nsqlite3 /etc/pihole/pihole-FTL.db\nSELECT domain,count(domain) FROM queries WHERE (STATUS == 2 OR STATUS == 3) GROUP BY domain ORDER BY count(domain) DESC LIMIT 3;\nOu enregistrer les commandes SQL dans un fichier :\n# Créer un fichier de commandes SQL :\necho \"SELECT domain,count(domain) FROM queries WHERE (STATUS == 2 OR STATUS == 3) GROUP BY domain ORDER BY count(domain) DESC LIMIT 3;\" &gt; ~/get_queried_most.sql\n\n# L’exécuter depuis Bash :\ncat ~/get_queried_most.sql | sqlite3 \"/etc/pihole/pihole-FTL.db\"\n\n# Ou l’exécuter depuis le shell SQLite3 :\nsqlite3 \"/etc/pihole/pihole-FTL.db\"\n.read /home/pi/get_queried_most.sql\nPour afficher les noms des tables d’une base de données :\nsqlite3 \"/etc/pihole/gravity.db\" \".schema\"\nPour afficher les noms des champs d’une table :\nsqlite3 \"/etc/pihole/gravity.db\" \".schema domainlist\"\nPour compter le nombre d’entrées d’une table :\nsqlite3 \"/etc/pihole/gravity.db\" \"SELECT COUNT(*) FROM gravity\" # Le résultat est 5251857 pour mon Pi-hole\nPour limiter le nombre de résultats affichés :\nsqlite3 \"/etc/pihole/gravity.db\" \"SELECT * FROM gravity LIMIT 3\"\nPour afficher les URL des Adlists :\nsqlite3 \"/etc/pihole/gravity.db\" \"SELECT address FROM adlist\"\nPour afficher les URL de la whitelist :\nsqlite3 \"/etc/pihole/gravity.db\" \"SELECT domain FROM vw_regex_whitelist;\"\nsqlite3 \"/etc/pihole/gravity.db\" \"SELECT domain FROM vw_whitelist;\"\nPour afficher les URL de la blacklist :\nsqlite3 \"/etc/pihole/gravity.db\" \"SELECT domain FROM vw_regex_blacklist;\"\nsqlite3 \"/etc/pihole/gravity.db\" \"SELECT domain FROM vw_blacklist;\""
  },
  {
    "objectID": "posts/2017-09-30-piezo-switch/index.html",
    "href": "posts/2017-09-30-piezo-switch/index.html",
    "title": "Bouton piézoélectrique sur Arduino",
    "section": "",
    "text": "Un Arduino Nano\nUn bouton piézoélectrique (piezo-switch)\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-09-30-piezo-switch/index.html#matériel",
    "href": "posts/2017-09-30-piezo-switch/index.html#matériel",
    "title": "Bouton piézoélectrique sur Arduino",
    "section": "",
    "text": "Un Arduino Nano\nUn bouton piézoélectrique (piezo-switch)"
  },
  {
    "objectID": "posts/2017-09-30-piezo-switch/index.html#image",
    "href": "posts/2017-09-30-piezo-switch/index.html#image",
    "title": "Bouton piézoélectrique sur Arduino",
    "section": "Image",
    "text": "Image\n\n\n\nBouton piézoélectrique avec Arduino Nano"
  },
  {
    "objectID": "posts/2017-09-30-piezo-switch/index.html#fonctionnement",
    "href": "posts/2017-09-30-piezo-switch/index.html#fonctionnement",
    "title": "Bouton piézoélectrique sur Arduino",
    "section": "Fonctionnement",
    "text": "Fonctionnement\nUn bouton piézoélectrique n’envoie qu’une brève impulsion lorsqu’on appuie dessus. La durée de cette impulsion est très variable, mais vaut en moyenne 75 ms. Elle peut durer jusqu’à 400 ms voire plus si l’utilisateur appuie longtemps ou quelques millisecondes si l’utilisateur donne une pichenette.\n\nOn peut donc détecter les pressions de l’utilisateur, mais pas leur durée.\n\n\nCet interrupteur est sensible aux vibrations."
  },
  {
    "objectID": "posts/2017-09-30-piezo-switch/index.html#câblage",
    "href": "posts/2017-09-30-piezo-switch/index.html#câblage",
    "title": "Bouton piézoélectrique sur Arduino",
    "section": "Câblage",
    "text": "Câblage\nLe bouton que j’ai testé n’a que deux fils que l’on câble comme un bouton mécanique standard, c’est-à-dire avec une résistance de tirage vers le haut (pullup). Pour simplifier le câblage, on peut utiliser une pullup interne de l’Arduino.\nLa polarité est sans importance."
  },
  {
    "objectID": "posts/2017-09-30-piezo-switch/index.html#code",
    "href": "posts/2017-09-30-piezo-switch/index.html#code",
    "title": "Bouton piézoélectrique sur Arduino",
    "section": "Code",
    "text": "Code\nLe code sur GitHub montre trois façons d’utiliser ce bouton avec un Arduino :\n\nsimple-piezo-switch-001.ino n’est pas utilisable en tant que tel. Il montre juste que le switch envoie une impulsion et qu’il va falloir être un peu plus malin que ça pour l’utiliser.\nsimple-piezo-switch-002.ino montre comment faire du polling pour lire le bouton.\nsimple-piezo-switch-003.ino montre comment utiliser les interruptions.\n\nhttps://github.com/NicHub/ouilogique-Arduino/tree/master/piezo-switch"
  },
  {
    "objectID": "posts/2017-09-30-piezo-switch/index.html#note",
    "href": "posts/2017-09-30-piezo-switch/index.html#note",
    "title": "Bouton piézoélectrique sur Arduino",
    "section": "Note",
    "text": "Note\nCet interrupteur est étanche IP68 (6 = étanche à la poussière, 8 = résiste à l’immersion prolongée). J’ai fait un bref test dans un verre d’eau et il fonctionnait, même lorsqu’il était immergé."
  },
  {
    "objectID": "posts/2016-06-02-servomoteur-basique/index.html",
    "href": "posts/2016-06-02-servomoteur-basique/index.html",
    "title": "Programme basique pour commander un servomoteur",
    "section": "",
    "text": "https://www.youtube.com/watch?v=iH9_xtulyws\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-06-02-servomoteur-basique/index.html#à-voir-aussi",
    "href": "posts/2016-06-02-servomoteur-basique/index.html#à-voir-aussi",
    "title": "Programme basique pour commander un servomoteur",
    "section": "",
    "text": "https://www.youtube.com/watch?v=iH9_xtulyws"
  },
  {
    "objectID": "posts/2016-06-02-servomoteur-basique/index.html#programme-basique-pour-commander-un-servomoteur",
    "href": "posts/2016-06-02-servomoteur-basique/index.html#programme-basique-pour-commander-un-servomoteur",
    "title": "Programme basique pour commander un servomoteur",
    "section": "Programme basique pour commander un servomoteur",
    "text": "Programme basique pour commander un servomoteur\n\n\n\nServo moteur basique\n\n\n/*\n\nPROGRAMME BASIQUE POUR COMMANDER UN SERVOMOTEUR\n\nFONCTIONNEMENT\nAu démarrage du microcontrôleur, le servo est mit à l’angle “servoMin”\nLorsqu’on appuie sur le bouton le servo tourne jusqu’à l’angle “servoMax”\nPour que le servo revienne à l’angle “servoMin”, il faut au choix :\n - Relâcher le bouton\n - Attendre le timeout “dTmax”\n\nCONNEXIONS\nSIGNAL SERVO   D9\nBOUTON         D2\n\nMICROCONTRÔLEUR\nClone Arduino Nano\n\nSERVOMOTEUR\nSM-S2309S\nRotation      : ±60°\nSpeed @4.8V   : 0.11 s/60°\nSpeed @6V     : 0.09 s/60°\n\njuin 2016, ouilogique.com\n\n*/\n\n#include &lt;Servo.h&gt;\nServo myservo;\n\nconst int bBtn1  = PORTD2;\nconst int bLed13 = PORTB5;\n\n// servo\n//  ⇒ min = 0\n//  ⇒ max = 169\nconst byte servoMin = 0;\nconst byte servoMax = 90;\n\nlong T1;\nconst long dTmax = 4000;\n\n#define btn1Read   ! bitRead( PIND, bBtn1 )\n#define led13Set   bitSet( PORTB, bLed13 )\n#define led13Clear bitClear( PORTB, bLed13 )\n\nvoid setup()\n{\n  bitSet( DDRD, bBtn1 );\n  bitSet( PORTD, bBtn1 );\n\n  bitSet( DDRB, bLed13 );\n  clignoteLed13();\n\n  myservo.attach( 9 );\n  myservo.write( servoMin );\n}\n\nvoid loop()\n{\n  if( btn1Read )\n  {\n    T1 = millis();\n    led13Set;\n    myservo.write( servoMax );\n    _delay_ms( 500 );\n    while( btn1Read )\n    {\n      if( ( millis() - T1 ) &gt; dTmax )\n      {\n        myservo.write( servoMin );\n        clignoteLed13();\n      }\n    }\n    led13Clear;\n    myservo.write( servoMin );\n    _delay_ms( 500 );\n  }\n}\n\n\nvoid clignoteLed13()\n{\n  for( int i = 0; i &lt; 10; ++i )\n  {\n    led13Set;\n    _delay_ms( 30 );\n    led13Clear;\n    _delay_ms( 60 );\n  }\n}"
  },
  {
    "objectID": "posts/2016-11-01-langage-C-les-pointeurs/index.html",
    "href": "posts/2016-11-01-langage-C-les-pointeurs/index.html",
    "title": "Les pointeurs en C",
    "section": "",
    "text": "Je suis en train de suivre le très bon cours sur la programmation en C d’Open Classrooms et le deuxième exercice consiste à expliquer les pointeurs à quelqu’un qui n’y connait rien mais qui a des bases en C. Or donc, c’est une bonne occasion de créer une page sur mon blog à ce sujet histoire de faire d’une pierre deux coups, puisque d’après Mathieu Nebra, le prof de ce cours, les programmeurs sont des gros fainéants qui n’aiment pas répéter deux fois les mêmes choses, et… je crois qu’il a raison.\nDonc commençons par une lapalissade grande comme une maison : la programmation, c’est surtout une affaire de données. Eh oui, rien de très extraordinaire : pour faire avancer le schmilblick les programmes que l’on donne à manger à nos ordinateurs ou nos microcontrôleurs ont besoin de données que l’on va stocker dans des variables. Et c’est bien joli de remplir leurs mémoires avec lesdites données, encore faut-il pouvoir les retrouver et pour cela il y a deux façons de s’y prendre :\nVoyons ça d’un peu plus près :\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-11-01-langage-C-les-pointeurs/index.html#transmission-de-variables-par-valeur",
    "href": "posts/2016-11-01-langage-C-les-pointeurs/index.html#transmission-de-variables-par-valeur",
    "title": "Les pointeurs en C",
    "section": "Transmission de variables par valeur",
    "text": "Transmission de variables par valeur\nTransmettre le contenu d’une variable par valeur est à peu près une des premières choses que l’on apprend à faire, quel que soit le langage de programmation que l’on étudie. Voici ce que ça donne en C :\n#include &lt;stdio.h&gt;\n\nint main()\n{\n  // On enregistre la valeur `1` dans la variable `maVariable`\n  int maVariable = 1;\n  // On affiche \"maVariable = 1\"\n  // `maVariable` est transmise *par valeur* à la fonction `printf`\n  printf( \"maVariable = %d\\n\", maVariable );\n  return 0;\n}\nL’exemple ci-dessus est des plus basique, mais il faut bien commencer par quelque chose. D’abord on instancie la variable maVariable avec le type int et on lui assigne la valeur 1 dans la foulée. Ensuite, on affiche le contenu de cette variable. Et pour l’affichage, on utilise la fonction printf à laquelle on transmet la valeur de maVariable, c’est-à-dire 1 dans cet exemple. Ce qui ne se voit pas par contre, c’est qu’en interne, maVariable a été copiée, un peu comme si on avait fait une photocopie et que l’on avait envoyé cette photocopie à la fonction printf. Comme printf est une fonction de la librairie standard du C ce comportement est difficile à mettre en évidence. Pour cela, nous allons définir une fonction et tout deviendra plus clair.\n#include &lt;stdio.h&gt;\n\nvoid ex02( int maVariable );\n\nint main()\n{\n  // On assigne une valeur initiale à `maVariable`\n  int maVariable = 1;\n\n  // On appelle la fonction `ex02()` et on lui transmet\n  // la valeur de `maVariable`\n  // (comme une photocopie de cette variable)\n  ex02( maVariable );\n\n  // Maitenant la fonction `ex02()` est terminée. Elle a modifié\n  // la valeur de la variable qu’on lui a transmise, mais elle\n  // ne l’a fait que sur sa “photocopie”. Donc notre “original”\n  // n’est pas modifié. En conséquence, le code suivant affiche\n  // \"3. maVariable = 1\"\n  printf( \"3. maVariable = %d\\n\", maVariable );\n\n  return 0;\n}\n\nvoid ex02( int maVariable ) // `maVariable` est transmise par valeur\n                            // à la fonction `ex02()`\n{\n  // Affiche \"1. maVariable = 1\"\n  printf( \"1. maVariable = %d\\n\", maVariable );\n\n  // Modifie la valeur de `maVariable`\n  maVariable = 2;\n\n  // Affiche \"2. maVariable = 2\"\n  printf( \"2. maVariable = %d\\n\", maVariable );\n}\nDans ce deuxième exemple, on se rend tout de suite compte des limitations du passage de variables par valeur :\n\nLes valeurs sont copiées et la copie ne revient pas à l’expéditeur (l’expéditeur, c’est la fonction main() et le destinataire, c’est la fonction ex02()). C’est du vol qualifié et c’est surtout pas pratique si on veut que notre fonction retourne un résultat différent de la donnée de base. Bon, il y a toujours la possibilité d’utiliser un return, on en discutera après.\nEt ces copies prennent de la place en mémoire. Sur un ordi ça ne causera de problèmes que pour des gros programmes, mais sur l’ATmega328p d’un Arduino UNO avec 2 ko de RAM, ça compte.\nC’est potentiellement lent, puisqu’il faut copier les valeurs avant de les envoyer (sans compter le salaire de la secrétaire qui fait les copies… pff).\n\nBon ben je crois que le constat est clair, on a besoin d’un autre système pour transmettre nos variables. Et comme j’ai spoilé la réponse au début de cet article, vous savez déjà qu’il s’agit de la…"
  },
  {
    "objectID": "posts/2016-11-01-langage-C-les-pointeurs/index.html#transmission-de-variables-par-référence",
    "href": "posts/2016-11-01-langage-C-les-pointeurs/index.html#transmission-de-variables-par-référence",
    "title": "Les pointeurs en C",
    "section": "Transmission de variables par référence",
    "text": "Transmission de variables par référence\nSi vous ne connaissiez vraiment rien aux pointeurs avant de commencer la lecture de cet article, je suppose que l’inventeur qui sommeille en vous a dû se réveiller et s’écrier “Mais bon sang, pourquoi on ne transmettrait pas l’original plutôt que la copie !” Et bien vous venez de (ré)inventer le passage de variables par référence : BRAVO ! Et le principe est très simple, on ne transmet plus le contenu de nos variables, mais leurs adresses. Et ben oui, c’est un peu “viens chez moi, j’habite chez une copine”. Il suffit de transmettre l’adresse de la variable, histoire que le programme sache où aller passer sa soirée. Donc comme un exemple vaut 1000 mots en voici un :\n#include &lt;stdio.h&gt;\n\nvoid ex03( int *adresseDeMaVariable );\n\nint main()\n{\n  // On initialise `maVariable` à 1\n  int maVariable = 1;\n\n  // Et on envoie son adresse en mémoire (et pas sa valeur)\n  // Pour se faire, il suffit d’ajouter le caractère `&`\n  // avant le nom de la variable.\n  ex03( &maVariable ); // Suite de l’explication dans la fonction\n                       // `ex03()` ci-dessous.\n\n  // Et maintenant que la fonction `ex03()` a été exécutée\n  // (elle n’est pas morte, je vous rassure), vérifions que la valeur\n  // de `maVariable` a bel et bien été modifiée. Pour ce faire, nous\n  // n’avons pas besoin du signe `*`.\n  printf( \"4. maVariable = %d\\n\", maVariable );\n  // Et YES, ce code affiche\n  // 4. maVariable = 2\n  // Top cool les pointeurs !\n\n  return 0;\n}\n\nvoid ex03( int *adresseDeMaVariable )\n            // Cette fonction reçoit l’adresse de notre variable\n            // que l’on stocke dans un pointeur sur cette variable.\n            // Pour indiquer que c’est un pointeur, on ajoute\n            // le signe `*` avant son nom.\n            // En plus du signe `*`, on doit aussi spécifier le type\n            // qui doit être identique à celui de la variable pointée\n            // (`int` dans ce cas).\n{\n  // Maintenant on peut afficher cette adresse. Dans la pratique,\n  // ça n’a pas d’intérêt, c’est juste pour montrer que c’est possible.\n  // À noter que cette adresse sera certainement différente à chaque\n  // exécution du programme. Ça ne sert donc à rien de la stocker\n  // pour la réutiliser.\n  // Notez également le format `%p` pour que `printf` affiche l’adresse\n  // du pointeur correctement.\n  // Enfin, et c’est le plus important, il n’y a pas de signe `*`\n  // avant `adresseDeMaVariable`.\n  // Ce code affiche\n  // 1. adresseDeMaVariable = 0x7fff54435768\n  printf( \"1. adresseDeMaVariable = %p\\n\", adresseDeMaVariable );\n\n  // Plus intéressant maintenant, on va afficher la valeur de notre variable.\n  // C’est ce qu’on appelle “le déréférencement du pointeur”.\n  // Dans ce cas, le format d’affichage pour `printf` est `%d` car notre\n  // variable est de type `int`.\n  // Et le plus important, c’est que dans ce cas nous avons besoin du\n  // signe `*` avant `adresseDeMaVariable`.\n  // Ce code affiche\n  // 2. maVariable = 1\n  printf( \"2. maVariable = %d\\n\", *adresseDeMaVariable );\n\n  // Encore plus intéressant, on va modifier la valeur pointée par le pointeur.\n  // Là encore, nous avons besoin du signe `*`.\n  *adresseDeMaVariable = 2;\n\n  // Et si on l’affiche on obtient sans surprise\n  // 3. maVariable = 2\n  printf( \"3. maVariable = %d\\n\", *adresseDeMaVariable );\n\n  // Et maintenant retournons dans la fonction `main()`\n  // et vérifions que la valeur de la variable que nous avons\n  // transmise à `ex03()` a bel et bien été modifiée.\n  // Suspense...\n}\n\nPetit récapitulatif\n\nSi on veut obtenir l’adresse en mémoire d’une variable, il faut utiliser le signe &.\nL’adresse doit être stockée dans une variable de même type que la variable pointée (int dans l’exemple) avec en plus le signe *. C’est ce qu’on appelle un pointeur.\nSi l’on demande la valeur du pointeur SANS le signe * on obtient en fait L’ADRESSE de la variable pointée.\nSi l’on demande la valeur du pointeur AVEC le signe * on obtient en fait LA VALEUR de la variable pointée.\n\n\n\nNotes pratiques\nOn peut écrire indifféremment int *adresseDeMaVariable ou int* adresseDeMaVariable\nLa notation d’un pointeur en C se fait en deux parties :\n\nLe signe *.\nLe nom de la variable qui contient l’adresse pointée.\n\nDans mon exemple ci-dessus, cela donne : *adresseDeMaVariable.\nDonc pour ne pas se mélanger les pinceaux, il vaut mieux éviter d’écrire : *pointeurVersMaVariable, car le pointeur est composée des deux parties (le signe * et l’adresse).\n! La syntaxe du C n’est pas cohérente, car suivant le contexte, le signe * aura une signification différente :\n\nquand on spécifie qu’une fonction accepte un pointeur en paramètre, on utilise le signe *, alors que ce qui est transmis est l’adresse et pas la valeur.\nquand on veut obtenir la valeur pointée (et pas l’adresse), on doit aussi utiliser le signe *."
  },
  {
    "objectID": "posts/2016-11-01-langage-C-les-pointeurs/index.html#pour-la-suite",
    "href": "posts/2016-11-01-langage-C-les-pointeurs/index.html#pour-la-suite",
    "title": "Les pointeurs en C",
    "section": "Pour la suite",
    "text": "Pour la suite\nMon exemple de transmission de variable par référence pourrait ne pas utiliser de pointeur, mais la possibilité de retourner une valeur à la fin de la fonction avec le mot clé return. Cependant les return sont en général utilisés pour retourner le statut d’exécution de la fonction, autrement dit si elle a réussi à faire ce qu’on lui a demandé ou pas.\nEt les return ont une limitation particulièrement ennuyeuse qui nous obligera de toute façon à utiliser les pointeurs : ils ne peuvent pas transmettre de tableaux. Et comme les tableaux sont omniprésents en programmation, on va donc également utiliser abondamment les pointeurs. Mais ça fera l’objet d’un autre article."
  },
  {
    "objectID": "posts/2016-11-01-langage-C-les-pointeurs/index.html#note-pour-les-pros",
    "href": "posts/2016-11-01-langage-C-les-pointeurs/index.html#note-pour-les-pros",
    "title": "Les pointeurs en C",
    "section": "Note pour les pros",
    "text": "Note pour les pros\n\nSi vous savez utiliser le terminal et que vous avez gcc installé sur votre ordi, vous pouvez tester les exemples de cette page avec les commandes : FILENAME=... # Nom du fichier .c sans l’extension &gt; gcc $FILENAME.c -o $FILENAME && ./$FILENAME"
  },
  {
    "objectID": "posts/2016-11-01-langage-C-les-pointeurs/index.html#utilisation-des-pointeurs-pour-les-tableaux",
    "href": "posts/2016-11-01-langage-C-les-pointeurs/index.html#utilisation-des-pointeurs-pour-les-tableaux",
    "title": "Les pointeurs en C",
    "section": "Utilisation des pointeurs pour les tableaux",
    "text": "Utilisation des pointeurs pour les tableaux\nQuand j’aurai le temps, j’écrirai un article sur ce sujet. Pour l’instant voici quelques exemples que j’ai posté sur StackExchange :\n\nhttp://arduino.stackexchange.com/a/31417/13995"
  },
  {
    "objectID": "posts/2019-10-19-livres/index.html",
    "href": "posts/2019-10-19-livres/index.html",
    "title": "Livres",
    "section": "",
    "text": "Une sélection de livres intéressants. En anglais uniquement pour l’instant.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2019-10-19-livres/index.html#elements-of-robotics",
    "href": "posts/2019-10-19-livres/index.html#elements-of-robotics",
    "title": "Livres",
    "section": "Elements of Robotics",
    "text": "Elements of Robotics\n\nMordechai Ben-Ari Francesco Mondada\n\nCe livre est publié avec une licence open source CC-BY.\n{:style=“width:50%;”}\nElements of Robotics — Ben-Ari, Mondada — springer.com\nElements of Robotics — Ben-Ari, Mondada — EPUB format\nElements of Robotics — Ben-Ari, Mondada — PDF format"
  },
  {
    "objectID": "posts/2019-10-19-livres/index.html#springer-handbook-of-robotics",
    "href": "posts/2019-10-19-livres/index.html#springer-handbook-of-robotics",
    "title": "Livres",
    "section": "Springer Handbook of Robotics",
    "text": "Springer Handbook of Robotics\n\nBruno Siciliano Oussama Khatib\n\nLa bible de la robotique.\n{:style=“width:50%;”}\nSpringer Handbook of Robotics — springer.com"
  },
  {
    "objectID": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html",
    "href": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html",
    "title": "BMP280 avec Arduino Pro Mini",
    "section": "",
    "text": "BMP280 (pression et température) acheté chez Banggood pour 1.98 $\nATmega328P-AU Pro Mini 3.3V 8MHz, acheté chez Banggood pour 13 $ les 5 pièces\nProgrammateur FTDI\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#matériel",
    "href": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#matériel",
    "title": "BMP280 avec Arduino Pro Mini",
    "section": "",
    "text": "BMP280 (pression et température) acheté chez Banggood pour 1.98 $\nATmega328P-AU Pro Mini 3.3V 8MHz, acheté chez Banggood pour 13 $ les 5 pièces\nProgrammateur FTDI"
  },
  {
    "objectID": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#code-de-test",
    "href": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#code-de-test",
    "title": "BMP280 avec Arduino Pro Mini",
    "section": "Code de test",
    "text": "Code de test\nAdafruit_BMP280_Library"
  },
  {
    "objectID": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#notes",
    "href": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#notes",
    "title": "BMP280 avec Arduino Pro Mini",
    "section": "Notes",
    "text": "Notes\nComme ce modèle de BMP280 n’a pas de régulateur de tension 3.3 V, j’en ai ajouté un (LP2950) soudé sur veroboard entre le programmateur FTDI et l’Arduino.\nCe capteur peut être utilisé sur le bus I²C ou le bus SPI. Les dénominations des broches indiquées sur le PCB sont pour l’I²C. Pour le SPI, la table ci-dessous indique la conversion."
  },
  {
    "objectID": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#brochage-spi",
    "href": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#brochage-spi",
    "title": "BMP280 avec Arduino Pro Mini",
    "section": "Brochage SPI",
    "text": "Brochage SPI\n\n\n\nBMP280\nSPI Arduino\n\n\n\n\nVCC\nVCC\n\n\nGND\nGND\n\n\nSCL\nSCK pin 13\n\n\nSDA\nMOSI pin 11\n\n\nCSB\nSS pin 10\n\n\nSDO\nMISO pin 12"
  },
  {
    "objectID": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#résultats",
    "href": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#résultats",
    "title": "BMP280 avec Arduino Pro Mini",
    "section": "Résultats",
    "text": "Résultats\nJe n’ai testé que le mode SPI (hardware) et pas le mode I²C et ça fonctionne bien.\n\n\n\nBMP280 + Arduino Pro Mini"
  },
  {
    "objectID": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#voir-aussi",
    "href": "posts/2017-05-11-bmp280-arduino-pro-mini/index.html#voir-aussi",
    "title": "BMP280 avec Arduino Pro Mini",
    "section": "Voir aussi",
    "text": "Voir aussi\n\nArticle d’Adafruit sur le BMP280\nBMP280 sur le site de Bosch\nDatasheet du BMP280"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "",
    "text": "ouilogique.com\n© ouilogique.com"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#brochage",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#brochage",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Brochage",
    "text": "Brochage\n\n\n\nouilogique.com\n\n\n\nSeules les broches P0.01 à P0.06 peuvent être configurées en entrées analogiques.\nToutes les broches peuvent être utilisées pour le SPI, l’I²C et le RS232 et pas seulement les broches indiquées sur le schéma de brochage.\nIl n’y a qu’un périphérique UART, deux SPI et deux I²C (appelés TWI), mais il faut choisir : soit SPI0 ou TWI0, soit SPI1 ou TWI1, car ils partagent visiblement des ressources communes !"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#support-imprimé-3d",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#support-imprimé-3d",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Support imprimé 3D",
    "text": "Support imprimé 3D\n\nhttps://www.thingiverse.com/thing:1012855\nhttps://cad.onshape.com/documents/3f05e14ebb62415c928ff36e/w/d85b78be98c545f6ab2fd41f/e/7053fbf40382442182af2f67"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#la-carte-nrf51-en-bref",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#la-carte-nrf51-en-bref",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "La carte nRF51 en bref",
    "text": "La carte nRF51 en bref\nC’est une carte de développement pour le prototypage d’applications Bluetooth LE. Le brochage est compatible avec celui de l’Arduino UNO, donc en théorie on peut utiliser les mêmes shields. Dans la pratique, il faudra faire attention au fait que la carte nRF51 ne fonctionne que sous 3.3 V et que le courant max des sorties est de 0.5 mA (5 mA sur 3 broches au maximum avec le mode “high drive” qu’il faut configurer explicitement)¹.\n\n¹ Voir “nRF51822 Product Specification v3.1 — chap 8.23 — General Purpose I/O (GPIO) specifications”, page 65"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#bluetooth-avec-node.js",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#bluetooth-avec-node.js",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Bluetooth avec Node.js",
    "text": "Bluetooth avec Node.js\nNoBLE"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#bluetooth-et-le-marketing",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#bluetooth-et-le-marketing",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Bluetooth et le marketing",
    "text": "Bluetooth et le marketing\n\n⚠ Bluetooth ≠ Bluetooth Low Energy\n\n\n\n\nNom courant\n⇒ Nom du marketing\n\n\n\n\nBluetooth (v1, v2, v3)\n⇒ Bluetooth Classic (BR, EDR)\n\n\nBluetooth Low Energy (v4)\n⇒ Bluetooth Smart\n\n\nBluetooth + Bluetooth Low Energy\n⇒ Bluetooth Smart Ready"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#android",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#android",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Android",
    "text": "Android\nnRF Master Control Panel (BLE)"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#quelques-outils-pour-os-x",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#quelques-outils-pour-os-x",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Quelques outils pour OS X",
    "text": "Quelques outils pour OS X\nHardwareIOTools_Xcode_6.3"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#portée-des-variables",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#portée-des-variables",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Portée des variables",
    "text": "Portée des variables\nstatic const dans une fonction ⇒ stocké en flash\n/* PORTÉE DES VARIABLES */\n                          // VISIBILITÉ  PERSISTANCE  ALLOCATION\n                          // ==========  ===========  ==========\nint vg;                   // Globale     Programme    Heap\nstatic int vg;            // Module      Programme    Heap\nvoid f(..) {\n  int vl;                 // Fonction    Fonction     Stack\n  static int vlp;         // Fonction    Programme    Heap\n  const int vlc = ..;     // Fonction    Fonction     Stack/opt\n  static const vlcs = ..; // Fonction    Programme    Flash\nnorme C 99 ⇒ permet des déclarations spéciales de struct"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#liens",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#liens",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Liens",
    "text": "Liens\n\nhttp://jmkikori.no-ip.org/jmk/joomla-static/index.php/2-uncategorised/1-introduction-bluetooth-low-energy.html\nhttps://os.mbed.com/platforms/Nordic-nRF51-DK/\nBande industrielle, scientifique et médicale (Wikipédia)\nBluetooth (Wikipédia)\nBluetooth Accessory Design Guidelines for Apple Products\nKit Didel\nhttps://evothings.com\nList of Bluetooth Smart and Bluetooth Smart Ready products available now"
  },
  {
    "objectID": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#modules-ble",
    "href": "posts/2015-09-14-bluetooth_low_energy_avec_nRF51/index.html#modules-ble",
    "title": "Découverte du Bluetooth Low Energy avec la carte Nordic Semiconductor nRF51",
    "section": "Modules BLE",
    "text": "Modules BLE\n\nRedBearLab\nAliexpress\nMDBT40 (SeeedStudio) — MDBT40 (Raytac)\nBanggood (avec quartz 32 kHz)\nMicrochip BM77\nHM-10 Bluetooth 4.0 Module Transparent Serial Port With Logic Level Translator\nDFRobot — Bluno\nBluno Beetle V1.0 — AliExpress"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "",
    "text": "Les commandes présentées télégraphiquement ici sont tirées des pages :\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#get-status",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#get-status",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Get status",
    "text": "Get status\n\nretourne OK ou ERROR\n\nAT"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#current-firmware-version",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#current-firmware-version",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Current firmware version",
    "text": "Current firmware version\nAT+GMR\n&gt; AT version:0.40.0.0(Aug 8 2015 14:45:58)\n&gt; SDK version:1.3.0\n&gt; Ai-Thinker Technology Co.,Ltd.\n&gt; Build:1.3.0.2 Sep 11 2015 11:48:04\n&gt; OK"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#baud-rate",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#baud-rate",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Baud rate",
    "text": "Baud rate\n\nfonctionne pas\n\nAT+CIOBAUD?"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#mode-of-operation-of-the-module",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#mode-of-operation-of-the-module",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Mode of operation of the module",
    "text": "Mode of operation of the module\nAT+CWMODE?"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#list-access-points-in-range",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#list-access-points-in-range",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "List access points in range",
    "text": "List access points in range\nAT+CWLAP"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#connect-to-your-homeoffice-access-point",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#connect-to-your-homeoffice-access-point",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Connect to your home/office access point",
    "text": "Connect to your home/office access point\nAT+CWJAP=\"yourSSID\",\"yourWifiPassword\"\nAT+CWJAP=\"×××\",\"×××\"\n&gt; WIFI CONNECTED\n&gt; WIFI GOT IP\n&gt;\n&gt; OK"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#disconnect",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#disconnect",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Disconnect",
    "text": "Disconnect\nAT+CWQAP"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#current-ip",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#current-ip",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Current IP",
    "text": "Current IP\nAT+CIFSR\n&gt; +CIFSR:STAIP,\"192.168.1.132\"\n&gt; +CIFSR:STAMAC,\"18:fe:34:d4:8e:d5\"\n&gt;\n&gt; OK"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#esp-on-station-mode",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#esp-on-station-mode",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "ESP on STation mode",
    "text": "ESP on STation mode\nAT+CWMODE?\nAT+CWMODE=1"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#start-a-web-server-with-esp-module",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#start-a-web-server-with-esp-module",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Start a web server with ESP module",
    "text": "Start a web server with ESP module\nAT+CIPMUX=1"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#start-the-server-at-http-port-80",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#start-the-server-at-http-port-80",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Start the server at HTTP port 80",
    "text": "Start the server at HTTP port 80\nAT+CIPSERVER=1,80"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#close-server",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#close-server",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Close server",
    "text": "Close server\nAT+CIPSERVER=0\nAT+RST\n&gt; OK\n&gt; 1,CLOSED"
  },
  {
    "objectID": "posts/2016-08-13-esp_commandes_at_utiles/index.html#current-ip-1",
    "href": "posts/2016-08-13-esp_commandes_at_utiles/index.html#current-ip-1",
    "title": "ESP8266 — Commandes AT utiles",
    "section": "Current IP",
    "text": "Current IP\nAT+CIFSR\n&gt; +CIFSR:STAIP,\"192.168.1.132\"\n&gt; +CIFSR:STAMAC,\"18:fe:34:d4:8e:d5\"\n&gt;\n&gt; OK\n&gt; 0,CONNECT\n\n&gt; +IPD,0,439:GET / HTTP/1.1\n&gt; Host: 192.168.1.132\n&gt; Connection: keep-alive\n&gt; Cache-Control: max-age=0\n&gt; Upgrade-Insecure-Requests: 1\n&gt; User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\n&gt; Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,_/_;q=0.8\n&gt; Accept-Encoding: gzip, deflate, sdch\n&gt; Accept-Language: fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4,de;q=0.2\nAT+CIPSEND=0,31\n&lt;h1&gt;Hello World&lt;/h1&gt;&lt;p&gt;cool&lt;/p&gt;\nAT+CIPCLOSE=0\ntelnet 192.168.1.132:80"
  },
  {
    "objectID": "posts/2016-07-08-tests_DFPlayer/index.html",
    "href": "posts/2016-07-08-tests_DFPlayer/index.html",
    "title": "Tests de modules DFPlayer",
    "section": "",
    "text": "Voici un petit module fort pratique pour lire des fichiers MP3. Il ne coûte presque rien (~8 € pour trois pièces) et il permet d’utiliser des cartes micro SD jusqu’à 32 Go. Il communique via le port série et pour éviter de monopoliser l’unique port série matériel de l’Arduino Nano, la bibliothèque fournie par DFRobot permet d’utiliser facilement un port série logiciel que l’on peut configurer sur à peu près n’importes quelles entrées-sorties digitales. J’ai testé avec les paires 10 & 11 et A0 & A1 et ça fonctionne bien.\nÀ priori, ce module peut être utilisé de 3.2 V à 5 V, mais à 5 V il y a un ronflement prononcé sur le haut-parleur. La solution consiste à placer une résistance de 1 kΩ en série sur la sortie TX de l’Arduino.\nPour la qualité du son, elle est très bonne. Pendant le déverminage, je me suis contenté d’un buzzer comme on le voit sur l’image ci-dessous. Mais par après, j’ai fait un test en connectant une enceinte monophonique amplifiée et j’ai été agréablement surpris par la qualité du son. Bon, comme mon enceinte de test est mono, je n’ai pas pu tester la qualité en stéréo (si le mode stéréo est possible, parce que ce point n’est pas clair). Lorsque j’ai testé les sorties DAC_R et DAC_L (broches 4 & 5) , j’ai remarqué que la masse “Power GND” (broche 7 ou 10) donnait des résultats médiocres, alors que si on utilise SPK2 (broche 6), le résultat est très bon. En conclusion, ça marche bien avec les sorties DAC ou avec les sorties SPK.\nJ’ai testé deux cartes micro SD : une de 32 Go et une autre de 8 Go et les deux ont fonctionné sans problème. Le formatage en FAT32 sous OSX avec l’utilitaire de disques n’a pas posé de problème non plus.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-07-08-tests_DFPlayer/index.html#programme-dexemple",
    "href": "posts/2016-07-08-tests_DFPlayer/index.html#programme-dexemple",
    "title": "Tests de modules DFPlayer",
    "section": "Programme d’exemple",
    "text": "Programme d’exemple\n\nhttps://github.com/NicHub/ouilogique-Arduino/blob/master/DFPlayer/DFPlayer-test-1/DFPlayer-test-1.ino\n\nPour utiliser le programme ci-dessus, il faut installer la bibliothèque DFPlayer-Mini-mp3 de DFRobot :\n\nhttps://github.com/DFRobot/DFPlayer-Mini-mp3.git\n\n\n!! Attention, le dépôt Git contient un sous-répertoire DFPlayer_Mini_Mp3 et c’est lui seul qui doit se trouver dans ~/Documents/Arduino/libraries/ !!"
  },
  {
    "objectID": "posts/2016-07-08-tests_DFPlayer/index.html#références",
    "href": "posts/2016-07-08-tests_DFPlayer/index.html#références",
    "title": "Tests de modules DFPlayer",
    "section": "RÉFÉRENCES",
    "text": "RÉFÉRENCES\n\nhttp://www.banggood.com/3Pcs-DFPlayer-Mini-MP3-Player-Module-For-Arduino-p-981366.html?p=0431091025639201412F\nhttp://www.dfrobot.com/wiki/index.php/DFPlayer_Mini_SKU:DFR0299\nhttp://www.dfrobot.com/image/data/DFR0299/DFPlayer%20Mini%20Manul.pdf\nhttp://www.trainelectronics.com/Arduino/MP3Sound/TalkingTemperature/FN-M16P%20Embedded%20MP3%20Audio%20Module%20Datasheet.pdf"
  },
  {
    "objectID": "posts/2016-07-08-tests_DFPlayer/index.html#notes",
    "href": "posts/2016-07-08-tests_DFPlayer/index.html#notes",
    "title": "Tests de modules DFPlayer",
    "section": "NOTES",
    "text": "NOTES\nLe DFPlayer communique avec le port série. Comme l’Arduino Nano n’a qu’un UART, la librairie de DFPlayer permet d’utiliser un port série logiciel. À priori, n’importe quelle broche digitale de l’Arduino Nano peut être utilisée à cet effet. J’ai testé avec les couples de broches 10 & 11 ainsi que A0 & A1 et ça fonctionne.\n\n!!! IL FAUT FAIRE ATTENTION DE CONNECTER LE RX DU DFPlayer AU TX DE L’ARDUINO ET INVERSEMENT POUR LES DEUX AUTRES SIGNAUX !!!\n\nPour le déverminage, il peut être utile de passer au morceau suivant ou précédent en mettant les broches 11 (IO2) et 9 (IO1) à la masse pour forcer la lecture.\nSi on n’a pas de haut-parleur, un buzzer peut faire l’affaire lors de la mise en route."
  },
  {
    "objectID": "posts/2016-07-08-tests_DFPlayer/index.html#notes-sur-la-carte-sd",
    "href": "posts/2016-07-08-tests_DFPlayer/index.html#notes-sur-la-carte-sd",
    "title": "Tests de modules DFPlayer",
    "section": "NOTES SUR LA CARTE SD",
    "text": "NOTES SUR LA CARTE SD\n\nJusqu’à 32 Go (testé avec 32 Go ⇒ OK)\nFormaté en FAT16 ou en FAT32 (testé FAT32 formaté avec OSX ⇒ OK)\nDoit contenir un répertoire appelé “mp3”\nLe répertoire appelé “mp3” peut optionnellement contenir des répertoires appelés “001”, “002”, …\nLes noms des fichiers doivent commencer par 4 digits et finir par l’extension “.mp3”\n\n    /Volumes/DFPLAYER/mp3\n    ├── 0001×××.mp3\n    ├── 0002×××.mp3\n    ├── 0003×××.mp3\n    ├── 0004×××.mp3\n\nCONNEXIONS DFPlayer AVEC HAUT-PARLEUR PASSIF (non-amplifié)\nVCC   (pin 1)     ⇒     5V Arduino Nano\nRX    (pin 2)  ¹  ⇒     software TX Arduino Nano (pin 10) ²\nTX    (pin 3)     ⇒     software RX Arduino Nano (pin 11) ³\nSPK2  (pin 6)     ⇒     Haut-parleur - (ou buzzer -)\nGND   (pin 7)     ⇒     GND Arduino Nano\nSPK1  (pin 8)     ⇒     Haut-parleur + (ou buzzer +)\n¹ Ajouter une résistance de 1 kΩ en série pour éviter les ronflements ² fonctionne aussi sur A0 ³ fonctionne aussi sur A1\n\n\nCONNEXIONS DFPlayer AVEC HAUT-PARLEUR ACTIF (amplifié)\nidem que si dessus sauf pour le HP\nDAC\\_R  (pin 4)   ⇒     Haut-parleur droite +\nDAC\\_L  (pin 5)   ⇒     Haut-parleur gauche +\nSPK2    (pin 6)   ⇒     Haut-parleur droite - & gauche -\n\n\nERREURS DANS LES FICHES TECHNIQUES (édit. du 27.02.2019)\nLes fiches techniques disponibles ont des erreurs : SPK1 et SPK2 sont inversés suivant où l’on regarde.\n\nhttps://github.com/NicHub/ouilogique-Arduino/commit/a6653da674c18434d6784aeaf6c92e0cf681c2e0#r32497731"
  },
  {
    "objectID": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html",
    "href": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html",
    "title": "Installer Mosquitto MQTT avec WebSocket sur un Raspberry Pi",
    "section": "",
    "text": "Sur Raspbian Stretch, la version de mosquitto est assez vieille, donc cette procédure permet d’installer la dernière version disponible dans le dépôt. Au moment où j’écris ce billet, la vesion disponible avec apt-get est la 1.4.10 alors que la dernière version est la 1.6.4 (https://mosquitto.org/files/source/).\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#matériel",
    "href": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#matériel",
    "title": "Installer Mosquitto MQTT avec WebSocket sur un Raspberry Pi",
    "section": "Matériel",
    "text": "Matériel\n\nUn Raspberry Pi (testé avec un Raspberry Pi 2, Raspbian Stretch)\nUn Mac (testé avec macOS Sierra et Mojave)"
  },
  {
    "objectID": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#installation-de-raspian-stretch",
    "href": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#installation-de-raspian-stretch",
    "title": "Installer Mosquitto MQTT avec WebSocket sur un Raspberry Pi",
    "section": "Installation de Raspian Stretch",
    "text": "Installation de Raspian Stretch\nJ’ai testé la procédure ci-dessous avec une installation propre de Raspian Stretch.\n\nhttps://ouilogique.com/installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/"
  },
  {
    "objectID": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#installation-et-compilation-de-mosquitto-1.6.4",
    "href": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#installation-et-compilation-de-mosquitto-1.6.4",
    "title": "Installer Mosquitto MQTT avec WebSocket sur un Raspberry Pi",
    "section": "Installation et compilation de mosquitto 1.6.4",
    "text": "Installation et compilation de mosquitto 1.6.4\nLes informations ci-dessous sont tirées de ce blog avec quelques adaptations :\n\nhttps://goo.gl/BQh6hA\n\n# Installation des dépendances\nsudo apt-get --assume-yes install \\\nbuild-essential \\\npython \\\nquilt \\\ndevscripts \\\npython-setuptools \\\npython3 \\\nlibssl-dev \\\ncmake \\\nlibc-ares-dev \\\nuuid-dev \\\ndaemon \\\nzlibc \\\nzlib1g \\\nzlib1g-dev\n\n# Compilation de libwebsockets\ngit clone https://github.com/warmcat/libwebsockets.git\ncd libwebsockets\nmkdir build\ncd build\ncmake .. && sudo make install && sudo ldconfig\n\n# Compilation de mosquitto\nmkdir ~/mosquitto\ncd ~/mosquitto/\n\n# Vérifier quelle est la dernière version disponible de `mosquitto`\n# sur https://mosquitto.org/files/source/\nMOSQUITTO_VER=mosquitto-1.6.4\nwget https://mosquitto.org/files/source/$MOSQUITTO_VER.tar.gz\ntar zxvf $MOSQUITTO_VER.tar.gz\ncd $MOSQUITTO_VER\n\n# Configuration des options de compilation de mosquitto\n# Changer la ligne : WITH_WEBSOCKETS:=yes\nsudo nano config.mk\n\nmake && sudo make install\nsudo cp mosquitto.conf /etc/mosquitto\n\n# Ajout de l’utilisateur “mosquitto”\nsudo adduser mosquitto\n\n# Configuration des options de mosquitto\nsudo nano /etc/mosquitto/mosquitto.conf\n# Trouver et modifier les lignes suivantes :\nport 1883\nlistener 9001\nprotocol websockets\npid_file /var/run/mosquitto.pid\n\n# Optionnellement, on peut ajouter une couche\n# de sécurité en créant un fichier de mot de passe\nmosquitto_passwd -c /etc/mosquitto/passwd yourloginname\nsudo nano /etc/mosquitto/mosquitto.conf\nallow_anonymous false\n\n# Création d’un lien\nsudo ln -s /usr/local/sbin/mosquitto /bin/mosquitto\n\n# Redémarrage\nsudo reboot\n\n# Pour démarrer mosquitto manuellement\nmosquitto -v -c /etc/mosquitto/mosquitto.conf # -v = verbose\n\n# Pour démarrer mosquitto automatiquement\n# lors du boot du Raspberry\nsudo nano /etc/systemd/system/mosquitto.service\n\n# Mettre les infos suivantes\n# dans le fichier “mosquitto.service”\n# Voir &lt;https://goo.gl/wMCZFv&gt;\n# ou &lt;https://do.co/2hrMEtL&gt; pour plus d’infos\n[Unit]\nDescription=Mosquitto MQTT Broker daemon\nConditionPathExists=/etc/mosquitto/mosquitto.conf\nRequires=network.target\n\n[Service]\nType=simple\nExecStartPre=/bin/rm -f /run/mosquitto.pid\nExecStart=/usr/local/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf -d\nExecReload=/bin/kill -HUP $MAINPID\nPIDFile=/run/mosquitto.pid\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n\n# Activer le service\nsudo systemctl enable mosquitto\nsudo systemctl start mosquitto\n\n# Arrêter le service\nsudo systemctl stop mosquitto\n\n# Désactiver le service de façon permanente\nsudo systemctl disable mosquitto\n\n# Obtenir des informations sur le service\nsudo systemctl status mosquitto\n\n# À partir d’ici, mosquitto démarrera avec le système\nsudo reboot\n\n# Vérifier que tout fonctionne\npidof mosquitto"
  },
  {
    "objectID": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#pour-tester",
    "href": "posts/2017-09-18-mosquitto-mqtt-raspbery/index.html#pour-tester",
    "title": "Installer Mosquitto MQTT avec WebSocket sur un Raspberry Pi",
    "section": "Pour tester",
    "text": "Pour tester\n# Écouter les messages.\nmosquitto_sub --host raspberrypi.local --topic \"SUPERTEST/#\"\n# Envoyer un message.\nmosquitto_pub --retain --host raspberrypi.local --topic \"SUPERTEST\" \\\n--message '{\"DATE\":\"'\"`date \"+%Y-%m-%dT%H:%M:%S+02:00\"`\"'\"}'\n# Envoyer des messages en continu. Sur macOS, la commande `date`\n# ne permet pas d’obtenir une résolution inférieure à la seconde.\n# Il faut donc installer gdate du package `coreutils`.\nbrew install coreutils\nbrew link coreutils\nwhile true ; do mosquitto_pub --retain --host raspberrypi.local --topic \"SUPERTEST\" \\\n--message '{\"DATE\":\"'\"`gdate \"+%Y-%m-%dT%H:%M:%6N+%Z\"`\"'\"}' ; sleep 0.1 ; done"
  },
  {
    "objectID": "posts/2021-04-30-image-haute-resolution-avec-un-samsung-s21-ultra/index.html",
    "href": "posts/2021-04-30-image-haute-resolution-avec-un-samsung-s21-ultra/index.html",
    "title": "Une image haute résolution avec un Samsung S21 Ultra",
    "section": "",
    "text": "Voici une photo haute résolution que j’ai prise avec un téléphone Samsung S21 Ultra.\nJe me tenais à environ 1.5 m de la machine que l’on voit sur la photo.\nL’image a une dimension de 12 000 × 9000 = 108 Mpx.\nLa taille du fichier est de 27 386 678 octets (~26 Mio).\nAu centre, le PCB fait environ 30 cm de large et ce qui est absolument bluffant, c’est que si on zoome sur lui, on découvre que les textes minuscules sont lisibles.\n\n\n\nUne image haute résolution avec un Samsung S21 Ultra\n\n\n\n\n\nDétail de l’image haute résolution avec un Samsung S21 Ultra\n\n\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-08-27-installer-gphoto2/index.html",
    "href": "posts/2017-08-27-installer-gphoto2/index.html",
    "title": "Installer GPHOTO2",
    "section": "",
    "text": "La bibliothèque GPHOTO2 est utilisée par des applications pour accéder à une grande variété de modèles d’appareils photo numériques, à l’aide des protocoles standards comme l’USB Mass Storage et PTP, ou à l’aide des protocoles propres aux fabricants.\nDans cet article, je présente l’installation de GPHOTO2 sous MaxOS Sierra et sous Raspbian Stretch.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2017-08-27-installer-gphoto2/index.html#installation-de-gphoto2-sur-macos-sierra",
    "href": "posts/2017-08-27-installer-gphoto2/index.html#installation-de-gphoto2-sur-macos-sierra",
    "title": "Installer GPHOTO2",
    "section": "Installation de GPHOTO2 sur macOS Sierra",
    "text": "Installation de GPHOTO2 sur macOS Sierra\nL’installation de GPHOTO2 sur macOS Sierra se fait avec Homebrew\nbrew update\nbrew install gphoto2\n# Ou pour mettre à jour\nbrew upgrade gphoto2\ngphoto2 -v\n\n# gphoto2 2.5.14\n#\n# Copyright (c) 2000-2016 Lutz Mueller and others\n#\n# gphoto2 comes with NO WARRANTY, to the extent permitted by law. You may\n# redistribute copies of gphoto2 under the terms of the GNU General Public\n# License. For more information about these matters, see the files named COPYING.\n#\n# This version of gphoto2 is using the following software versions and options:\n# gphoto2         2.5.14         clang, popt(m), no exif, no cdk, no aa, jpeg, readline\n# libgphoto2      2.5.14         all camlibs, clang, ltdl, no EXIF\n# libgphoto2_port 0.12.0         clang, ltdl, USB, serial without locking"
  },
  {
    "objectID": "posts/2017-08-27-installer-gphoto2/index.html#installation-de-gphoto2-sur-raspbian-stretch",
    "href": "posts/2017-08-27-installer-gphoto2/index.html#installation-de-gphoto2-sur-raspbian-stretch",
    "title": "Installer GPHOTO2",
    "section": "Installation de GPHOTO2 sur Raspbian Stretch",
    "text": "Installation de GPHOTO2 sur Raspbian Stretch\n\nGPHOTO2 n’est disponible qu’à la version 2.5.4 sur Raspbian Jessie avec la commande sudo apt-get install gphoto2. Il est donc préférable d’utiliser Raspbian Stretch. Sur Raspbian Stretch, la version par défaut est la 2.5.11, mais il est possible d’installer manuellement la version 2.5.14.\n\nsudo apt-get --assume-yes install gphoto2\ngphoto2 -v\n\n# gphoto2 2.5.11\n#\n# Copyright (c) 2000-2016 Lutz Mueller and others\n#\n# gphoto2 comes with NO WARRANTY, to the extent permitted by law. You may\n# redistribute copies of gphoto2 under the terms of the GNU General Public\n# License. For more information about these matters, see the files named COPYING.\n#\n# This version of gphoto2 is using the following software versions and options:\n# gphoto2         2.5.11         gcc, popt(m), exif, cdk, aa, jpeg, readline\n# libgphoto2      2.5.12         all camlibs, gcc, ltdl, EXIF\n# libgphoto2_port 0.12.0         gcc, ltdl, USB, serial without locking\n\nGPHOTO2 entre en conflit avec gvfs-gphoto2-volume-monitor et il est donc nécessaire de le désactiver avec les commandes suivantes :\n\nsudo chmod -x /usr/lib/gvfs/gvfs-gphoto2-volume-monitor\nsudo reboot\nssh pi@raspberrypi.local\n\nPour installer la version 2.5.14\n\nwget http://archive.raspbian.org/raspbian/pool/main/g/gphoto2/gphoto2_2.5.14-1_armhf.deb\nwget http://archive.raspbian.org/raspbian/pool/main/libg/libgphoto2/libgphoto2-6_2.5.14-1_armhf.deb\nsudo dpkg -i gphoto2_2.5.14-1_armhf.deb libgphoto2-6_2.5.14-1_armhf.deb\nrm gphoto2_2.5.14-1_armhf.deb libgphoto2-6_2.5.14-1_armhf.deb\ngphoto2 -v\n\n# gphoto2 2.5.14\n#\n# Copyright (c) 2000-2016 Lutz Mueller and others\n#\n# gphoto2 comes with NO WARRANTY, to the extent permitted by law. You may\n# redistribute copies of gphoto2 under the terms of the GNU General Public\n# License. For more information about these matters, see the files named COPYING.\n#\n# This version of gphoto2 is using the following software versions and options:\n# gphoto2         2.5.14         gcc, popt(m), exif, cdk, aa, jpeg, readline\n# libgphoto2      2.5.14         all camlibs, gcc, ltdl, EXIF\n# libgphoto2_port 0.12.0         gcc, ltdl, USB, serial without locking"
  },
  {
    "objectID": "posts/2017-08-27-installer-gphoto2/index.html#quelques-commandes-utiles",
    "href": "posts/2017-08-27-installer-gphoto2/index.html#quelques-commandes-utiles",
    "title": "Installer GPHOTO2",
    "section": "Quelques commandes utiles",
    "text": "Quelques commandes utiles\n# Connecter un appareil de photo sur un port USB du Raspberry.\n# J’ai testé avec un Nikon D3200 et ça fonctionne\ngphoto2 --auto-detect\ngphoto2 --abilities\ngphoto2 --summary\ngphoto2 --list-ports\nmkdir gphoto2\ncd gphoto2/\ngphoto2 --capture-image-and-download --interval 2 --frames 2 --filename=image_%Y-%m-%d_%H-%M-%S.jpg"
  },
  {
    "objectID": "posts/2017-08-27-installer-gphoto2/index.html#pour-visionner-les-photos",
    "href": "posts/2017-08-27-installer-gphoto2/index.html#pour-visionner-les-photos",
    "title": "Installer GPHOTO2",
    "section": "Pour visionner les photos",
    "text": "Pour visionner les photos\nUn moyen simple de visionner les photos est de créer un mini serveur web sur le Raspberry. Pour démarrer ce serveur, il suffit d’utiliser les commandes suivantes, puis de copier-coller l’URL (par exemple http://192.168.1.135:4000) dans un navigateur.\n# Ces deux commandes peuvent être copiées-collées directement dans le terminal ou mises dans le fichier ~/.bash_profile.\n# Voir https://ouilogique.com/installer-raspberry-pi-os-sur-raspberry-pi-sans-clavier-ni-souris-ni-ecran/#configuration.\nIP=$(hostname -I | awk '{print $1}')\nalias pyserver='PORT=4000; echo -e \"\\nhttp://localhost:$PORT\"; echo -e \"http://$IP:$PORT\\n\"; python -m SimpleHTTPServer $PORT'\n# Démarre le serveur (ctrl-C pour l’arrêter)\npyserver\nComme le serveur bloque la ligne de commande, il est préférable de l’utiliser dans un autre shell avec l’utilitaire gnu screen."
  },
  {
    "objectID": "posts/2017-08-27-installer-gphoto2/index.html#quelques-liens",
    "href": "posts/2017-08-27-installer-gphoto2/index.html#quelques-liens",
    "title": "Installer GPHOTO2",
    "section": "Quelques liens",
    "text": "Quelques liens\n\nhttp://gphoto.org/\nhttp://lists.alioth.debian.org/pipermail/pkg-phototools-devel/2017-June/010392.html\nhttps://github.com/gphoto/gphoto2\nhttps://github.com/gphoto/gphoto2/issues/72\nhttps://www.raspberrypi.org/forums/viewtopic.php?t=186405\nhttp://archive.raspbian.org/raspbian/pool/main/g/gphoto2/\nhttps://github.com/NicHub/ouilogique.com/commit/d4f594d08b8c9a30e6577072fafda794f4ec93bc\nhttps://packages.debian.org/stretch/gphoto2"
  },
  {
    "objectID": "posts/2016-04-25-test_taille_port_vs_arduino/index.html",
    "href": "posts/2016-04-25-test_taille_port_vs_arduino/index.html",
    "title": "Test de taille entre les fonctions de manipulation de ports et les fonctions Arduino",
    "section": "",
    "text": "Voici un comparatif de la taille mémoire du programme blink lorsqu’on utilise les fonctions de port ou les fonctions Arduino.\n© ouilogique.com"
  },
  {
    "objectID": "posts/2016-04-25-test_taille_port_vs_arduino/index.html#progamme-blink-fourni-dans-les-exemples-arduino",
    "href": "posts/2016-04-25-test_taille_port_vs_arduino/index.html#progamme-blink-fourni-dans-les-exemples-arduino",
    "title": "Test de taille entre les fonctions de manipulation de ports et les fonctions Arduino",
    "section": "Progamme Blink fourni dans les exemples Arduino",
    "text": "Progamme Blink fourni dans les exemples Arduino\nLe croquis utilise 1 066 octets (3%) de l'espace de stockage de programmes. Le maximum est de 32 256 octets.\nLes variables globales utilisent 9 octets (0%) de mémoire dynamique, ce qui laisse 2 039 octets pour les variables locales. Le maximum est de 2 048 octets."
  },
  {
    "objectID": "posts/2016-04-25-test_taille_port_vs_arduino/index.html#programme-avec-les-manipulations-de-port",
    "href": "posts/2016-04-25-test_taille_port_vs_arduino/index.html#programme-avec-les-manipulations-de-port",
    "title": "Test de taille entre les fonctions de manipulation de ports et les fonctions Arduino",
    "section": "Programme avec les manipulations de port",
    "text": "Programme avec les manipulations de port\nVoir le programme BlinkPort.ino ci-dessous.\nLe croquis utilise 492 octets (1%) de l'espace de stockage de programmes. Le maximum est de 32 256 octets.\nLes variables globales utilisent 9 octets (0%) de mémoire dynamique, ce qui laisse 2 039 octets pour les variables locales. Le maximum est de 2 048 octets."
  },
  {
    "objectID": "posts/2016-04-25-test_taille_port_vs_arduino/index.html#conclusion",
    "href": "posts/2016-04-25-test_taille_port_vs_arduino/index.html#conclusion",
    "title": "Test de taille entre les fonctions de manipulation de ports et les fonctions Arduino",
    "section": "Conclusion",
    "text": "Conclusion\nOn voit que la taille en mémoire de stockage de programme est 2.16 fois plus élevée avec les fonctions Arduino qu’en manipulant directement les ports. Et la taille, c’est une chose, mais il y a aussi un net avantage dans la vitesse d’exécution, comme vous pouvez le découvrir dans l’article suivant : Test de vitesse entre les fonctions de manipulation de ports et les fonctions Arduino.\n// BlinkPort.ino\n// Clignote la LED 13 toute les secondes avec les manipulations de port\n\nstatic const double wait = 1000;\n\n#define LED13Toggle              PORTB ^= 1UL&lt;&lt;PORTB5\n#define LED13Read                bitRead (  PINB, PORTB5 )\n#define LED13Set                 bitSet  ( PORTB, PORTB5 )\n#define LED13Clear               bitClear( PORTB, PORTB5 )\n#define LED13OutputPinMode       bitSet  (  DDRB, PORTB5 )\n#define LED13InputPinMode        bitClear(  DDRB, PORTB5 )\n#define LED13InputPullupPinMode  LED13InputPinMode;LED13Set\n\nvoid setup()\n{\n  LED13OutputPinMode;\n}\n\nvoid loop()\n{\n  LED13Set;\n  _delay_ms( wait );\n  LED13Clear;\n  _delay_ms( wait );\n}"
  },
  {
    "objectID": "posts/2016-06-04-test_horloge_temps_reel_i2c/index.html",
    "href": "posts/2016-06-04-test_horloge_temps_reel_i2c/index.html",
    "title": "Test d’une horloge temps réel DS1307 I²C",
    "section": "",
    "text": "ouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n\n\n\nouilogique.com\n\n\n/*\n\nTEST DE L’HORLOGE TEMPS RÉEL (RTC) DS1307 I²C\n\nRÉFÉRENCE AliExpress DU DS1307\nhttp://fr.aliexpress.com/item/5pcs-lot-Tiny-RTC-I2C-AT24C32-DS1307-Real-Time-Clock-Module-Board-For-Arduino-With-A/32327865928.html\n\nADRESSES I²C DU DS1307\n0x50 (EEPROM AT24C32)\n0x68 (DS1307)\n\nVERSION ORIGINALE DU PROGRAMME\nhttp://www.avrfreaks.net/forum/printing-leading-zero-serialprint-function\n\nLIBRAIRIE Adafruit du DS1307\nhttps://github.com/adafruit/RTClib.git\n\nCONNEXIONS\nGND    GND\nVCC    +5V\nSDA    pin A4\nSCL    pin A5\n\nMICROCONTRÔLEUR\nClone Arduino Nano\n\njuin 2016, ouilogique.com\n\n*/\n\n#include \"RTClib.h\"\n\nRTC_Millis RTC;\n\nvoid setup()\n{\n  Serial.begin( 115200 );\n  // Règle le DS1307 à la date et l’heure de la compilation du programme\n  RTC.begin( DateTime( __DATE__, __TIME__ ) );\n}\n\nvoid loop()\n{\n  DateTime now = RTC.now();\n  char buf[ 50 ];\n  sprintf( buf, \"\\n\\n%1d-%1d-%1d\\n%02d:%02d:%02d\", now.day(), now.month(), now.year(), now.hour(), now.minute(), now.second() );\n  Serial.print( buf );\n  _delay_ms( 1000 );\n}\n\n\n\n© ouilogique.com"
  },
  {
    "objectID": "posts/2023-10-10-test/index.html",
    "href": "posts/2023-10-10-test/index.html",
    "title": "Test",
    "section": "",
    "text": "https://biati-digital.github.io/glightbox/\n\n\n\nFigure 1: An Elephant\n\n\nThis is illustrated well by Figure 1.\n\n\n\n© ouilogique.com"
  }
]